// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  role      UserRole @default(STUDENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  announcements Announcement[]
  studyMaterials StudyMaterial[]
  quizzes       Quiz[]
  quizAttempts  QuizAttempt[]
}

model Subject {
  id          String   @id @default(cuid())
  name        String
  description String?
  grade       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  studyMaterials StudyMaterial[]
  quizzes       Quiz[]
}

model StudyMaterial {
  id          String           @id @default(cuid())
  title       String
  description String?
  type        MaterialType
  fileUrl     String?
  fileSize    Int?
  subjectId   String
  uploadedBy  String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  // Relations
  subject Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [uploadedBy], references: [id], onDelete: Cascade)
}

model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String
  scheduled Boolean  @default(false)
  scheduledFor DateTime?
  createdBy String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [createdBy], references: [id], onDelete: Cascade)
}

model Quiz {
  id          String   @id @default(cuid())
  title       String
  description String?
  subjectId   String
  questions   Json     // Array of question objects
  timeLimit   Int?     // in minutes
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  subject      Subject       @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  user         User          @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  quizAttempts QuizAttempt[]
}

model QuizAttempt {
  id        String   @id @default(cuid())
  quizId    String
  userId    String
  score     Int
  answers   Json     // Array of answer objects
  completedAt DateTime @default(now())

  // Relations
  quiz Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([quizId, userId])
}

enum UserRole {
  ADMIN
  TEACHER
  STUDENT
}

enum MaterialType {
  PDF
  VIDEO
  IMAGE
  DOCUMENT
  PRESENTATION
}
