"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/protobufjs";
exports.ids = ["vendor-chunks/protobufjs"];
exports.modules = {

/***/ "(ssr)/./node_modules/protobufjs/ext/descriptor/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/protobufjs/ext/descriptor/index.js ***!
  \*********************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\nvar $protobuf = __webpack_require__(/*! ../.. */ \"(ssr)/./node_modules/protobufjs/index.js\");\nmodule.exports = exports = $protobuf.descriptor = $protobuf.Root.fromJSON(__webpack_require__(/*! ../../google/protobuf/descriptor.json */ \"(ssr)/./node_modules/protobufjs/google/protobuf/descriptor.json\")).lookup(\".google.protobuf\");\nvar Namespace = $protobuf.Namespace, Root = $protobuf.Root, Enum = $protobuf.Enum, Type = $protobuf.Type, Field = $protobuf.Field, MapField = $protobuf.MapField, OneOf = $protobuf.OneOf, Service = $protobuf.Service, Method = $protobuf.Method;\n// --- Root ---\n/**\n * Properties of a FileDescriptorSet message.\n * @interface IFileDescriptorSet\n * @property {IFileDescriptorProto[]} file Files\n */ /**\n * Properties of a FileDescriptorProto message.\n * @interface IFileDescriptorProto\n * @property {string} [name] File name\n * @property {string} [package] Package\n * @property {*} [dependency] Not supported\n * @property {*} [publicDependency] Not supported\n * @property {*} [weakDependency] Not supported\n * @property {IDescriptorProto[]} [messageType] Nested message types\n * @property {IEnumDescriptorProto[]} [enumType] Nested enums\n * @property {IServiceDescriptorProto[]} [service] Nested services\n * @property {IFieldDescriptorProto[]} [extension] Nested extension fields\n * @property {IFileOptions} [options] Options\n * @property {*} [sourceCodeInfo] Not supported\n * @property {string} [syntax=\"proto2\"] Syntax\n * @property {IEdition} [edition] Edition\n */ /**\n * Values of the Edition enum.\n * @typedef IEdition\n * @type {number}\n * @property {number} EDITION_UNKNOWN=0\n * @property {number} EDITION_LEGACY=900\n * @property {number} EDITION_PROTO2=998\n * @property {number} EDITION_PROTO3=999\n * @property {number} EDITION_2023=1000\n * @property {number} EDITION_2024=1001\n * @property {number} EDITION_1_TEST_ONLY=1\n * @property {number} EDITION_2_TEST_ONLY=2\n * @property {number} EDITION_99997_TEST_ONLY=99997\n * @property {number} EDITION_99998_TEST_ONLY=99998\n * @property {number} EDITION_99998_TEST_ONLY=99999\n * @property {number} EDITION_MAX=2147483647\n */ /**\n * Properties of a FileOptions message.\n * @interface IFileOptions\n * @property {string} [javaPackage]\n * @property {string} [javaOuterClassname]\n * @property {boolean} [javaMultipleFiles]\n * @property {boolean} [javaGenerateEqualsAndHash]\n * @property {boolean} [javaStringCheckUtf8]\n * @property {IFileOptionsOptimizeMode} [optimizeFor=1]\n * @property {string} [goPackage]\n * @property {boolean} [ccGenericServices]\n * @property {boolean} [javaGenericServices]\n * @property {boolean} [pyGenericServices]\n * @property {boolean} [deprecated]\n * @property {boolean} [ccEnableArenas]\n * @property {string} [objcClassPrefix]\n * @property {string} [csharpNamespace]\n */ /**\n * Values of he FileOptions.OptimizeMode enum.\n * @typedef IFileOptionsOptimizeMode\n * @type {number}\n * @property {number} SPEED=1\n * @property {number} CODE_SIZE=2\n * @property {number} LITE_RUNTIME=3\n */ /**\n * Creates a root from a descriptor set.\n * @param {IFileDescriptorSet|Reader|Uint8Array} descriptor Descriptor\n * @returns {Root} Root instance\n */ Root.fromDescriptor = function fromDescriptor(descriptor) {\n    // Decode the descriptor message if specified as a buffer:\n    if (typeof descriptor.length === \"number\") descriptor = exports.FileDescriptorSet.decode(descriptor);\n    var root = new Root();\n    if (descriptor.file) {\n        var fileDescriptor, filePackage;\n        for(var j = 0, i; j < descriptor.file.length; ++j){\n            filePackage = root;\n            if ((fileDescriptor = descriptor.file[j])[\"package\"] && fileDescriptor[\"package\"].length) filePackage = root.define(fileDescriptor[\"package\"]);\n            var edition = editionFromDescriptor(fileDescriptor);\n            if (fileDescriptor.name && fileDescriptor.name.length) root.files.push(filePackage.filename = fileDescriptor.name);\n            if (fileDescriptor.messageType) for(i = 0; i < fileDescriptor.messageType.length; ++i)filePackage.add(Type.fromDescriptor(fileDescriptor.messageType[i], edition));\n            if (fileDescriptor.enumType) for(i = 0; i < fileDescriptor.enumType.length; ++i)filePackage.add(Enum.fromDescriptor(fileDescriptor.enumType[i], edition));\n            if (fileDescriptor.extension) for(i = 0; i < fileDescriptor.extension.length; ++i)filePackage.add(Field.fromDescriptor(fileDescriptor.extension[i], edition));\n            if (fileDescriptor.service) for(i = 0; i < fileDescriptor.service.length; ++i)filePackage.add(Service.fromDescriptor(fileDescriptor.service[i], edition));\n            var opts = fromDescriptorOptions(fileDescriptor.options, exports.FileOptions);\n            if (opts) {\n                var ks = Object.keys(opts);\n                for(i = 0; i < ks.length; ++i)filePackage.setOption(ks[i], opts[ks[i]]);\n            }\n        }\n    }\n    return root.resolveAll();\n};\n/**\n * Converts a root to a descriptor set.\n * @returns {Message<IFileDescriptorSet>} Descriptor\n * @param {string} [edition=\"proto2\"] The syntax or edition to use\n */ Root.prototype.toDescriptor = function toDescriptor(edition) {\n    var set = exports.FileDescriptorSet.create();\n    Root_toDescriptorRecursive(this, set.file, edition);\n    return set;\n};\n// Traverses a namespace and assembles the descriptor set\nfunction Root_toDescriptorRecursive(ns, files, edition) {\n    // Create a new file\n    var file = exports.FileDescriptorProto.create({\n        name: ns.filename || (ns.fullName.substring(1).replace(/\\./g, \"_\") || \"root\") + \".proto\"\n    });\n    editionToDescriptor(edition, file);\n    if (!(ns instanceof Root)) file[\"package\"] = ns.fullName.substring(1);\n    // Add nested types\n    for(var i = 0, nested; i < ns.nestedArray.length; ++i)if ((nested = ns._nestedArray[i]) instanceof Type) file.messageType.push(nested.toDescriptor(edition));\n    else if (nested instanceof Enum) file.enumType.push(nested.toDescriptor());\n    else if (nested instanceof Field) file.extension.push(nested.toDescriptor(edition));\n    else if (nested instanceof Service) file.service.push(nested.toDescriptor());\n    else if (nested instanceof /* plain */ Namespace) Root_toDescriptorRecursive(nested, files, edition); // requires new file\n    // Keep package-level options\n    file.options = toDescriptorOptions(ns.options, exports.FileOptions);\n    // And keep the file only if there is at least one nested object\n    if (file.messageType.length + file.enumType.length + file.extension.length + file.service.length) files.push(file);\n}\n// --- Type ---\n/**\n * Properties of a DescriptorProto message.\n * @interface IDescriptorProto\n * @property {string} [name] Message type name\n * @property {IFieldDescriptorProto[]} [field] Fields\n * @property {IFieldDescriptorProto[]} [extension] Extension fields\n * @property {IDescriptorProto[]} [nestedType] Nested message types\n * @property {IEnumDescriptorProto[]} [enumType] Nested enums\n * @property {IDescriptorProtoExtensionRange[]} [extensionRange] Extension ranges\n * @property {IOneofDescriptorProto[]} [oneofDecl] Oneofs\n * @property {IMessageOptions} [options] Not supported\n * @property {IDescriptorProtoReservedRange[]} [reservedRange] Reserved ranges\n * @property {string[]} [reservedName] Reserved names\n */ /**\n * Properties of a MessageOptions message.\n * @interface IMessageOptions\n * @property {boolean} [mapEntry=false] Whether this message is a map entry\n */ /**\n * Properties of an ExtensionRange message.\n * @interface IDescriptorProtoExtensionRange\n * @property {number} [start] Start field id\n * @property {number} [end] End field id\n */ /**\n * Properties of a ReservedRange message.\n * @interface IDescriptorProtoReservedRange\n * @property {number} [start] Start field id\n * @property {number} [end] End field id\n */ var unnamedMessageIndex = 0;\n/**\n * Creates a type from a descriptor.\n *\n * Warning: this is not safe to use with editions protos, since it discards relevant file context.\n *\n * @param {IDescriptorProto|Reader|Uint8Array} descriptor Descriptor\n * @param {string} [edition=\"proto2\"] The syntax or edition to use\n * @param {boolean} [nested=false] Whether or not this is a nested object\n * @returns {Type} Type instance\n */ Type.fromDescriptor = function fromDescriptor(descriptor, edition, nested) {\n    // Decode the descriptor message if specified as a buffer:\n    if (typeof descriptor.length === \"number\") descriptor = exports.DescriptorProto.decode(descriptor);\n    // Create the message type\n    var type = new Type(descriptor.name.length ? descriptor.name : \"Type\" + unnamedMessageIndex++, fromDescriptorOptions(descriptor.options, exports.MessageOptions)), i;\n    if (!nested) type._edition = edition;\n    /* Oneofs */ if (descriptor.oneofDecl) for(i = 0; i < descriptor.oneofDecl.length; ++i)type.add(OneOf.fromDescriptor(descriptor.oneofDecl[i]));\n    /* Fields */ if (descriptor.field) for(i = 0; i < descriptor.field.length; ++i){\n        var field = Field.fromDescriptor(descriptor.field[i], edition, true);\n        type.add(field);\n        if (descriptor.field[i].hasOwnProperty(\"oneofIndex\")) type.oneofsArray[descriptor.field[i].oneofIndex].add(field);\n    }\n    /* Extension fields */ if (descriptor.extension) for(i = 0; i < descriptor.extension.length; ++i)type.add(Field.fromDescriptor(descriptor.extension[i], edition, true));\n    /* Nested types */ if (descriptor.nestedType) for(i = 0; i < descriptor.nestedType.length; ++i){\n        type.add(Type.fromDescriptor(descriptor.nestedType[i], edition, true));\n        if (descriptor.nestedType[i].options && descriptor.nestedType[i].options.mapEntry) type.setOption(\"map_entry\", true);\n    }\n    /* Nested enums */ if (descriptor.enumType) for(i = 0; i < descriptor.enumType.length; ++i)type.add(Enum.fromDescriptor(descriptor.enumType[i], edition, true));\n    /* Extension ranges */ if (descriptor.extensionRange && descriptor.extensionRange.length) {\n        type.extensions = [];\n        for(i = 0; i < descriptor.extensionRange.length; ++i)type.extensions.push([\n            descriptor.extensionRange[i].start,\n            descriptor.extensionRange[i].end\n        ]);\n    }\n    /* Reserved... */ if (descriptor.reservedRange && descriptor.reservedRange.length || descriptor.reservedName && descriptor.reservedName.length) {\n        type.reserved = [];\n        /* Ranges */ if (descriptor.reservedRange) for(i = 0; i < descriptor.reservedRange.length; ++i)type.reserved.push([\n            descriptor.reservedRange[i].start,\n            descriptor.reservedRange[i].end\n        ]);\n        /* Names */ if (descriptor.reservedName) for(i = 0; i < descriptor.reservedName.length; ++i)type.reserved.push(descriptor.reservedName[i]);\n    }\n    return type;\n};\n/**\n * Converts a type to a descriptor.\n * @returns {Message<IDescriptorProto>} Descriptor\n * @param {string} [edition=\"proto2\"] The syntax or edition to use\n */ Type.prototype.toDescriptor = function toDescriptor(edition) {\n    var descriptor = exports.DescriptorProto.create({\n        name: this.name\n    }), i;\n    /* Fields */ for(i = 0; i < this.fieldsArray.length; ++i){\n        var fieldDescriptor;\n        descriptor.field.push(fieldDescriptor = this._fieldsArray[i].toDescriptor(edition));\n        if (this._fieldsArray[i] instanceof MapField) {\n            var keyType = toDescriptorType(this._fieldsArray[i].keyType, this._fieldsArray[i].resolvedKeyType, false), valueType = toDescriptorType(this._fieldsArray[i].type, this._fieldsArray[i].resolvedType, false), valueTypeName = valueType === /* type */ 11 || valueType === /* enum */ 14 ? this._fieldsArray[i].resolvedType && shortname(this.parent, this._fieldsArray[i].resolvedType) || this._fieldsArray[i].type : undefined;\n            descriptor.nestedType.push(exports.DescriptorProto.create({\n                name: fieldDescriptor.typeName,\n                field: [\n                    exports.FieldDescriptorProto.create({\n                        name: \"key\",\n                        number: 1,\n                        label: 1,\n                        type: keyType\n                    }),\n                    exports.FieldDescriptorProto.create({\n                        name: \"value\",\n                        number: 2,\n                        label: 1,\n                        type: valueType,\n                        typeName: valueTypeName\n                    })\n                ],\n                options: exports.MessageOptions.create({\n                    mapEntry: true\n                })\n            }));\n        }\n    }\n    /* Oneofs */ for(i = 0; i < this.oneofsArray.length; ++i)descriptor.oneofDecl.push(this._oneofsArray[i].toDescriptor());\n    /* Nested... */ for(i = 0; i < this.nestedArray.length; ++i){\n        /* Extension fields */ if (this._nestedArray[i] instanceof Field) descriptor.field.push(this._nestedArray[i].toDescriptor(edition));\n        else if (this._nestedArray[i] instanceof Type) descriptor.nestedType.push(this._nestedArray[i].toDescriptor(edition));\n        else if (this._nestedArray[i] instanceof Enum) descriptor.enumType.push(this._nestedArray[i].toDescriptor());\n    // plain nested namespaces become packages instead in Root#toDescriptor\n    }\n    /* Extension ranges */ if (this.extensions) for(i = 0; i < this.extensions.length; ++i)descriptor.extensionRange.push(exports.DescriptorProto.ExtensionRange.create({\n        start: this.extensions[i][0],\n        end: this.extensions[i][1]\n    }));\n    /* Reserved... */ if (this.reserved) for(i = 0; i < this.reserved.length; ++i)/* Names */ if (typeof this.reserved[i] === \"string\") descriptor.reservedName.push(this.reserved[i]);\n    else descriptor.reservedRange.push(exports.DescriptorProto.ReservedRange.create({\n        start: this.reserved[i][0],\n        end: this.reserved[i][1]\n    }));\n    descriptor.options = toDescriptorOptions(this.options, exports.MessageOptions);\n    return descriptor;\n};\n// --- Field ---\n/**\n * Properties of a FieldDescriptorProto message.\n * @interface IFieldDescriptorProto\n * @property {string} [name] Field name\n * @property {number} [number] Field id\n * @property {IFieldDescriptorProtoLabel} [label] Field rule\n * @property {IFieldDescriptorProtoType} [type] Field basic type\n * @property {string} [typeName] Field type name\n * @property {string} [extendee] Extended type name\n * @property {string} [defaultValue] Literal default value\n * @property {number} [oneofIndex] Oneof index if part of a oneof\n * @property {*} [jsonName] Not supported\n * @property {IFieldOptions} [options] Field options\n */ /**\n * Values of the FieldDescriptorProto.Label enum.\n * @typedef IFieldDescriptorProtoLabel\n * @type {number}\n * @property {number} LABEL_OPTIONAL=1\n * @property {number} LABEL_REQUIRED=2\n * @property {number} LABEL_REPEATED=3\n */ /**\n * Values of the FieldDescriptorProto.Type enum.\n * @typedef IFieldDescriptorProtoType\n * @type {number}\n * @property {number} TYPE_DOUBLE=1\n * @property {number} TYPE_FLOAT=2\n * @property {number} TYPE_INT64=3\n * @property {number} TYPE_UINT64=4\n * @property {number} TYPE_INT32=5\n * @property {number} TYPE_FIXED64=6\n * @property {number} TYPE_FIXED32=7\n * @property {number} TYPE_BOOL=8\n * @property {number} TYPE_STRING=9\n * @property {number} TYPE_GROUP=10\n * @property {number} TYPE_MESSAGE=11\n * @property {number} TYPE_BYTES=12\n * @property {number} TYPE_UINT32=13\n * @property {number} TYPE_ENUM=14\n * @property {number} TYPE_SFIXED32=15\n * @property {number} TYPE_SFIXED64=16\n * @property {number} TYPE_SINT32=17\n * @property {number} TYPE_SINT64=18\n */ /**\n * Properties of a FieldOptions message.\n * @interface IFieldOptions\n * @property {boolean} [packed] Whether packed or not (defaults to `false` for proto2 and `true` for proto3)\n * @property {IFieldOptionsJSType} [jstype] JavaScript value type (not used by protobuf.js)\n */ /**\n * Values of the FieldOptions.JSType enum.\n * @typedef IFieldOptionsJSType\n * @type {number}\n * @property {number} JS_NORMAL=0\n * @property {number} JS_STRING=1\n * @property {number} JS_NUMBER=2\n */ // copied here from parse.js\nvar numberRe = /^(?![eE])[0-9]*(?:\\.[0-9]*)?(?:[eE][+-]?[0-9]+)?$/;\n/**\n * Creates a field from a descriptor.\n *\n * Warning: this is not safe to use with editions protos, since it discards relevant file context.\n *\n * @param {IFieldDescriptorProto|Reader|Uint8Array} descriptor Descriptor\n * @param {string} [edition=\"proto2\"] The syntax or edition to use\n * @param {boolean} [nested=false] Whether or not this is a top-level object\n * @returns {Field} Field instance\n */ Field.fromDescriptor = function fromDescriptor(descriptor, edition, nested) {\n    // Decode the descriptor message if specified as a buffer:\n    if (typeof descriptor.length === \"number\") descriptor = exports.DescriptorProto.decode(descriptor);\n    if (typeof descriptor.number !== \"number\") throw Error(\"missing field id\");\n    // Rewire field type\n    var fieldType;\n    if (descriptor.typeName && descriptor.typeName.length) fieldType = descriptor.typeName;\n    else fieldType = fromDescriptorType(descriptor.type);\n    // Rewire field rule\n    var fieldRule;\n    switch(descriptor.label){\n        // 0 is reserved for errors\n        case 1:\n            fieldRule = undefined;\n            break;\n        case 2:\n            fieldRule = \"required\";\n            break;\n        case 3:\n            fieldRule = \"repeated\";\n            break;\n        default:\n            throw Error(\"illegal label: \" + descriptor.label);\n    }\n    var extendee = descriptor.extendee;\n    if (descriptor.extendee !== undefined) {\n        extendee = extendee.length ? extendee : undefined;\n    }\n    var field = new Field(descriptor.name.length ? descriptor.name : \"field\" + descriptor.number, descriptor.number, fieldType, fieldRule, extendee);\n    if (!nested) field._edition = edition;\n    field.options = fromDescriptorOptions(descriptor.options, exports.FieldOptions);\n    if (descriptor.proto3_optional) field.options.proto3_optional = true;\n    if (descriptor.defaultValue && descriptor.defaultValue.length) {\n        var defaultValue = descriptor.defaultValue;\n        switch(defaultValue){\n            case \"true\":\n            case \"TRUE\":\n                defaultValue = true;\n                break;\n            case \"false\":\n            case \"FALSE\":\n                defaultValue = false;\n                break;\n            default:\n                var match = numberRe.exec(defaultValue);\n                if (match) defaultValue = parseInt(defaultValue); // eslint-disable-line radix\n                break;\n        }\n        field.setOption(\"default\", defaultValue);\n    }\n    if (packableDescriptorType(descriptor.type)) {\n        if (edition === \"proto3\") {\n            if (descriptor.options && !descriptor.options.packed) field.setOption(\"packed\", false);\n        } else if ((!edition || edition === \"proto2\") && descriptor.options && descriptor.options.packed) field.setOption(\"packed\", true);\n    }\n    return field;\n};\n/**\n * Converts a field to a descriptor.\n * @returns {Message<IFieldDescriptorProto>} Descriptor\n * @param {string} [edition=\"proto2\"] The syntax or edition to use\n */ Field.prototype.toDescriptor = function toDescriptor(edition) {\n    var descriptor = exports.FieldDescriptorProto.create({\n        name: this.name,\n        number: this.id\n    });\n    if (this.map) {\n        descriptor.type = 11; // message\n        descriptor.typeName = $protobuf.util.ucFirst(this.name); // fieldName -> FieldNameEntry (built in Type#toDescriptor)\n        descriptor.label = 3; // repeated\n    } else {\n        // Rewire field type\n        switch(descriptor.type = toDescriptorType(this.type, this.resolve().resolvedType, this.delimited)){\n            case 10:\n            case 11:\n            case 14:\n                descriptor.typeName = this.resolvedType ? shortname(this.parent, this.resolvedType) : this.type;\n                break;\n        }\n        // Rewire field rule\n        if (this.rule === \"repeated\") {\n            descriptor.label = 3;\n        } else if (this.required && edition === \"proto2\") {\n            descriptor.label = 2;\n        } else {\n            descriptor.label = 1;\n        }\n    }\n    // Handle extension field\n    descriptor.extendee = this.extensionField ? this.extensionField.parent.fullName : this.extend;\n    // Handle part of oneof\n    if (this.partOf) {\n        if ((descriptor.oneofIndex = this.parent.oneofsArray.indexOf(this.partOf)) < 0) throw Error(\"missing oneof\");\n    }\n    if (this.options) {\n        descriptor.options = toDescriptorOptions(this.options, exports.FieldOptions);\n        if (this.options[\"default\"] != null) descriptor.defaultValue = String(this.options[\"default\"]);\n        if (this.options.proto3_optional) descriptor.proto3_optional = true;\n    }\n    if (edition === \"proto3\") {\n        if (!this.packed) (descriptor.options || (descriptor.options = exports.FieldOptions.create())).packed = false;\n    } else if ((!edition || edition === \"proto2\") && this.packed) (descriptor.options || (descriptor.options = exports.FieldOptions.create())).packed = true;\n    return descriptor;\n};\n// --- Enum ---\n/**\n * Properties of an EnumDescriptorProto message.\n * @interface IEnumDescriptorProto\n * @property {string} [name] Enum name\n * @property {IEnumValueDescriptorProto[]} [value] Enum values\n * @property {IEnumOptions} [options] Enum options\n */ /**\n * Properties of an EnumValueDescriptorProto message.\n * @interface IEnumValueDescriptorProto\n * @property {string} [name] Name\n * @property {number} [number] Value\n * @property {*} [options] Not supported\n */ /**\n * Properties of an EnumOptions message.\n * @interface IEnumOptions\n * @property {boolean} [allowAlias] Whether aliases are allowed\n * @property {boolean} [deprecated]\n */ var unnamedEnumIndex = 0;\n/**\n * Creates an enum from a descriptor.\n *\n * Warning: this is not safe to use with editions protos, since it discards relevant file context.\n *\n * @param {IEnumDescriptorProto|Reader|Uint8Array} descriptor Descriptor\n * @param {string} [edition=\"proto2\"] The syntax or edition to use\n * @param {boolean} [nested=false] Whether or not this is a top-level object\n * @returns {Enum} Enum instance\n */ Enum.fromDescriptor = function fromDescriptor(descriptor, edition, nested) {\n    // Decode the descriptor message if specified as a buffer:\n    if (typeof descriptor.length === \"number\") descriptor = exports.EnumDescriptorProto.decode(descriptor);\n    // Construct values object\n    var values = {};\n    if (descriptor.value) for(var i = 0; i < descriptor.value.length; ++i){\n        var name = descriptor.value[i].name, value = descriptor.value[i].number || 0;\n        values[name && name.length ? name : \"NAME\" + value] = value;\n    }\n    var enm = new Enum(descriptor.name && descriptor.name.length ? descriptor.name : \"Enum\" + unnamedEnumIndex++, values, fromDescriptorOptions(descriptor.options, exports.EnumOptions));\n    if (!nested) enm._edition = edition;\n    return enm;\n};\n/**\n * Converts an enum to a descriptor.\n * @returns {Message<IEnumDescriptorProto>} Descriptor\n */ Enum.prototype.toDescriptor = function toDescriptor() {\n    // Values\n    var values = [];\n    for(var i = 0, ks = Object.keys(this.values); i < ks.length; ++i)values.push(exports.EnumValueDescriptorProto.create({\n        name: ks[i],\n        number: this.values[ks[i]]\n    }));\n    return exports.EnumDescriptorProto.create({\n        name: this.name,\n        value: values,\n        options: toDescriptorOptions(this.options, exports.EnumOptions)\n    });\n};\n// --- OneOf ---\n/**\n * Properties of a OneofDescriptorProto message.\n * @interface IOneofDescriptorProto\n * @property {string} [name] Oneof name\n * @property {*} [options] Not supported\n */ var unnamedOneofIndex = 0;\n/**\n * Creates a oneof from a descriptor.\n *\n * Warning: this is not safe to use with editions protos, since it discards relevant file context.\n *\n * @param {IOneofDescriptorProto|Reader|Uint8Array} descriptor Descriptor\n * @returns {OneOf} OneOf instance\n */ OneOf.fromDescriptor = function fromDescriptor(descriptor) {\n    // Decode the descriptor message if specified as a buffer:\n    if (typeof descriptor.length === \"number\") descriptor = exports.OneofDescriptorProto.decode(descriptor);\n    return new OneOf(// unnamedOneOfIndex is global, not per type, because we have no ref to a type here\n    descriptor.name && descriptor.name.length ? descriptor.name : \"oneof\" + unnamedOneofIndex++);\n};\n/**\n * Converts a oneof to a descriptor.\n * @returns {Message<IOneofDescriptorProto>} Descriptor\n */ OneOf.prototype.toDescriptor = function toDescriptor() {\n    return exports.OneofDescriptorProto.create({\n        name: this.name\n    });\n};\n// --- Service ---\n/**\n * Properties of a ServiceDescriptorProto message.\n * @interface IServiceDescriptorProto\n * @property {string} [name] Service name\n * @property {IMethodDescriptorProto[]} [method] Methods\n * @property {IServiceOptions} [options] Options\n */ /**\n * Properties of a ServiceOptions message.\n * @interface IServiceOptions\n * @property {boolean} [deprecated]\n */ var unnamedServiceIndex = 0;\n/**\n * Creates a service from a descriptor.\n *\n * Warning: this is not safe to use with editions protos, since it discards relevant file context.\n *\n * @param {IServiceDescriptorProto|Reader|Uint8Array} descriptor Descriptor\n * @param {string} [edition=\"proto2\"] The syntax or edition to use\n * @param {boolean} [nested=false] Whether or not this is a top-level object\n * @returns {Service} Service instance\n */ Service.fromDescriptor = function fromDescriptor(descriptor, edition, nested) {\n    // Decode the descriptor message if specified as a buffer:\n    if (typeof descriptor.length === \"number\") descriptor = exports.ServiceDescriptorProto.decode(descriptor);\n    var service = new Service(descriptor.name && descriptor.name.length ? descriptor.name : \"Service\" + unnamedServiceIndex++, fromDescriptorOptions(descriptor.options, exports.ServiceOptions));\n    if (!nested) service._edition = edition;\n    if (descriptor.method) for(var i = 0; i < descriptor.method.length; ++i)service.add(Method.fromDescriptor(descriptor.method[i]));\n    return service;\n};\n/**\n * Converts a service to a descriptor.\n * @returns {Message<IServiceDescriptorProto>} Descriptor\n */ Service.prototype.toDescriptor = function toDescriptor() {\n    // Methods\n    var methods = [];\n    for(var i = 0; i < this.methodsArray.length; ++i)methods.push(this._methodsArray[i].toDescriptor());\n    return exports.ServiceDescriptorProto.create({\n        name: this.name,\n        method: methods,\n        options: toDescriptorOptions(this.options, exports.ServiceOptions)\n    });\n};\n// --- Method ---\n/**\n * Properties of a MethodDescriptorProto message.\n * @interface IMethodDescriptorProto\n * @property {string} [name] Method name\n * @property {string} [inputType] Request type name\n * @property {string} [outputType] Response type name\n * @property {IMethodOptions} [options] Not supported\n * @property {boolean} [clientStreaming=false] Whether requests are streamed\n * @property {boolean} [serverStreaming=false] Whether responses are streamed\n */ /**\n * Properties of a MethodOptions message.\n *\n * Warning: this is not safe to use with editions protos, since it discards relevant file context.\n *\n * @interface IMethodOptions\n * @property {boolean} [deprecated]\n */ var unnamedMethodIndex = 0;\n/**\n * Creates a method from a descriptor.\n * @param {IMethodDescriptorProto|Reader|Uint8Array} descriptor Descriptor\n * @returns {Method} Reflected method instance\n */ Method.fromDescriptor = function fromDescriptor(descriptor) {\n    // Decode the descriptor message if specified as a buffer:\n    if (typeof descriptor.length === \"number\") descriptor = exports.MethodDescriptorProto.decode(descriptor);\n    return new Method(// unnamedMethodIndex is global, not per service, because we have no ref to a service here\n    descriptor.name && descriptor.name.length ? descriptor.name : \"Method\" + unnamedMethodIndex++, \"rpc\", descriptor.inputType, descriptor.outputType, Boolean(descriptor.clientStreaming), Boolean(descriptor.serverStreaming), fromDescriptorOptions(descriptor.options, exports.MethodOptions));\n};\n/**\n * Converts a method to a descriptor.\n * @returns {Message<IMethodDescriptorProto>} Descriptor\n */ Method.prototype.toDescriptor = function toDescriptor() {\n    return exports.MethodDescriptorProto.create({\n        name: this.name,\n        inputType: this.resolvedRequestType ? this.resolvedRequestType.fullName : this.requestType,\n        outputType: this.resolvedResponseType ? this.resolvedResponseType.fullName : this.responseType,\n        clientStreaming: this.requestStream,\n        serverStreaming: this.responseStream,\n        options: toDescriptorOptions(this.options, exports.MethodOptions)\n    });\n};\n// --- utility ---\n// Converts a descriptor type to a protobuf.js basic type\nfunction fromDescriptorType(type) {\n    switch(type){\n        // 0 is reserved for errors\n        case 1:\n            return \"double\";\n        case 2:\n            return \"float\";\n        case 3:\n            return \"int64\";\n        case 4:\n            return \"uint64\";\n        case 5:\n            return \"int32\";\n        case 6:\n            return \"fixed64\";\n        case 7:\n            return \"fixed32\";\n        case 8:\n            return \"bool\";\n        case 9:\n            return \"string\";\n        case 12:\n            return \"bytes\";\n        case 13:\n            return \"uint32\";\n        case 15:\n            return \"sfixed32\";\n        case 16:\n            return \"sfixed64\";\n        case 17:\n            return \"sint32\";\n        case 18:\n            return \"sint64\";\n    }\n    throw Error(\"illegal type: \" + type);\n}\n// Tests if a descriptor type is packable\nfunction packableDescriptorType(type) {\n    switch(type){\n        case 1:\n        case 2:\n        case 3:\n        case 4:\n        case 5:\n        case 6:\n        case 7:\n        case 8:\n        case 13:\n        case 14:\n        case 15:\n        case 16:\n        case 17:\n        case 18:\n            return true;\n    }\n    return false;\n}\n// Converts a protobuf.js basic type to a descriptor type\nfunction toDescriptorType(type, resolvedType, delimited) {\n    switch(type){\n        // 0 is reserved for errors\n        case \"double\":\n            return 1;\n        case \"float\":\n            return 2;\n        case \"int64\":\n            return 3;\n        case \"uint64\":\n            return 4;\n        case \"int32\":\n            return 5;\n        case \"fixed64\":\n            return 6;\n        case \"fixed32\":\n            return 7;\n        case \"bool\":\n            return 8;\n        case \"string\":\n            return 9;\n        case \"bytes\":\n            return 12;\n        case \"uint32\":\n            return 13;\n        case \"sfixed32\":\n            return 15;\n        case \"sfixed64\":\n            return 16;\n        case \"sint32\":\n            return 17;\n        case \"sint64\":\n            return 18;\n    }\n    if (resolvedType instanceof Enum) return 14;\n    if (resolvedType instanceof Type) return delimited ? 10 : 11;\n    throw Error(\"illegal type: \" + type);\n}\nfunction fromDescriptorOptionsRecursive(obj, type) {\n    var val = {};\n    for(var i = 0, field, key; i < type.fieldsArray.length; ++i){\n        if ((key = (field = type._fieldsArray[i]).name) === \"uninterpretedOption\") continue;\n        if (!Object.prototype.hasOwnProperty.call(obj, key)) continue;\n        var newKey = underScore(key);\n        if (field.resolvedType instanceof Type) {\n            val[newKey] = fromDescriptorOptionsRecursive(obj[key], field.resolvedType);\n        } else if (field.resolvedType instanceof Enum) {\n            val[newKey] = field.resolvedType.valuesById[obj[key]];\n        } else {\n            val[newKey] = obj[key];\n        }\n    }\n    return val;\n}\n// Converts descriptor options to an options object\nfunction fromDescriptorOptions(options, type) {\n    if (!options) return undefined;\n    return fromDescriptorOptionsRecursive(type.toObject(options), type);\n}\nfunction toDescriptorOptionsRecursive(obj, type) {\n    var val = {};\n    var keys = Object.keys(obj);\n    for(var i = 0; i < keys.length; ++i){\n        var key = keys[i];\n        var newKey = $protobuf.util.camelCase(key);\n        if (!Object.prototype.hasOwnProperty.call(type.fields, newKey)) continue;\n        var field = type.fields[newKey];\n        if (field.resolvedType instanceof Type) {\n            val[newKey] = toDescriptorOptionsRecursive(obj[key], field.resolvedType);\n        } else {\n            val[newKey] = obj[key];\n        }\n        if (field.repeated && !Array.isArray(val[newKey])) {\n            val[newKey] = [\n                val[newKey]\n            ];\n        }\n    }\n    return val;\n}\n// Converts an options object to descriptor options\nfunction toDescriptorOptions(options, type) {\n    if (!options) return undefined;\n    return type.fromObject(toDescriptorOptionsRecursive(options, type));\n}\n// Calculates the shortest relative path from `from` to `to`.\nfunction shortname(from, to) {\n    var fromPath = from.fullName.split(\".\"), toPath = to.fullName.split(\".\"), i = 0, j = 0, k = toPath.length - 1;\n    if (!(from instanceof Root) && to instanceof Namespace) while(i < fromPath.length && j < k && fromPath[i] === toPath[j]){\n        var other = to.lookup(fromPath[i++], true);\n        if (other !== null && other !== to) break;\n        ++j;\n    }\n    else for(; i < fromPath.length && j < k && fromPath[i] === toPath[j]; ++i, ++j);\n    return toPath.slice(j).join(\".\");\n}\n// copied here from cli/targets/proto.js\nfunction underScore(str) {\n    return str.substring(0, 1) + str.substring(1).replace(/([A-Z])(?=[a-z]|$)/g, function($0, $1) {\n        return \"_\" + $1.toLowerCase();\n    });\n}\nfunction editionFromDescriptor(fileDescriptor) {\n    if (fileDescriptor.syntax === \"editions\") {\n        switch(fileDescriptor.edition){\n            case exports.Edition.EDITION_2023:\n                return \"2023\";\n            default:\n                throw new Error(\"Unsupported edition \" + fileDescriptor.edition);\n        }\n    }\n    if (fileDescriptor.syntax === \"proto3\") {\n        return \"proto3\";\n    }\n    return \"proto2\";\n}\nfunction editionToDescriptor(edition, fileDescriptor) {\n    if (!edition) return;\n    if (edition === \"proto2\" || edition === \"proto3\") {\n        fileDescriptor.syntax = edition;\n    } else {\n        fileDescriptor.syntax = \"editions\";\n        switch(edition){\n            case \"2023\":\n                fileDescriptor.edition = exports.Edition.EDITION_2023;\n                break;\n            default:\n                throw new Error(\"Unsupported edition \" + edition);\n        }\n    }\n} // --- exports ---\n /**\n * Reflected file descriptor set.\n * @name FileDescriptorSet\n * @type {Type}\n * @const\n * @tstype $protobuf.Type\n */  /**\n * Reflected file descriptor proto.\n * @name FileDescriptorProto\n * @type {Type}\n * @const\n * @tstype $protobuf.Type\n */  /**\n * Reflected descriptor proto.\n * @name DescriptorProto\n * @type {Type}\n * @property {Type} ExtensionRange\n * @property {Type} ReservedRange\n * @const\n * @tstype $protobuf.Type & {\n *     ExtensionRange: $protobuf.Type,\n *     ReservedRange: $protobuf.Type\n * }\n */  /**\n * Reflected field descriptor proto.\n * @name FieldDescriptorProto\n * @type {Type}\n * @property {Enum} Label\n * @property {Enum} Type\n * @const\n * @tstype $protobuf.Type & {\n *     Label: $protobuf.Enum,\n *     Type: $protobuf.Enum\n * }\n */  /**\n * Reflected oneof descriptor proto.\n * @name OneofDescriptorProto\n * @type {Type}\n * @const\n * @tstype $protobuf.Type\n */  /**\n * Reflected enum descriptor proto.\n * @name EnumDescriptorProto\n * @type {Type}\n * @const\n * @tstype $protobuf.Type\n */  /**\n * Reflected service descriptor proto.\n * @name ServiceDescriptorProto\n * @type {Type}\n * @const\n * @tstype $protobuf.Type\n */  /**\n * Reflected enum value descriptor proto.\n * @name EnumValueDescriptorProto\n * @type {Type}\n * @const\n * @tstype $protobuf.Type\n */  /**\n * Reflected method descriptor proto.\n * @name MethodDescriptorProto\n * @type {Type}\n * @const\n * @tstype $protobuf.Type\n */  /**\n * Reflected file options.\n * @name FileOptions\n * @type {Type}\n * @property {Enum} OptimizeMode\n * @const\n * @tstype $protobuf.Type & {\n *     OptimizeMode: $protobuf.Enum\n * }\n */  /**\n * Reflected message options.\n * @name MessageOptions\n * @type {Type}\n * @const\n * @tstype $protobuf.Type\n */  /**\n * Reflected field options.\n * @name FieldOptions\n * @type {Type}\n * @property {Enum} CType\n * @property {Enum} JSType\n * @const\n * @tstype $protobuf.Type & {\n *     CType: $protobuf.Enum,\n *     JSType: $protobuf.Enum\n * }\n */  /**\n * Reflected oneof options.\n * @name OneofOptions\n * @type {Type}\n * @const\n * @tstype $protobuf.Type\n */  /**\n * Reflected enum options.\n * @name EnumOptions\n * @type {Type}\n * @const\n * @tstype $protobuf.Type\n */  /**\n * Reflected enum value options.\n * @name EnumValueOptions\n * @type {Type}\n * @const\n * @tstype $protobuf.Type\n */  /**\n * Reflected service options.\n * @name ServiceOptions\n * @type {Type}\n * @const\n * @tstype $protobuf.Type\n */  /**\n * Reflected method options.\n * @name MethodOptions\n * @type {Type}\n * @const\n * @tstype $protobuf.Type\n */  /**\n * Reflected uninterpretet option.\n * @name UninterpretedOption\n * @type {Type}\n * @property {Type} NamePart\n * @const\n * @tstype $protobuf.Type & {\n *     NamePart: $protobuf.Type\n * }\n */  /**\n * Reflected source code info.\n * @name SourceCodeInfo\n * @type {Type}\n * @property {Type} Location\n * @const\n * @tstype $protobuf.Type & {\n *     Location: $protobuf.Type\n * }\n */  /**\n * Reflected generated code info.\n * @name GeneratedCodeInfo\n * @type {Type}\n * @property {Type} Annotation\n * @const\n * @tstype $protobuf.Type & {\n *     Annotation: $protobuf.Type\n * }\n */ \n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcHJvdG9idWZqcy9leHQvZGVzY3JpcHRvci9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLElBQUlBLFlBQVlDLG1CQUFPQSxDQUFDLHVEQUFPO0FBQy9CQyxPQUFPQyxPQUFPLEdBQUdBLFVBQVVILFVBQVVJLFVBQVUsR0FBR0osVUFBVUssSUFBSSxDQUFDQyxRQUFRLENBQUNMLG1CQUFPQSxDQUFDLDhHQUF1QyxHQUFHTSxNQUFNLENBQUM7QUFFbkksSUFBSUMsWUFBWVIsVUFBVVEsU0FBUyxFQUMvQkgsT0FBWUwsVUFBVUssSUFBSSxFQUMxQkksT0FBWVQsVUFBVVMsSUFBSSxFQUMxQkMsT0FBWVYsVUFBVVUsSUFBSSxFQUMxQkMsUUFBWVgsVUFBVVcsS0FBSyxFQUMzQkMsV0FBWVosVUFBVVksUUFBUSxFQUM5QkMsUUFBWWIsVUFBVWEsS0FBSyxFQUMzQkMsVUFBWWQsVUFBVWMsT0FBTyxFQUM3QkMsU0FBWWYsVUFBVWUsTUFBTTtBQUVoQyxlQUFlO0FBRWY7Ozs7Q0FJQyxHQUVEOzs7Ozs7Ozs7Ozs7Ozs7O0NBZ0JDLEdBRUQ7Ozs7Ozs7Ozs7Ozs7Ozs7Q0FnQkMsR0FFRDs7Ozs7Ozs7Ozs7Ozs7Ozs7Q0FpQkMsR0FFRDs7Ozs7OztDQU9DLEdBRUQ7Ozs7Q0FJQyxHQUNEVixLQUFLVyxjQUFjLEdBQUcsU0FBU0EsZUFBZVosVUFBVTtJQUVwRCwwREFBMEQ7SUFDMUQsSUFBSSxPQUFPQSxXQUFXYSxNQUFNLEtBQUssVUFDN0JiLGFBQWFELFFBQVFlLGlCQUFpQixDQUFDQyxNQUFNLENBQUNmO0lBRWxELElBQUlnQixPQUFPLElBQUlmO0lBRWYsSUFBSUQsV0FBV2lCLElBQUksRUFBRTtRQUNqQixJQUFJQyxnQkFDQUM7UUFDSixJQUFLLElBQUlDLElBQUksR0FBR0MsR0FBR0QsSUFBSXBCLFdBQVdpQixJQUFJLENBQUNKLE1BQU0sRUFBRSxFQUFFTyxFQUFHO1lBQ2hERCxjQUFjSDtZQUNkLElBQUksQ0FBQ0Us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Ozs7Ozs7Ozs7Q0FXQyxJQUVEOzs7Ozs7Ozs7OztDQVdDLElBRUQ7Ozs7OztDQU1DLElBRUQ7Ozs7OztDQU1DLElBRUQ7Ozs7OztDQU1DLElBRUQ7Ozs7OztDQU1DLElBRUQ7Ozs7OztDQU1DLElBRUQ7Ozs7Ozs7OztDQVNDLElBRUQ7Ozs7OztDQU1DLElBRUQ7Ozs7Ozs7Ozs7O0NBV0MsSUFFRDs7Ozs7O0NBTUMsSUFFRDs7Ozs7O0NBTUMsSUFFRDs7Ozs7O0NBTUMsSUFFRDs7Ozs7O0NBTUMsSUFFRDs7Ozs7O0NBTUMsSUFFRDs7Ozs7Ozs7O0NBU0MsSUFFRDs7Ozs7Ozs7O0NBU0MsSUFFRDs7Ozs7Ozs7O0NBU0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91bmljb3JuLWNsYXNzZXMvLi9ub2RlX21vZHVsZXMvcHJvdG9idWZqcy9leHQvZGVzY3JpcHRvci9pbmRleC5qcz83OGNlIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyICRwcm90b2J1ZiA9IHJlcXVpcmUoXCIuLi8uLlwiKTtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cyA9ICRwcm90b2J1Zi5kZXNjcmlwdG9yID0gJHByb3RvYnVmLlJvb3QuZnJvbUpTT04ocmVxdWlyZShcIi4uLy4uL2dvb2dsZS9wcm90b2J1Zi9kZXNjcmlwdG9yLmpzb25cIikpLmxvb2t1cChcIi5nb29nbGUucHJvdG9idWZcIik7XG5cbnZhciBOYW1lc3BhY2UgPSAkcHJvdG9idWYuTmFtZXNwYWNlLFxuICAgIFJvb3QgICAgICA9ICRwcm90b2J1Zi5Sb290LFxuICAgIEVudW0gICAgICA9ICRwcm90b2J1Zi5FbnVtLFxuICAgIFR5cGUgICAgICA9ICRwcm90b2J1Zi5UeXBlLFxuICAgIEZpZWxkICAgICA9ICRwcm90b2J1Zi5GaWVsZCxcbiAgICBNYXBGaWVsZCAgPSAkcHJvdG9idWYuTWFwRmllbGQsXG4gICAgT25lT2YgICAgID0gJHByb3RvYnVmLk9uZU9mLFxuICAgIFNlcnZpY2UgICA9ICRwcm90b2J1Zi5TZXJ2aWNlLFxuICAgIE1ldGhvZCAgICA9ICRwcm90b2J1Zi5NZXRob2Q7XG5cbi8vIC0tLSBSb290IC0tLVxuXG4vKipcbiAqIFByb3BlcnRpZXMgb2YgYSBGaWxlRGVzY3JpcHRvclNldCBtZXNzYWdlLlxuICogQGludGVyZmFjZSBJRmlsZURlc2NyaXB0b3JTZXRcbiAqIEBwcm9wZXJ0eSB7SUZpbGVEZXNjcmlwdG9yUHJvdG9bXX0gZmlsZSBGaWxlc1xuICovXG5cbi8qKlxuICogUHJvcGVydGllcyBvZiBhIEZpbGVEZXNjcmlwdG9yUHJvdG8gbWVzc2FnZS5cbiAqIEBpbnRlcmZhY2UgSUZpbGVEZXNjcmlwdG9yUHJvdG9cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbbmFtZV0gRmlsZSBuYW1lXG4gKiBAcHJvcGVydHkge3N0cmluZ30gW3BhY2thZ2VdIFBhY2thZ2VcbiAqIEBwcm9wZXJ0eSB7Kn0gW2RlcGVuZGVuY3ldIE5vdCBzdXBwb3J0ZWRcbiAqIEBwcm9wZXJ0eSB7Kn0gW3B1YmxpY0RlcGVuZGVuY3ldIE5vdCBzdXBwb3J0ZWRcbiAqIEBwcm9wZXJ0eSB7Kn0gW3dlYWtEZXBlbmRlbmN5XSBOb3Qgc3VwcG9ydGVkXG4gKiBAcHJvcGVydHkge0lEZXNjcmlwdG9yUHJvdG9bXX0gW21lc3NhZ2VUeXBlXSBOZXN0ZWQgbWVzc2FnZSB0eXBlc1xuICogQHByb3BlcnR5IHtJRW51bURlc2NyaXB0b3JQcm90b1tdfSBbZW51bVR5cGVdIE5lc3RlZCBlbnVtc1xuICogQHByb3BlcnR5IHtJU2VydmljZURlc2NyaXB0b3JQcm90b1tdfSBbc2VydmljZV0gTmVzdGVkIHNlcnZpY2VzXG4gKiBAcHJvcGVydHkge0lGaWVsZERlc2NyaXB0b3JQcm90b1tdfSBbZXh0ZW5zaW9uXSBOZXN0ZWQgZXh0ZW5zaW9uIGZpZWxkc1xuICogQHByb3BlcnR5IHtJRmlsZU9wdGlvbnN9IFtvcHRpb25zXSBPcHRpb25zXG4gKiBAcHJvcGVydHkgeyp9IFtzb3VyY2VDb2RlSW5mb10gTm90IHN1cHBvcnRlZFxuICogQHByb3BlcnR5IHtzdHJpbmd9IFtzeW50YXg9XCJwcm90bzJcIl0gU3ludGF4XG4gKiBAcHJvcGVydHkge0lFZGl0aW9ufSBbZWRpdGlvbl0gRWRpdGlvblxuICovXG5cbi8qKlxuICogVmFsdWVzIG9mIHRoZSBFZGl0aW9uIGVudW0uXG4gKiBAdHlwZWRlZiBJRWRpdGlvblxuICogQHR5cGUge251bWJlcn1cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBFRElUSU9OX1VOS05PV049MFxuICogQHByb3BlcnR5IHtudW1iZXJ9IEVESVRJT05fTEVHQUNZPTkwMFxuICogQHByb3BlcnR5IHtudW1iZXJ9IEVESVRJT05fUFJPVE8yPTk5OFxuICogQHByb3BlcnR5IHtudW1iZXJ9IEVESVRJT05fUFJPVE8zPTk5OVxuICogQHByb3BlcnR5IHtudW1iZXJ9IEVESVRJT05fMjAyMz0xMDAwXG4gKiBAcHJvcGVydHkge251bWJlcn0gRURJVElPTl8yMDI0PTEwMDFcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBFRElUSU9OXzFfVEVTVF9PTkxZPTFcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBFRElUSU9OXzJfVEVTVF9PTkxZPTJcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBFRElUSU9OXzk5OTk3X1RFU1RfT05MWT05OTk5N1xuICogQHByb3BlcnR5IHtudW1iZXJ9IEVESVRJT05fOTk5OThfVEVTVF9PTkxZPTk5OTk4XG4gKiBAcHJvcGVydHkge251bWJlcn0gRURJVElPTl85OTk5OF9URVNUX09OTFk9OTk5OTlcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBFRElUSU9OX01BWD0yMTQ3NDgzNjQ3XG4gKi9cblxuLyoqXG4gKiBQcm9wZXJ0aWVzIG9mIGEgRmlsZU9wdGlvbnMgbWVzc2FnZS5cbiAqIEBpbnRlcmZhY2UgSUZpbGVPcHRpb25zXG4gKiBAcHJvcGVydHkge3N0cmluZ30gW2phdmFQYWNrYWdlXVxuICogQHByb3BlcnR5IHtzdHJpbmd9IFtqYXZhT3V0ZXJDbGFzc25hbWVdXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IFtqYXZhTXVsdGlwbGVGaWxlc11cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW2phdmFHZW5lcmF0ZUVxdWFsc0FuZEhhc2hdXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IFtqYXZhU3RyaW5nQ2hlY2tVdGY4XVxuICogQHByb3BlcnR5IHtJRmlsZU9wdGlvbnNPcHRpbWl6ZU1vZGV9IFtvcHRpbWl6ZUZvcj0xXVxuICogQHByb3BlcnR5IHtzdHJpbmd9IFtnb1BhY2thZ2VdXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IFtjY0dlbmVyaWNTZXJ2aWNlc11cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW2phdmFHZW5lcmljU2VydmljZXNdXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IFtweUdlbmVyaWNTZXJ2aWNlc11cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW2RlcHJlY2F0ZWRdXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IFtjY0VuYWJsZUFyZW5hc11cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbb2JqY0NsYXNzUHJlZml4XVxuICogQHByb3BlcnR5IHtzdHJpbmd9IFtjc2hhcnBOYW1lc3BhY2VdXG4gKi9cblxuLyoqXG4gKiBWYWx1ZXMgb2YgaGUgRmlsZU9wdGlvbnMuT3B0aW1pemVNb2RlIGVudW0uXG4gKiBAdHlwZWRlZiBJRmlsZU9wdGlvbnNPcHRpbWl6ZU1vZGVcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAcHJvcGVydHkge251bWJlcn0gU1BFRUQ9MVxuICogQHByb3BlcnR5IHtudW1iZXJ9IENPREVfU0laRT0yXG4gKiBAcHJvcGVydHkge251bWJlcn0gTElURV9SVU5USU1FPTNcbiAqL1xuXG4vKipcbiAqIENyZWF0ZXMgYSByb290IGZyb20gYSBkZXNjcmlwdG9yIHNldC5cbiAqIEBwYXJhbSB7SUZpbGVEZXNjcmlwdG9yU2V0fFJlYWRlcnxVaW50OEFycmF5fSBkZXNjcmlwdG9yIERlc2NyaXB0b3JcbiAqIEByZXR1cm5zIHtSb290fSBSb290IGluc3RhbmNlXG4gKi9cblJvb3QuZnJvbURlc2NyaXB0b3IgPSBmdW5jdGlvbiBmcm9tRGVzY3JpcHRvcihkZXNjcmlwdG9yKSB7XG5cbiAgICAvLyBEZWNvZGUgdGhlIGRlc2NyaXB0b3IgbWVzc2FnZSBpZiBzcGVjaWZpZWQgYXMgYSBidWZmZXI6XG4gICAgaWYgKHR5cGVvZiBkZXNjcmlwdG9yLmxlbmd0aCA9PT0gXCJudW1iZXJcIilcbiAgICAgICAgZGVzY3JpcHRvciA9IGV4cG9ydHMuRmlsZURlc2NyaXB0b3JTZXQuZGVjb2RlKGRlc2NyaXB0b3IpO1xuXG4gICAgdmFyIHJvb3QgPSBuZXcgUm9vdCgpO1xuXG4gICAgaWYgKGRlc2NyaXB0b3IuZmlsZSkge1xuICAgICAgICB2YXIgZmlsZURlc2NyaXB0b3IsXG4gICAgICAgICAgICBmaWxlUGFja2FnZTtcbiAgICAgICAgZm9yICh2YXIgaiA9IDAsIGk7IGogPCBkZXNjcmlwdG9yLmZpbGUubGVuZ3RoOyArK2opIHtcbiAgICAgICAgICAgIGZpbGVQYWNrYWdlID0gcm9vdDtcbiAgICAgICAgICAgIGlmICgoZmlsZURlc2NyaXB0b3IgPSBkZXNjcmlwdG9yLmZpbGVbal0pW1wicGFja2FnZVwiXSAmJiBmaWxlRGVzY3JpcHRvcltcInBhY2thZ2VcIl0ubGVuZ3RoKVxuICAgICAgICAgICAgICAgIGZpbGVQYWNrYWdlID0gcm9vdC5kZWZpbmUoZmlsZURlc2NyaXB0b3JbXCJwYWNrYWdlXCJdKTtcbiAgICAgICAgICAgIHZhciBlZGl0aW9uID0gZWRpdGlvbkZyb21EZXNjcmlwdG9yKGZpbGVEZXNjcmlwdG9yKTtcbiAgICAgICAgICAgIGlmIChmaWxlRGVzY3JpcHRvci5uYW1lICYmIGZpbGVEZXNjcmlwdG9yLm5hbWUubGVuZ3RoKVxuICAgICAgICAgICAgICAgIHJvb3QuZmlsZXMucHVzaChmaWxlUGFja2FnZS5maWxlbmFtZSA9IGZpbGVEZXNjcmlwdG9yLm5hbWUpO1xuICAgICAgICAgICAgaWYgKGZpbGVEZXNjcmlwdG9yLm1lc3NhZ2VUeXBlKVxuICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBmaWxlRGVzY3JpcHRvci5tZXNzYWdlVHlwZS5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgICAgICAgICAgZmlsZVBhY2thZ2UuYWRkKFR5cGUuZnJvbURlc2NyaXB0b3IoZmlsZURlc2NyaXB0b3IubWVzc2FnZVR5cGVbaV0sIGVkaXRpb24pKTtcbiAgICAgICAgICAgIGlmIChmaWxlRGVzY3JpcHRvci5lbnVtVHlwZSlcbiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgZmlsZURlc2NyaXB0b3IuZW51bVR5cGUubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICAgICAgICAgIGZpbGVQYWNrYWdlLmFkZChFbnVtLmZyb21EZXNjcmlwdG9yKGZpbGVEZXNjcmlwdG9yLmVudW1UeXBlW2ldLCBlZGl0aW9uKSk7XG4gICAgICAgICAgICBpZiAoZmlsZURlc2NyaXB0b3IuZXh0ZW5zaW9uKVxuICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBmaWxlRGVzY3JpcHRvci5leHRlbnNpb24ubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICAgICAgICAgIGZpbGVQYWNrYWdlLmFkZChGaWVsZC5mcm9tRGVzY3JpcHRvcihmaWxlRGVzY3JpcHRvci5leHRlbnNpb25baV0sIGVkaXRpb24pKTtcbiAgICAgICAgICAgIGlmIChmaWxlRGVzY3JpcHRvci5zZXJ2aWNlKVxuICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBmaWxlRGVzY3JpcHRvci5zZXJ2aWNlLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgICAgICAgICBmaWxlUGFja2FnZS5hZGQoU2VydmljZS5mcm9tRGVzY3JpcHRvcihmaWxlRGVzY3JpcHRvci5zZXJ2aWNlW2ldLCBlZGl0aW9uKSk7XG4gICAgICAgICAgICB2YXIgb3B0cyA9IGZyb21EZXNjcmlwdG9yT3B0aW9ucyhmaWxlRGVzY3JpcHRvci5vcHRpb25zLCBleHBvcnRzLkZpbGVPcHRpb25zKTtcbiAgICAgICAgICAgIGlmIChvcHRzKSB7XG4gICAgICAgICAgICAgICAgdmFyIGtzID0gT2JqZWN0LmtleXMob3B0cyk7XG4gICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGtzLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgICAgICAgICBmaWxlUGFja2FnZS5zZXRPcHRpb24oa3NbaV0sIG9wdHNba3NbaV1dKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByb290LnJlc29sdmVBbGwoKTtcbn07XG5cbi8qKlxuICogQ29udmVydHMgYSByb290IHRvIGEgZGVzY3JpcHRvciBzZXQuXG4gKiBAcmV0dXJucyB7TWVzc2FnZTxJRmlsZURlc2NyaXB0b3JTZXQ+fSBEZXNjcmlwdG9yXG4gKiBAcGFyYW0ge3N0cmluZ30gW2VkaXRpb249XCJwcm90bzJcIl0gVGhlIHN5bnRheCBvciBlZGl0aW9uIHRvIHVzZVxuICovXG5Sb290LnByb3RvdHlwZS50b0Rlc2NyaXB0b3IgPSBmdW5jdGlvbiB0b0Rlc2NyaXB0b3IoZWRpdGlvbikge1xuICAgIHZhciBzZXQgPSBleHBvcnRzLkZpbGVEZXNjcmlwdG9yU2V0LmNyZWF0ZSgpO1xuICAgIFJvb3RfdG9EZXNjcmlwdG9yUmVjdXJzaXZlKHRoaXMsIHNldC5maWxlLCBlZGl0aW9uKTtcbiAgICByZXR1cm4gc2V0O1xufTtcblxuLy8gVHJhdmVyc2VzIGEgbmFtZXNwYWNlIGFuZCBhc3NlbWJsZXMgdGhlIGRlc2NyaXB0b3Igc2V0XG5mdW5jdGlvbiBSb290X3RvRGVzY3JpcHRvclJlY3Vyc2l2ZShucywgZmlsZXMsIGVkaXRpb24pIHtcblxuICAgIC8vIENyZWF0ZSBhIG5ldyBmaWxlXG4gICAgdmFyIGZpbGUgPSBleHBvcnRzLkZpbGVEZXNjcmlwdG9yUHJvdG8uY3JlYXRlKHsgbmFtZTogbnMuZmlsZW5hbWUgfHwgKG5zLmZ1bGxOYW1lLnN1YnN0cmluZygxKS5yZXBsYWNlKC9cXC4vZywgXCJfXCIpIHx8IFwicm9vdFwiKSArIFwiLnByb3RvXCIgfSk7XG4gICAgZWRpdGlvblRvRGVzY3JpcHRvcihlZGl0aW9uLCBmaWxlKTtcbiAgICBpZiAoIShucyBpbnN0YW5jZW9mIFJvb3QpKVxuICAgICAgICBmaWxlW1wicGFja2FnZVwiXSA9IG5zLmZ1bGxOYW1lLnN1YnN0cmluZygxKTtcblxuICAgIC8vIEFkZCBuZXN0ZWQgdHlwZXNcbiAgICBmb3IgKHZhciBpID0gMCwgbmVzdGVkOyBpIDwgbnMubmVzdGVkQXJyYXkubGVuZ3RoOyArK2kpXG4gICAgICAgIGlmICgobmVzdGVkID0gbnMuX25lc3RlZEFycmF5W2ldKSBpbnN0YW5jZW9mIFR5cGUpXG4gICAgICAgICAgICBmaWxlLm1lc3NhZ2VUeXBlLnB1c2gobmVzdGVkLnRvRGVzY3JpcHRvcihlZGl0aW9uKSk7XG4gICAgICAgIGVsc2UgaWYgKG5lc3RlZCBpbnN0YW5jZW9mIEVudW0pXG4gICAgICAgICAgICBmaWxlLmVudW1UeXBlLnB1c2gobmVzdGVkLnRvRGVzY3JpcHRvcigpKTtcbiAgICAgICAgZWxzZSBpZiAobmVzdGVkIGluc3RhbmNlb2YgRmllbGQpXG4gICAgICAgICAgICBmaWxlLmV4dGVuc2lvbi5wdXNoKG5lc3RlZC50b0Rlc2NyaXB0b3IoZWRpdGlvbikpO1xuICAgICAgICBlbHNlIGlmIChuZXN0ZWQgaW5zdGFuY2VvZiBTZXJ2aWNlKVxuICAgICAgICAgICAgZmlsZS5zZXJ2aWNlLnB1c2gobmVzdGVkLnRvRGVzY3JpcHRvcigpKTtcbiAgICAgICAgZWxzZSBpZiAobmVzdGVkIGluc3RhbmNlb2YgLyogcGxhaW4gKi8gTmFtZXNwYWNlKVxuICAgICAgICAgICAgUm9vdF90b0Rlc2NyaXB0b3JSZWN1cnNpdmUobmVzdGVkLCBmaWxlcywgZWRpdGlvbik7IC8vIHJlcXVpcmVzIG5ldyBmaWxlXG5cbiAgICAvLyBLZWVwIHBhY2thZ2UtbGV2ZWwgb3B0aW9uc1xuICAgIGZpbGUub3B0aW9ucyA9IHRvRGVzY3JpcHRvck9wdGlvbnMobnMub3B0aW9ucywgZXhwb3J0cy5GaWxlT3B0aW9ucyk7XG5cbiAgICAvLyBBbmQga2VlcCB0aGUgZmlsZSBvbmx5IGlmIHRoZXJlIGlzIGF0IGxlYXN0IG9uZSBuZXN0ZWQgb2JqZWN0XG4gICAgaWYgKGZpbGUubWVzc2FnZVR5cGUubGVuZ3RoICsgZmlsZS5lbnVtVHlwZS5sZW5ndGggKyBmaWxlLmV4dGVuc2lvbi5sZW5ndGggKyBmaWxlLnNlcnZpY2UubGVuZ3RoKVxuICAgICAgICBmaWxlcy5wdXNoKGZpbGUpO1xufVxuXG4vLyAtLS0gVHlwZSAtLS1cblxuLyoqXG4gKiBQcm9wZXJ0aWVzIG9mIGEgRGVzY3JpcHRvclByb3RvIG1lc3NhZ2UuXG4gKiBAaW50ZXJmYWNlIElEZXNjcmlwdG9yUHJvdG9cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbbmFtZV0gTWVzc2FnZSB0eXBlIG5hbWVcbiAqIEBwcm9wZXJ0eSB7SUZpZWxkRGVzY3JpcHRvclByb3RvW119IFtmaWVsZF0gRmllbGRzXG4gKiBAcHJvcGVydHkge0lGaWVsZERlc2NyaXB0b3JQcm90b1tdfSBbZXh0ZW5zaW9uXSBFeHRlbnNpb24gZmllbGRzXG4gKiBAcHJvcGVydHkge0lEZXNjcmlwdG9yUHJvdG9bXX0gW25lc3RlZFR5cGVdIE5lc3RlZCBtZXNzYWdlIHR5cGVzXG4gKiBAcHJvcGVydHkge0lFbnVtRGVzY3JpcHRvclByb3RvW119IFtlbnVtVHlwZV0gTmVzdGVkIGVudW1zXG4gKiBAcHJvcGVydHkge0lEZXNjcmlwdG9yUHJvdG9FeHRlbnNpb25SYW5nZVtdfSBbZXh0ZW5zaW9uUmFuZ2VdIEV4dGVuc2lvbiByYW5nZXNcbiAqIEBwcm9wZXJ0eSB7SU9uZW9mRGVzY3JpcHRvclByb3RvW119IFtvbmVvZkRlY2xdIE9uZW9mc1xuICogQHByb3BlcnR5IHtJTWVzc2FnZU9wdGlvbnN9IFtvcHRpb25zXSBOb3Qgc3VwcG9ydGVkXG4gKiBAcHJvcGVydHkge0lEZXNjcmlwdG9yUHJvdG9SZXNlcnZlZFJhbmdlW119IFtyZXNlcnZlZFJhbmdlXSBSZXNlcnZlZCByYW5nZXNcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nW119IFtyZXNlcnZlZE5hbWVdIFJlc2VydmVkIG5hbWVzXG4gKi9cblxuLyoqXG4gKiBQcm9wZXJ0aWVzIG9mIGEgTWVzc2FnZU9wdGlvbnMgbWVzc2FnZS5cbiAqIEBpbnRlcmZhY2UgSU1lc3NhZ2VPcHRpb25zXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IFttYXBFbnRyeT1mYWxzZV0gV2hldGhlciB0aGlzIG1lc3NhZ2UgaXMgYSBtYXAgZW50cnlcbiAqL1xuXG4vKipcbiAqIFByb3BlcnRpZXMgb2YgYW4gRXh0ZW5zaW9uUmFuZ2UgbWVzc2FnZS5cbiAqIEBpbnRlcmZhY2UgSURlc2NyaXB0b3JQcm90b0V4dGVuc2lvblJhbmdlXG4gKiBAcHJvcGVydHkge251bWJlcn0gW3N0YXJ0XSBTdGFydCBmaWVsZCBpZFxuICogQHByb3BlcnR5IHtudW1iZXJ9IFtlbmRdIEVuZCBmaWVsZCBpZFxuICovXG5cbi8qKlxuICogUHJvcGVydGllcyBvZiBhIFJlc2VydmVkUmFuZ2UgbWVzc2FnZS5cbiAqIEBpbnRlcmZhY2UgSURlc2NyaXB0b3JQcm90b1Jlc2VydmVkUmFuZ2VcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBbc3RhcnRdIFN0YXJ0IGZpZWxkIGlkXG4gKiBAcHJvcGVydHkge251bWJlcn0gW2VuZF0gRW5kIGZpZWxkIGlkXG4gKi9cblxudmFyIHVubmFtZWRNZXNzYWdlSW5kZXggPSAwO1xuXG4vKipcbiAqIENyZWF0ZXMgYSB0eXBlIGZyb20gYSBkZXNjcmlwdG9yLlxuICpcbiAqIFdhcm5pbmc6IHRoaXMgaXMgbm90IHNhZmUgdG8gdXNlIHdpdGggZWRpdGlvbnMgcHJvdG9zLCBzaW5jZSBpdCBkaXNjYXJkcyByZWxldmFudCBmaWxlIGNvbnRleHQuXG4gKlxuICogQHBhcmFtIHtJRGVzY3JpcHRvclByb3RvfFJlYWRlcnxVaW50OEFycmF5fSBkZXNjcmlwdG9yIERlc2NyaXB0b3JcbiAqIEBwYXJhbSB7c3RyaW5nfSBbZWRpdGlvbj1cInByb3RvMlwiXSBUaGUgc3ludGF4IG9yIGVkaXRpb24gdG8gdXNlXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtuZXN0ZWQ9ZmFsc2VdIFdoZXRoZXIgb3Igbm90IHRoaXMgaXMgYSBuZXN0ZWQgb2JqZWN0XG4gKiBAcmV0dXJucyB7VHlwZX0gVHlwZSBpbnN0YW5jZVxuICovXG5UeXBlLmZyb21EZXNjcmlwdG9yID0gZnVuY3Rpb24gZnJvbURlc2NyaXB0b3IoZGVzY3JpcHRvciwgZWRpdGlvbiwgbmVzdGVkKSB7XG4gICAgLy8gRGVjb2RlIHRoZSBkZXNjcmlwdG9yIG1lc3NhZ2UgaWYgc3BlY2lmaWVkIGFzIGEgYnVmZmVyOlxuICAgIGlmICh0eXBlb2YgZGVzY3JpcHRvci5sZW5ndGggPT09IFwibnVtYmVyXCIpXG4gICAgICAgIGRlc2NyaXB0b3IgPSBleHBvcnRzLkRlc2NyaXB0b3JQcm90by5kZWNvZGUoZGVzY3JpcHRvcik7XG5cbiAgICAvLyBDcmVhdGUgdGhlIG1lc3NhZ2UgdHlwZVxuICAgIHZhciB0eXBlID0gbmV3IFR5cGUoZGVzY3JpcHRvci5uYW1lLmxlbmd0aCA/IGRlc2NyaXB0b3IubmFtZSA6IFwiVHlwZVwiICsgdW5uYW1lZE1lc3NhZ2VJbmRleCsrLCBmcm9tRGVzY3JpcHRvck9wdGlvbnMoZGVzY3JpcHRvci5vcHRpb25zLCBleHBvcnRzLk1lc3NhZ2VPcHRpb25zKSksXG4gICAgICAgIGk7XG5cbiAgICBpZiAoIW5lc3RlZClcbiAgICAgICAgdHlwZS5fZWRpdGlvbiA9IGVkaXRpb247XG5cbiAgICAvKiBPbmVvZnMgKi8gaWYgKGRlc2NyaXB0b3Iub25lb2ZEZWNsKVxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgZGVzY3JpcHRvci5vbmVvZkRlY2wubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICB0eXBlLmFkZChPbmVPZi5mcm9tRGVzY3JpcHRvcihkZXNjcmlwdG9yLm9uZW9mRGVjbFtpXSkpO1xuICAgIC8qIEZpZWxkcyAqLyBpZiAoZGVzY3JpcHRvci5maWVsZClcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGRlc2NyaXB0b3IuZmllbGQubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIHZhciBmaWVsZCA9IEZpZWxkLmZyb21EZXNjcmlwdG9yKGRlc2NyaXB0b3IuZmllbGRbaV0sIGVkaXRpb24sIHRydWUpO1xuICAgICAgICAgICAgdHlwZS5hZGQoZmllbGQpO1xuICAgICAgICAgICAgaWYgKGRlc2NyaXB0b3IuZmllbGRbaV0uaGFzT3duUHJvcGVydHkoXCJvbmVvZkluZGV4XCIpKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXByb3RvdHlwZS1idWlsdGluc1xuICAgICAgICAgICAgICAgIHR5cGUub25lb2ZzQXJyYXlbZGVzY3JpcHRvci5maWVsZFtpXS5vbmVvZkluZGV4XS5hZGQoZmllbGQpO1xuICAgICAgICB9XG4gICAgLyogRXh0ZW5zaW9uIGZpZWxkcyAqLyBpZiAoZGVzY3JpcHRvci5leHRlbnNpb24pXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBkZXNjcmlwdG9yLmV4dGVuc2lvbi5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgIHR5cGUuYWRkKEZpZWxkLmZyb21EZXNjcmlwdG9yKGRlc2NyaXB0b3IuZXh0ZW5zaW9uW2ldLCBlZGl0aW9uLCB0cnVlKSk7XG4gICAgLyogTmVzdGVkIHR5cGVzICovIGlmIChkZXNjcmlwdG9yLm5lc3RlZFR5cGUpXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBkZXNjcmlwdG9yLm5lc3RlZFR5cGUubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIHR5cGUuYWRkKFR5cGUuZnJvbURlc2NyaXB0b3IoZGVzY3JpcHRvci5uZXN0ZWRUeXBlW2ldLCBlZGl0aW9uLCB0cnVlKSk7XG4gICAgICAgICAgICBpZiAoZGVzY3JpcHRvci5uZXN0ZWRUeXBlW2ldLm9wdGlvbnMgJiYgZGVzY3JpcHRvci5uZXN0ZWRUeXBlW2ldLm9wdGlvbnMubWFwRW50cnkpXG4gICAgICAgICAgICAgICAgdHlwZS5zZXRPcHRpb24oXCJtYXBfZW50cnlcIiwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAvKiBOZXN0ZWQgZW51bXMgKi8gaWYgKGRlc2NyaXB0b3IuZW51bVR5cGUpXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBkZXNjcmlwdG9yLmVudW1UeXBlLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgdHlwZS5hZGQoRW51bS5mcm9tRGVzY3JpcHRvcihkZXNjcmlwdG9yLmVudW1UeXBlW2ldLCBlZGl0aW9uLCB0cnVlKSk7XG4gICAgLyogRXh0ZW5zaW9uIHJhbmdlcyAqLyBpZiAoZGVzY3JpcHRvci5leHRlbnNpb25SYW5nZSAmJiBkZXNjcmlwdG9yLmV4dGVuc2lvblJhbmdlLmxlbmd0aCkge1xuICAgICAgICB0eXBlLmV4dGVuc2lvbnMgPSBbXTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGRlc2NyaXB0b3IuZXh0ZW5zaW9uUmFuZ2UubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICB0eXBlLmV4dGVuc2lvbnMucHVzaChbIGRlc2NyaXB0b3IuZXh0ZW5zaW9uUmFuZ2VbaV0uc3RhcnQsIGRlc2NyaXB0b3IuZXh0ZW5zaW9uUmFuZ2VbaV0uZW5kIF0pO1xuICAgIH1cbiAgICAvKiBSZXNlcnZlZC4uLiAqLyBpZiAoZGVzY3JpcHRvci5yZXNlcnZlZFJhbmdlICYmIGRlc2NyaXB0b3IucmVzZXJ2ZWRSYW5nZS5sZW5ndGggfHwgZGVzY3JpcHRvci5yZXNlcnZlZE5hbWUgJiYgZGVzY3JpcHRvci5yZXNlcnZlZE5hbWUubGVuZ3RoKSB7XG4gICAgICAgIHR5cGUucmVzZXJ2ZWQgPSBbXTtcbiAgICAgICAgLyogUmFuZ2VzICovIGlmIChkZXNjcmlwdG9yLnJlc2VydmVkUmFuZ2UpXG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgZGVzY3JpcHRvci5yZXNlcnZlZFJhbmdlLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgICAgIHR5cGUucmVzZXJ2ZWQucHVzaChbIGRlc2NyaXB0b3IucmVzZXJ2ZWRSYW5nZVtpXS5zdGFydCwgZGVzY3JpcHRvci5yZXNlcnZlZFJhbmdlW2ldLmVuZCBdKTtcbiAgICAgICAgLyogTmFtZXMgKi8gaWYgKGRlc2NyaXB0b3IucmVzZXJ2ZWROYW1lKVxuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGRlc2NyaXB0b3IucmVzZXJ2ZWROYW1lLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgICAgIHR5cGUucmVzZXJ2ZWQucHVzaChkZXNjcmlwdG9yLnJlc2VydmVkTmFtZVtpXSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHR5cGU7XG59O1xuXG4vKipcbiAqIENvbnZlcnRzIGEgdHlwZSB0byBhIGRlc2NyaXB0b3IuXG4gKiBAcmV0dXJucyB7TWVzc2FnZTxJRGVzY3JpcHRvclByb3RvPn0gRGVzY3JpcHRvclxuICogQHBhcmFtIHtzdHJpbmd9IFtlZGl0aW9uPVwicHJvdG8yXCJdIFRoZSBzeW50YXggb3IgZWRpdGlvbiB0byB1c2VcbiAqL1xuVHlwZS5wcm90b3R5cGUudG9EZXNjcmlwdG9yID0gZnVuY3Rpb24gdG9EZXNjcmlwdG9yKGVkaXRpb24pIHtcbiAgICB2YXIgZGVzY3JpcHRvciA9IGV4cG9ydHMuRGVzY3JpcHRvclByb3RvLmNyZWF0ZSh7IG5hbWU6IHRoaXMubmFtZSB9KSxcbiAgICAgICAgaTtcblxuICAgIC8qIEZpZWxkcyAqLyBmb3IgKGkgPSAwOyBpIDwgdGhpcy5maWVsZHNBcnJheS5sZW5ndGg7ICsraSkge1xuICAgICAgICB2YXIgZmllbGREZXNjcmlwdG9yO1xuICAgICAgICBkZXNjcmlwdG9yLmZpZWxkLnB1c2goZmllbGREZXNjcmlwdG9yID0gdGhpcy5fZmllbGRzQXJyYXlbaV0udG9EZXNjcmlwdG9yKGVkaXRpb24pKTtcbiAgICAgICAgaWYgKHRoaXMuX2ZpZWxkc0FycmF5W2ldIGluc3RhbmNlb2YgTWFwRmllbGQpIHsgLy8gbWFwIGZpZWxkcyBhcmUgcmVwZWF0ZWQgRmllbGROYW1lRW50cnlcbiAgICAgICAgICAgIHZhciBrZXlUeXBlID0gdG9EZXNjcmlwdG9yVHlwZSh0aGlzLl9maWVsZHNBcnJheVtpXS5rZXlUeXBlLCB0aGlzLl9maWVsZHNBcnJheVtpXS5yZXNvbHZlZEtleVR5cGUsIGZhbHNlKSxcbiAgICAgICAgICAgICAgICB2YWx1ZVR5cGUgPSB0b0Rlc2NyaXB0b3JUeXBlKHRoaXMuX2ZpZWxkc0FycmF5W2ldLnR5cGUsIHRoaXMuX2ZpZWxkc0FycmF5W2ldLnJlc29sdmVkVHlwZSwgZmFsc2UpLFxuICAgICAgICAgICAgICAgIHZhbHVlVHlwZU5hbWUgPSB2YWx1ZVR5cGUgPT09IC8qIHR5cGUgKi8gMTEgfHwgdmFsdWVUeXBlID09PSAvKiBlbnVtICovIDE0XG4gICAgICAgICAgICAgICAgICAgID8gdGhpcy5fZmllbGRzQXJyYXlbaV0ucmVzb2x2ZWRUeXBlICYmIHNob3J0bmFtZSh0aGlzLnBhcmVudCwgdGhpcy5fZmllbGRzQXJyYXlbaV0ucmVzb2x2ZWRUeXBlKSB8fCB0aGlzLl9maWVsZHNBcnJheVtpXS50eXBlXG4gICAgICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgZGVzY3JpcHRvci5uZXN0ZWRUeXBlLnB1c2goZXhwb3J0cy5EZXNjcmlwdG9yUHJvdG8uY3JlYXRlKHtcbiAgICAgICAgICAgICAgICBuYW1lOiBmaWVsZERlc2NyaXB0b3IudHlwZU5hbWUsXG4gICAgICAgICAgICAgICAgZmllbGQ6IFtcbiAgICAgICAgICAgICAgICAgICAgZXhwb3J0cy5GaWVsZERlc2NyaXB0b3JQcm90by5jcmVhdGUoeyBuYW1lOiBcImtleVwiLCBudW1iZXI6IDEsIGxhYmVsOiAxLCB0eXBlOiBrZXlUeXBlIH0pLCAvLyBjYW4ndCByZWZlcmVuY2UgYSB0eXBlIG9yIGVudW1cbiAgICAgICAgICAgICAgICAgICAgZXhwb3J0cy5GaWVsZERlc2NyaXB0b3JQcm90by5jcmVhdGUoeyBuYW1lOiBcInZhbHVlXCIsIG51bWJlcjogMiwgbGFiZWw6IDEsIHR5cGU6IHZhbHVlVHlwZSwgdHlwZU5hbWU6IHZhbHVlVHlwZU5hbWUgfSlcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIG9wdGlvbnM6IGV4cG9ydHMuTWVzc2FnZU9wdGlvbnMuY3JlYXRlKHsgbWFwRW50cnk6IHRydWUgfSlcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKiBPbmVvZnMgKi8gZm9yIChpID0gMDsgaSA8IHRoaXMub25lb2ZzQXJyYXkubGVuZ3RoOyArK2kpXG4gICAgICAgIGRlc2NyaXB0b3Iub25lb2ZEZWNsLnB1c2godGhpcy5fb25lb2ZzQXJyYXlbaV0udG9EZXNjcmlwdG9yKCkpO1xuICAgIC8qIE5lc3RlZC4uLiAqLyBmb3IgKGkgPSAwOyBpIDwgdGhpcy5uZXN0ZWRBcnJheS5sZW5ndGg7ICsraSkge1xuICAgICAgICAvKiBFeHRlbnNpb24gZmllbGRzICovIGlmICh0aGlzLl9uZXN0ZWRBcnJheVtpXSBpbnN0YW5jZW9mIEZpZWxkKVxuICAgICAgICAgICAgZGVzY3JpcHRvci5maWVsZC5wdXNoKHRoaXMuX25lc3RlZEFycmF5W2ldLnRvRGVzY3JpcHRvcihlZGl0aW9uKSk7XG4gICAgICAgIC8qIFR5cGVzICovIGVsc2UgaWYgKHRoaXMuX25lc3RlZEFycmF5W2ldIGluc3RhbmNlb2YgVHlwZSlcbiAgICAgICAgICAgIGRlc2NyaXB0b3IubmVzdGVkVHlwZS5wdXNoKHRoaXMuX25lc3RlZEFycmF5W2ldLnRvRGVzY3JpcHRvcihlZGl0aW9uKSk7XG4gICAgICAgIC8qIEVudW1zICovIGVsc2UgaWYgKHRoaXMuX25lc3RlZEFycmF5W2ldIGluc3RhbmNlb2YgRW51bSlcbiAgICAgICAgICAgIGRlc2NyaXB0b3IuZW51bVR5cGUucHVzaCh0aGlzLl9uZXN0ZWRBcnJheVtpXS50b0Rlc2NyaXB0b3IoKSk7XG4gICAgICAgIC8vIHBsYWluIG5lc3RlZCBuYW1lc3BhY2VzIGJlY29tZSBwYWNrYWdlcyBpbnN0ZWFkIGluIFJvb3QjdG9EZXNjcmlwdG9yXG4gICAgfVxuICAgIC8qIEV4dGVuc2lvbiByYW5nZXMgKi8gaWYgKHRoaXMuZXh0ZW5zaW9ucylcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHRoaXMuZXh0ZW5zaW9ucy5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgIGRlc2NyaXB0b3IuZXh0ZW5zaW9uUmFuZ2UucHVzaChleHBvcnRzLkRlc2NyaXB0b3JQcm90by5FeHRlbnNpb25SYW5nZS5jcmVhdGUoeyBzdGFydDogdGhpcy5leHRlbnNpb25zW2ldWzBdLCBlbmQ6IHRoaXMuZXh0ZW5zaW9uc1tpXVsxXSB9KSk7XG4gICAgLyogUmVzZXJ2ZWQuLi4gKi8gaWYgKHRoaXMucmVzZXJ2ZWQpXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLnJlc2VydmVkLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgLyogTmFtZXMgKi8gaWYgKHR5cGVvZiB0aGlzLnJlc2VydmVkW2ldID09PSBcInN0cmluZ1wiKVxuICAgICAgICAgICAgICAgIGRlc2NyaXB0b3IucmVzZXJ2ZWROYW1lLnB1c2godGhpcy5yZXNlcnZlZFtpXSk7XG4gICAgICAgICAgICAvKiBSYW5nZXMgKi8gZWxzZVxuICAgICAgICAgICAgICAgIGRlc2NyaXB0b3IucmVzZXJ2ZWRSYW5nZS5wdXNoKGV4cG9ydHMuRGVzY3JpcHRvclByb3RvLlJlc2VydmVkUmFuZ2UuY3JlYXRlKHsgc3RhcnQ6IHRoaXMucmVzZXJ2ZWRbaV1bMF0sIGVuZDogdGhpcy5yZXNlcnZlZFtpXVsxXSB9KSk7XG5cbiAgICBkZXNjcmlwdG9yLm9wdGlvbnMgPSB0b0Rlc2NyaXB0b3JPcHRpb25zKHRoaXMub3B0aW9ucywgZXhwb3J0cy5NZXNzYWdlT3B0aW9ucyk7XG5cbiAgICByZXR1cm4gZGVzY3JpcHRvcjtcbn07XG5cbi8vIC0tLSBGaWVsZCAtLS1cblxuLyoqXG4gKiBQcm9wZXJ0aWVzIG9mIGEgRmllbGREZXNjcmlwdG9yUHJvdG8gbWVzc2FnZS5cbiAqIEBpbnRlcmZhY2UgSUZpZWxkRGVzY3JpcHRvclByb3RvXG4gKiBAcHJvcGVydHkge3N0cmluZ30gW25hbWVdIEZpZWxkIG5hbWVcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBbbnVtYmVyXSBGaWVsZCBpZFxuICogQHByb3BlcnR5IHtJRmllbGREZXNjcmlwdG9yUHJvdG9MYWJlbH0gW2xhYmVsXSBGaWVsZCBydWxlXG4gKiBAcHJvcGVydHkge0lGaWVsZERlc2NyaXB0b3JQcm90b1R5cGV9IFt0eXBlXSBGaWVsZCBiYXNpYyB0eXBlXG4gKiBAcHJvcGVydHkge3N0cmluZ30gW3R5cGVOYW1lXSBGaWVsZCB0eXBlIG5hbWVcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbZXh0ZW5kZWVdIEV4dGVuZGVkIHR5cGUgbmFtZVxuICogQHByb3BlcnR5IHtzdHJpbmd9IFtkZWZhdWx0VmFsdWVdIExpdGVyYWwgZGVmYXVsdCB2YWx1ZVxuICogQHByb3BlcnR5IHtudW1iZXJ9IFtvbmVvZkluZGV4XSBPbmVvZiBpbmRleCBpZiBwYXJ0IG9mIGEgb25lb2ZcbiAqIEBwcm9wZXJ0eSB7Kn0gW2pzb25OYW1lXSBOb3Qgc3VwcG9ydGVkXG4gKiBAcHJvcGVydHkge0lGaWVsZE9wdGlvbnN9IFtvcHRpb25zXSBGaWVsZCBvcHRpb25zXG4gKi9cblxuLyoqXG4gKiBWYWx1ZXMgb2YgdGhlIEZpZWxkRGVzY3JpcHRvclByb3RvLkxhYmVsIGVudW0uXG4gKiBAdHlwZWRlZiBJRmllbGREZXNjcmlwdG9yUHJvdG9MYWJlbFxuICogQHR5cGUge251bWJlcn1cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBMQUJFTF9PUFRJT05BTD0xXG4gKiBAcHJvcGVydHkge251bWJlcn0gTEFCRUxfUkVRVUlSRUQ9MlxuICogQHByb3BlcnR5IHtudW1iZXJ9IExBQkVMX1JFUEVBVEVEPTNcbiAqL1xuXG4vKipcbiAqIFZhbHVlcyBvZiB0aGUgRmllbGREZXNjcmlwdG9yUHJvdG8uVHlwZSBlbnVtLlxuICogQHR5cGVkZWYgSUZpZWxkRGVzY3JpcHRvclByb3RvVHlwZVxuICogQHR5cGUge251bWJlcn1cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBUWVBFX0RPVUJMRT0xXG4gKiBAcHJvcGVydHkge251bWJlcn0gVFlQRV9GTE9BVD0yXG4gKiBAcHJvcGVydHkge251bWJlcn0gVFlQRV9JTlQ2ND0zXG4gKiBAcHJvcGVydHkge251bWJlcn0gVFlQRV9VSU5UNjQ9NFxuICogQHByb3BlcnR5IHtudW1iZXJ9IFRZUEVfSU5UMzI9NVxuICogQHByb3BlcnR5IHtudW1iZXJ9IFRZUEVfRklYRUQ2ND02XG4gKiBAcHJvcGVydHkge251bWJlcn0gVFlQRV9GSVhFRDMyPTdcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBUWVBFX0JPT0w9OFxuICogQHByb3BlcnR5IHtudW1iZXJ9IFRZUEVfU1RSSU5HPTlcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBUWVBFX0dST1VQPTEwXG4gKiBAcHJvcGVydHkge251bWJlcn0gVFlQRV9NRVNTQUdFPTExXG4gKiBAcHJvcGVydHkge251bWJlcn0gVFlQRV9CWVRFUz0xMlxuICogQHByb3BlcnR5IHtudW1iZXJ9IFRZUEVfVUlOVDMyPTEzXG4gKiBAcHJvcGVydHkge251bWJlcn0gVFlQRV9FTlVNPTE0XG4gKiBAcHJvcGVydHkge251bWJlcn0gVFlQRV9TRklYRUQzMj0xNVxuICogQHByb3BlcnR5IHtudW1iZXJ9IFRZUEVfU0ZJWEVENjQ9MTZcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBUWVBFX1NJTlQzMj0xN1xuICogQHByb3BlcnR5IHtudW1iZXJ9IFRZUEVfU0lOVDY0PTE4XG4gKi9cblxuLyoqXG4gKiBQcm9wZXJ0aWVzIG9mIGEgRmllbGRPcHRpb25zIG1lc3NhZ2UuXG4gKiBAaW50ZXJmYWNlIElGaWVsZE9wdGlvbnNcbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW3BhY2tlZF0gV2hldGhlciBwYWNrZWQgb3Igbm90IChkZWZhdWx0cyB0byBgZmFsc2VgIGZvciBwcm90bzIgYW5kIGB0cnVlYCBmb3IgcHJvdG8zKVxuICogQHByb3BlcnR5IHtJRmllbGRPcHRpb25zSlNUeXBlfSBbanN0eXBlXSBKYXZhU2NyaXB0IHZhbHVlIHR5cGUgKG5vdCB1c2VkIGJ5IHByb3RvYnVmLmpzKVxuICovXG5cbi8qKlxuICogVmFsdWVzIG9mIHRoZSBGaWVsZE9wdGlvbnMuSlNUeXBlIGVudW0uXG4gKiBAdHlwZWRlZiBJRmllbGRPcHRpb25zSlNUeXBlXG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQHByb3BlcnR5IHtudW1iZXJ9IEpTX05PUk1BTD0wXG4gKiBAcHJvcGVydHkge251bWJlcn0gSlNfU1RSSU5HPTFcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBKU19OVU1CRVI9MlxuICovXG5cbi8vIGNvcGllZCBoZXJlIGZyb20gcGFyc2UuanNcbnZhciBudW1iZXJSZSA9IC9eKD8hW2VFXSlbMC05XSooPzpcXC5bMC05XSopPyg/OltlRV1bKy1dP1swLTldKyk/JC87XG5cbi8qKlxuICogQ3JlYXRlcyBhIGZpZWxkIGZyb20gYSBkZXNjcmlwdG9yLlxuICpcbiAqIFdhcm5pbmc6IHRoaXMgaXMgbm90IHNhZmUgdG8gdXNlIHdpdGggZWRpdGlvbnMgcHJvdG9zLCBzaW5jZSBpdCBkaXNjYXJkcyByZWxldmFudCBmaWxlIGNvbnRleHQuXG4gKlxuICogQHBhcmFtIHtJRmllbGREZXNjcmlwdG9yUHJvdG98UmVhZGVyfFVpbnQ4QXJyYXl9IGRlc2NyaXB0b3IgRGVzY3JpcHRvclxuICogQHBhcmFtIHtzdHJpbmd9IFtlZGl0aW9uPVwicHJvdG8yXCJdIFRoZSBzeW50YXggb3IgZWRpdGlvbiB0byB1c2VcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW25lc3RlZD1mYWxzZV0gV2hldGhlciBvciBub3QgdGhpcyBpcyBhIHRvcC1sZXZlbCBvYmplY3RcbiAqIEByZXR1cm5zIHtGaWVsZH0gRmllbGQgaW5zdGFuY2VcbiAqL1xuRmllbGQuZnJvbURlc2NyaXB0b3IgPSBmdW5jdGlvbiBmcm9tRGVzY3JpcHRvcihkZXNjcmlwdG9yLCBlZGl0aW9uLCBuZXN0ZWQpIHtcblxuICAgIC8vIERlY29kZSB0aGUgZGVzY3JpcHRvciBtZXNzYWdlIGlmIHNwZWNpZmllZCBhcyBhIGJ1ZmZlcjpcbiAgICBpZiAodHlwZW9mIGRlc2NyaXB0b3IubGVuZ3RoID09PSBcIm51bWJlclwiKVxuICAgICAgICBkZXNjcmlwdG9yID0gZXhwb3J0cy5EZXNjcmlwdG9yUHJvdG8uZGVjb2RlKGRlc2NyaXB0b3IpO1xuXG4gICAgaWYgKHR5cGVvZiBkZXNjcmlwdG9yLm51bWJlciAhPT0gXCJudW1iZXJcIilcbiAgICAgICAgdGhyb3cgRXJyb3IoXCJtaXNzaW5nIGZpZWxkIGlkXCIpO1xuXG4gICAgLy8gUmV3aXJlIGZpZWxkIHR5cGVcbiAgICB2YXIgZmllbGRUeXBlO1xuICAgIGlmIChkZXNjcmlwdG9yLnR5cGVOYW1lICYmIGRlc2NyaXB0b3IudHlwZU5hbWUubGVuZ3RoKVxuICAgICAgICBmaWVsZFR5cGUgPSBkZXNjcmlwdG9yLnR5cGVOYW1lO1xuICAgIGVsc2VcbiAgICAgICAgZmllbGRUeXBlID0gZnJvbURlc2NyaXB0b3JUeXBlKGRlc2NyaXB0b3IudHlwZSk7XG5cbiAgICAvLyBSZXdpcmUgZmllbGQgcnVsZVxuICAgIHZhciBmaWVsZFJ1bGU7XG4gICAgc3dpdGNoIChkZXNjcmlwdG9yLmxhYmVsKSB7XG4gICAgICAgIC8vIDAgaXMgcmVzZXJ2ZWQgZm9yIGVycm9yc1xuICAgICAgICBjYXNlIDE6IGZpZWxkUnVsZSA9IHVuZGVmaW5lZDsgYnJlYWs7XG4gICAgICAgIGNhc2UgMjogZmllbGRSdWxlID0gXCJyZXF1aXJlZFwiOyBicmVhaztcbiAgICAgICAgY2FzZSAzOiBmaWVsZFJ1bGUgPSBcInJlcGVhdGVkXCI7IGJyZWFrO1xuICAgICAgICBkZWZhdWx0OiB0aHJvdyBFcnJvcihcImlsbGVnYWwgbGFiZWw6IFwiICsgZGVzY3JpcHRvci5sYWJlbCk7XG4gICAgfVxuXG5cdHZhciBleHRlbmRlZSA9IGRlc2NyaXB0b3IuZXh0ZW5kZWU7XG5cdGlmIChkZXNjcmlwdG9yLmV4dGVuZGVlICE9PSB1bmRlZmluZWQpIHtcblx0XHRleHRlbmRlZSA9IGV4dGVuZGVlLmxlbmd0aCA/IGV4dGVuZGVlIDogdW5kZWZpbmVkO1xuXHR9XG4gICAgdmFyIGZpZWxkID0gbmV3IEZpZWxkKFxuICAgICAgICBkZXNjcmlwdG9yLm5hbWUubGVuZ3RoID8gZGVzY3JpcHRvci5uYW1lIDogXCJmaWVsZFwiICsgZGVzY3JpcHRvci5udW1iZXIsXG4gICAgICAgIGRlc2NyaXB0b3IubnVtYmVyLFxuICAgICAgICBmaWVsZFR5cGUsXG4gICAgICAgIGZpZWxkUnVsZSxcbiAgICAgICAgZXh0ZW5kZWVcbiAgICApO1xuXG4gICAgaWYgKCFuZXN0ZWQpXG4gICAgICAgIGZpZWxkLl9lZGl0aW9uID0gZWRpdGlvbjtcblxuICAgIGZpZWxkLm9wdGlvbnMgPSBmcm9tRGVzY3JpcHRvck9wdGlvbnMoZGVzY3JpcHRvci5vcHRpb25zLCBleHBvcnRzLkZpZWxkT3B0aW9ucyk7XG4gICAgaWYgKGRlc2NyaXB0b3IucHJvdG8zX29wdGlvbmFsKVxuICAgICAgICBmaWVsZC5vcHRpb25zLnByb3RvM19vcHRpb25hbCA9IHRydWU7XG5cbiAgICBpZiAoZGVzY3JpcHRvci5kZWZhdWx0VmFsdWUgJiYgZGVzY3JpcHRvci5kZWZhdWx0VmFsdWUubGVuZ3RoKSB7XG4gICAgICAgIHZhciBkZWZhdWx0VmFsdWUgPSBkZXNjcmlwdG9yLmRlZmF1bHRWYWx1ZTtcbiAgICAgICAgc3dpdGNoIChkZWZhdWx0VmFsdWUpIHtcbiAgICAgICAgICAgIGNhc2UgXCJ0cnVlXCI6IGNhc2UgXCJUUlVFXCI6XG4gICAgICAgICAgICAgICAgZGVmYXVsdFZhbHVlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJmYWxzZVwiOiBjYXNlIFwiRkFMU0VcIjpcbiAgICAgICAgICAgICAgICBkZWZhdWx0VmFsdWUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdmFyIG1hdGNoID0gbnVtYmVyUmUuZXhlYyhkZWZhdWx0VmFsdWUpO1xuICAgICAgICAgICAgICAgIGlmIChtYXRjaClcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdFZhbHVlID0gcGFyc2VJbnQoZGVmYXVsdFZhbHVlKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSByYWRpeFxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGZpZWxkLnNldE9wdGlvbihcImRlZmF1bHRcIiwgZGVmYXVsdFZhbHVlKTtcbiAgICB9XG5cbiAgICBpZiAocGFja2FibGVEZXNjcmlwdG9yVHlwZShkZXNjcmlwdG9yLnR5cGUpKSB7XG4gICAgICAgIGlmIChlZGl0aW9uID09PSBcInByb3RvM1wiKSB7IC8vIGRlZmF1bHRzIHRvIHBhY2tlZD10cnVlIChpbnRlcm5hbCBwcmVzZXQgaXMgcGFja2VkPXRydWUpXG4gICAgICAgICAgICBpZiAoZGVzY3JpcHRvci5vcHRpb25zICYmICFkZXNjcmlwdG9yLm9wdGlvbnMucGFja2VkKVxuICAgICAgICAgICAgICAgIGZpZWxkLnNldE9wdGlvbihcInBhY2tlZFwiLCBmYWxzZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoKCFlZGl0aW9uIHx8IGVkaXRpb24gPT09IFwicHJvdG8yXCIpICYmIGRlc2NyaXB0b3Iub3B0aW9ucyAmJiBkZXNjcmlwdG9yLm9wdGlvbnMucGFja2VkKSAvLyBkZWZhdWx0cyB0byBwYWNrZWQ9ZmFsc2VcbiAgICAgICAgICAgIGZpZWxkLnNldE9wdGlvbihcInBhY2tlZFwiLCB0cnVlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmllbGQ7XG59O1xuXG4vKipcbiAqIENvbnZlcnRzIGEgZmllbGQgdG8gYSBkZXNjcmlwdG9yLlxuICogQHJldHVybnMge01lc3NhZ2U8SUZpZWxkRGVzY3JpcHRvclByb3RvPn0gRGVzY3JpcHRvclxuICogQHBhcmFtIHtzdHJpbmd9IFtlZGl0aW9uPVwicHJvdG8yXCJdIFRoZSBzeW50YXggb3IgZWRpdGlvbiB0byB1c2VcbiAqL1xuRmllbGQucHJvdG90eXBlLnRvRGVzY3JpcHRvciA9IGZ1bmN0aW9uIHRvRGVzY3JpcHRvcihlZGl0aW9uKSB7XG4gICAgdmFyIGRlc2NyaXB0b3IgPSBleHBvcnRzLkZpZWxkRGVzY3JpcHRvclByb3RvLmNyZWF0ZSh7IG5hbWU6IHRoaXMubmFtZSwgbnVtYmVyOiB0aGlzLmlkIH0pO1xuXG4gICAgaWYgKHRoaXMubWFwKSB7XG5cbiAgICAgICAgZGVzY3JpcHRvci50eXBlID0gMTE7IC8vIG1lc3NhZ2VcbiAgICAgICAgZGVzY3JpcHRvci50eXBlTmFtZSA9ICRwcm90b2J1Zi51dGlsLnVjRmlyc3QodGhpcy5uYW1lKTsgLy8gZmllbGROYW1lIC0+IEZpZWxkTmFtZUVudHJ5IChidWlsdCBpbiBUeXBlI3RvRGVzY3JpcHRvcilcbiAgICAgICAgZGVzY3JpcHRvci5sYWJlbCA9IDM7IC8vIHJlcGVhdGVkXG5cbiAgICB9IGVsc2Uge1xuXG4gICAgICAgIC8vIFJld2lyZSBmaWVsZCB0eXBlXG4gICAgICAgIHN3aXRjaCAoZGVzY3JpcHRvci50eXBlID0gdG9EZXNjcmlwdG9yVHlwZSh0aGlzLnR5cGUsIHRoaXMucmVzb2x2ZSgpLnJlc29sdmVkVHlwZSwgdGhpcy5kZWxpbWl0ZWQpKSB7XG4gICAgICAgICAgICBjYXNlIDEwOiAvLyBncm91cFxuICAgICAgICAgICAgY2FzZSAxMTogLy8gdHlwZVxuICAgICAgICAgICAgY2FzZSAxNDogLy8gZW51bVxuICAgICAgICAgICAgICAgIGRlc2NyaXB0b3IudHlwZU5hbWUgPSB0aGlzLnJlc29sdmVkVHlwZSA/IHNob3J0bmFtZSh0aGlzLnBhcmVudCwgdGhpcy5yZXNvbHZlZFR5cGUpIDogdGhpcy50eXBlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gUmV3aXJlIGZpZWxkIHJ1bGVcbiAgICAgICAgaWYgKHRoaXMucnVsZSA9PT0gXCJyZXBlYXRlZFwiKSB7XG4gICAgICAgICAgICBkZXNjcmlwdG9yLmxhYmVsID0gMztcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnJlcXVpcmVkICYmIGVkaXRpb24gPT09IFwicHJvdG8yXCIpIHtcbiAgICAgICAgICAgIGRlc2NyaXB0b3IubGFiZWwgPSAyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZGVzY3JpcHRvci5sYWJlbCA9IDE7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgZXh0ZW5zaW9uIGZpZWxkXG4gICAgZGVzY3JpcHRvci5leHRlbmRlZSA9IHRoaXMuZXh0ZW5zaW9uRmllbGQgPyB0aGlzLmV4dGVuc2lvbkZpZWxkLnBhcmVudC5mdWxsTmFtZSA6IHRoaXMuZXh0ZW5kO1xuXG4gICAgLy8gSGFuZGxlIHBhcnQgb2Ygb25lb2ZcbiAgICBpZiAodGhpcy5wYXJ0T2YpXG4gICAgICAgIGlmICgoZGVzY3JpcHRvci5vbmVvZkluZGV4ID0gdGhpcy5wYXJlbnQub25lb2ZzQXJyYXkuaW5kZXhPZih0aGlzLnBhcnRPZikpIDwgMClcbiAgICAgICAgICAgIHRocm93IEVycm9yKFwibWlzc2luZyBvbmVvZlwiKTtcblxuICAgIGlmICh0aGlzLm9wdGlvbnMpIHtcbiAgICAgICAgZGVzY3JpcHRvci5vcHRpb25zID0gdG9EZXNjcmlwdG9yT3B0aW9ucyh0aGlzLm9wdGlvbnMsIGV4cG9ydHMuRmllbGRPcHRpb25zKTtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9uc1tcImRlZmF1bHRcIl0gIT0gbnVsbClcbiAgICAgICAgICAgIGRlc2NyaXB0b3IuZGVmYXVsdFZhbHVlID0gU3RyaW5nKHRoaXMub3B0aW9uc1tcImRlZmF1bHRcIl0pO1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnByb3RvM19vcHRpb25hbClcbiAgICAgICAgICAgIGRlc2NyaXB0b3IucHJvdG8zX29wdGlvbmFsID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAoZWRpdGlvbiA9PT0gXCJwcm90bzNcIikgeyAvLyBkZWZhdWx0cyB0byBwYWNrZWQ9dHJ1ZVxuICAgICAgICBpZiAoIXRoaXMucGFja2VkKVxuICAgICAgICAgICAgKGRlc2NyaXB0b3Iub3B0aW9ucyB8fCAoZGVzY3JpcHRvci5vcHRpb25zID0gZXhwb3J0cy5GaWVsZE9wdGlvbnMuY3JlYXRlKCkpKS5wYWNrZWQgPSBmYWxzZTtcbiAgICB9IGVsc2UgaWYgKCghZWRpdGlvbiB8fCBlZGl0aW9uID09PSBcInByb3RvMlwiKSAmJiB0aGlzLnBhY2tlZCkgLy8gZGVmYXVsdHMgdG8gcGFja2VkPWZhbHNlXG4gICAgICAgIChkZXNjcmlwdG9yLm9wdGlvbnMgfHwgKGRlc2NyaXB0b3Iub3B0aW9ucyA9IGV4cG9ydHMuRmllbGRPcHRpb25zLmNyZWF0ZSgpKSkucGFja2VkID0gdHJ1ZTtcblxuICAgIHJldHVybiBkZXNjcmlwdG9yO1xufTtcblxuLy8gLS0tIEVudW0gLS0tXG5cbi8qKlxuICogUHJvcGVydGllcyBvZiBhbiBFbnVtRGVzY3JpcHRvclByb3RvIG1lc3NhZ2UuXG4gKiBAaW50ZXJmYWNlIElFbnVtRGVzY3JpcHRvclByb3RvXG4gKiBAcHJvcGVydHkge3N0cmluZ30gW25hbWVdIEVudW0gbmFtZVxuICogQHByb3BlcnR5IHtJRW51bVZhbHVlRGVzY3JpcHRvclByb3RvW119IFt2YWx1ZV0gRW51bSB2YWx1ZXNcbiAqIEBwcm9wZXJ0eSB7SUVudW1PcHRpb25zfSBbb3B0aW9uc10gRW51bSBvcHRpb25zXG4gKi9cblxuLyoqXG4gKiBQcm9wZXJ0aWVzIG9mIGFuIEVudW1WYWx1ZURlc2NyaXB0b3JQcm90byBtZXNzYWdlLlxuICogQGludGVyZmFjZSBJRW51bVZhbHVlRGVzY3JpcHRvclByb3RvXG4gKiBAcHJvcGVydHkge3N0cmluZ30gW25hbWVdIE5hbWVcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBbbnVtYmVyXSBWYWx1ZVxuICogQHByb3BlcnR5IHsqfSBbb3B0aW9uc10gTm90IHN1cHBvcnRlZFxuICovXG5cbi8qKlxuICogUHJvcGVydGllcyBvZiBhbiBFbnVtT3B0aW9ucyBtZXNzYWdlLlxuICogQGludGVyZmFjZSBJRW51bU9wdGlvbnNcbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW2FsbG93QWxpYXNdIFdoZXRoZXIgYWxpYXNlcyBhcmUgYWxsb3dlZFxuICogQHByb3BlcnR5IHtib29sZWFufSBbZGVwcmVjYXRlZF1cbiAqL1xuXG52YXIgdW5uYW1lZEVudW1JbmRleCA9IDA7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBlbnVtIGZyb20gYSBkZXNjcmlwdG9yLlxuICpcbiAqIFdhcm5pbmc6IHRoaXMgaXMgbm90IHNhZmUgdG8gdXNlIHdpdGggZWRpdGlvbnMgcHJvdG9zLCBzaW5jZSBpdCBkaXNjYXJkcyByZWxldmFudCBmaWxlIGNvbnRleHQuXG4gKlxuICogQHBhcmFtIHtJRW51bURlc2NyaXB0b3JQcm90b3xSZWFkZXJ8VWludDhBcnJheX0gZGVzY3JpcHRvciBEZXNjcmlwdG9yXG4gKiBAcGFyYW0ge3N0cmluZ30gW2VkaXRpb249XCJwcm90bzJcIl0gVGhlIHN5bnRheCBvciBlZGl0aW9uIHRvIHVzZVxuICogQHBhcmFtIHtib29sZWFufSBbbmVzdGVkPWZhbHNlXSBXaGV0aGVyIG9yIG5vdCB0aGlzIGlzIGEgdG9wLWxldmVsIG9iamVjdFxuICogQHJldHVybnMge0VudW19IEVudW0gaW5zdGFuY2VcbiAqL1xuRW51bS5mcm9tRGVzY3JpcHRvciA9IGZ1bmN0aW9uIGZyb21EZXNjcmlwdG9yKGRlc2NyaXB0b3IsIGVkaXRpb24sIG5lc3RlZCkge1xuXG4gICAgLy8gRGVjb2RlIHRoZSBkZXNjcmlwdG9yIG1lc3NhZ2UgaWYgc3BlY2lmaWVkIGFzIGEgYnVmZmVyOlxuICAgIGlmICh0eXBlb2YgZGVzY3JpcHRvci5sZW5ndGggPT09IFwibnVtYmVyXCIpXG4gICAgICAgIGRlc2NyaXB0b3IgPSBleHBvcnRzLkVudW1EZXNjcmlwdG9yUHJvdG8uZGVjb2RlKGRlc2NyaXB0b3IpO1xuXG4gICAgLy8gQ29uc3RydWN0IHZhbHVlcyBvYmplY3RcbiAgICB2YXIgdmFsdWVzID0ge307XG4gICAgaWYgKGRlc2NyaXB0b3IudmFsdWUpXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGVzY3JpcHRvci52YWx1ZS5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgdmFyIG5hbWUgID0gZGVzY3JpcHRvci52YWx1ZVtpXS5uYW1lLFxuICAgICAgICAgICAgICAgIHZhbHVlID0gZGVzY3JpcHRvci52YWx1ZVtpXS5udW1iZXIgfHwgMDtcbiAgICAgICAgICAgIHZhbHVlc1tuYW1lICYmIG5hbWUubGVuZ3RoID8gbmFtZSA6IFwiTkFNRVwiICsgdmFsdWVdID0gdmFsdWU7XG4gICAgICAgIH1cblxuICAgIHZhciBlbm0gPSBuZXcgRW51bShcbiAgICAgICAgZGVzY3JpcHRvci5uYW1lICYmIGRlc2NyaXB0b3IubmFtZS5sZW5ndGggPyBkZXNjcmlwdG9yLm5hbWUgOiBcIkVudW1cIiArIHVubmFtZWRFbnVtSW5kZXgrKyxcbiAgICAgICAgdmFsdWVzLFxuICAgICAgICBmcm9tRGVzY3JpcHRvck9wdGlvbnMoZGVzY3JpcHRvci5vcHRpb25zLCBleHBvcnRzLkVudW1PcHRpb25zKVxuICAgICk7XG5cbiAgICBpZiAoIW5lc3RlZClcbiAgICAgICAgZW5tLl9lZGl0aW9uID0gZWRpdGlvbjtcblxuICAgIHJldHVybiBlbm07XG59O1xuXG4vKipcbiAqIENvbnZlcnRzIGFuIGVudW0gdG8gYSBkZXNjcmlwdG9yLlxuICogQHJldHVybnMge01lc3NhZ2U8SUVudW1EZXNjcmlwdG9yUHJvdG8+fSBEZXNjcmlwdG9yXG4gKi9cbkVudW0ucHJvdG90eXBlLnRvRGVzY3JpcHRvciA9IGZ1bmN0aW9uIHRvRGVzY3JpcHRvcigpIHtcblxuICAgIC8vIFZhbHVlc1xuICAgIHZhciB2YWx1ZXMgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMCwga3MgPSBPYmplY3Qua2V5cyh0aGlzLnZhbHVlcyk7IGkgPCBrcy5sZW5ndGg7ICsraSlcbiAgICAgICAgdmFsdWVzLnB1c2goZXhwb3J0cy5FbnVtVmFsdWVEZXNjcmlwdG9yUHJvdG8uY3JlYXRlKHsgbmFtZToga3NbaV0sIG51bWJlcjogdGhpcy52YWx1ZXNba3NbaV1dIH0pKTtcblxuICAgIHJldHVybiBleHBvcnRzLkVudW1EZXNjcmlwdG9yUHJvdG8uY3JlYXRlKHtcbiAgICAgICAgbmFtZTogdGhpcy5uYW1lLFxuICAgICAgICB2YWx1ZTogdmFsdWVzLFxuICAgICAgICBvcHRpb25zOiB0b0Rlc2NyaXB0b3JPcHRpb25zKHRoaXMub3B0aW9ucywgZXhwb3J0cy5FbnVtT3B0aW9ucylcbiAgICB9KTtcbn07XG5cbi8vIC0tLSBPbmVPZiAtLS1cblxuLyoqXG4gKiBQcm9wZXJ0aWVzIG9mIGEgT25lb2ZEZXNjcmlwdG9yUHJvdG8gbWVzc2FnZS5cbiAqIEBpbnRlcmZhY2UgSU9uZW9mRGVzY3JpcHRvclByb3RvXG4gKiBAcHJvcGVydHkge3N0cmluZ30gW25hbWVdIE9uZW9mIG5hbWVcbiAqIEBwcm9wZXJ0eSB7Kn0gW29wdGlvbnNdIE5vdCBzdXBwb3J0ZWRcbiAqL1xuXG52YXIgdW5uYW1lZE9uZW9mSW5kZXggPSAwO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBvbmVvZiBmcm9tIGEgZGVzY3JpcHRvci5cbiAqXG4gKiBXYXJuaW5nOiB0aGlzIGlzIG5vdCBzYWZlIHRvIHVzZSB3aXRoIGVkaXRpb25zIHByb3Rvcywgc2luY2UgaXQgZGlzY2FyZHMgcmVsZXZhbnQgZmlsZSBjb250ZXh0LlxuICpcbiAqIEBwYXJhbSB7SU9uZW9mRGVzY3JpcHRvclByb3RvfFJlYWRlcnxVaW50OEFycmF5fSBkZXNjcmlwdG9yIERlc2NyaXB0b3JcbiAqIEByZXR1cm5zIHtPbmVPZn0gT25lT2YgaW5zdGFuY2VcbiAqL1xuT25lT2YuZnJvbURlc2NyaXB0b3IgPSBmdW5jdGlvbiBmcm9tRGVzY3JpcHRvcihkZXNjcmlwdG9yKSB7XG5cbiAgICAvLyBEZWNvZGUgdGhlIGRlc2NyaXB0b3IgbWVzc2FnZSBpZiBzcGVjaWZpZWQgYXMgYSBidWZmZXI6XG4gICAgaWYgKHR5cGVvZiBkZXNjcmlwdG9yLmxlbmd0aCA9PT0gXCJudW1iZXJcIilcbiAgICAgICAgZGVzY3JpcHRvciA9IGV4cG9ydHMuT25lb2ZEZXNjcmlwdG9yUHJvdG8uZGVjb2RlKGRlc2NyaXB0b3IpO1xuXG4gICAgcmV0dXJuIG5ldyBPbmVPZihcbiAgICAgICAgLy8gdW5uYW1lZE9uZU9mSW5kZXggaXMgZ2xvYmFsLCBub3QgcGVyIHR5cGUsIGJlY2F1c2Ugd2UgaGF2ZSBubyByZWYgdG8gYSB0eXBlIGhlcmVcbiAgICAgICAgZGVzY3JpcHRvci5uYW1lICYmIGRlc2NyaXB0b3IubmFtZS5sZW5ndGggPyBkZXNjcmlwdG9yLm5hbWUgOiBcIm9uZW9mXCIgKyB1bm5hbWVkT25lb2ZJbmRleCsrXG4gICAgICAgIC8vIGZyb21EZXNjcmlwdG9yT3B0aW9ucyhkZXNjcmlwdG9yLm9wdGlvbnMsIGV4cG9ydHMuT25lb2ZPcHRpb25zKSAtIG9ubHkgdW5pbnRlcnByZXRlZF9vcHRpb25cbiAgICApO1xufTtcblxuLyoqXG4gKiBDb252ZXJ0cyBhIG9uZW9mIHRvIGEgZGVzY3JpcHRvci5cbiAqIEByZXR1cm5zIHtNZXNzYWdlPElPbmVvZkRlc2NyaXB0b3JQcm90bz59IERlc2NyaXB0b3JcbiAqL1xuT25lT2YucHJvdG90eXBlLnRvRGVzY3JpcHRvciA9IGZ1bmN0aW9uIHRvRGVzY3JpcHRvcigpIHtcbiAgICByZXR1cm4gZXhwb3J0cy5PbmVvZkRlc2NyaXB0b3JQcm90by5jcmVhdGUoe1xuICAgICAgICBuYW1lOiB0aGlzLm5hbWVcbiAgICAgICAgLy8gb3B0aW9uczogdG9EZXNjcmlwdG9yT3B0aW9ucyh0aGlzLm9wdGlvbnMsIGV4cG9ydHMuT25lb2ZPcHRpb25zKSAtIG9ubHkgdW5pbnRlcnByZXRlZF9vcHRpb25cbiAgICB9KTtcbn07XG5cbi8vIC0tLSBTZXJ2aWNlIC0tLVxuXG4vKipcbiAqIFByb3BlcnRpZXMgb2YgYSBTZXJ2aWNlRGVzY3JpcHRvclByb3RvIG1lc3NhZ2UuXG4gKiBAaW50ZXJmYWNlIElTZXJ2aWNlRGVzY3JpcHRvclByb3RvXG4gKiBAcHJvcGVydHkge3N0cmluZ30gW25hbWVdIFNlcnZpY2UgbmFtZVxuICogQHByb3BlcnR5IHtJTWV0aG9kRGVzY3JpcHRvclByb3RvW119IFttZXRob2RdIE1ldGhvZHNcbiAqIEBwcm9wZXJ0eSB7SVNlcnZpY2VPcHRpb25zfSBbb3B0aW9uc10gT3B0aW9uc1xuICovXG5cbi8qKlxuICogUHJvcGVydGllcyBvZiBhIFNlcnZpY2VPcHRpb25zIG1lc3NhZ2UuXG4gKiBAaW50ZXJmYWNlIElTZXJ2aWNlT3B0aW9uc1xuICogQHByb3BlcnR5IHtib29sZWFufSBbZGVwcmVjYXRlZF1cbiAqL1xuXG52YXIgdW5uYW1lZFNlcnZpY2VJbmRleCA9IDA7XG5cbi8qKlxuICogQ3JlYXRlcyBhIHNlcnZpY2UgZnJvbSBhIGRlc2NyaXB0b3IuXG4gKlxuICogV2FybmluZzogdGhpcyBpcyBub3Qgc2FmZSB0byB1c2Ugd2l0aCBlZGl0aW9ucyBwcm90b3MsIHNpbmNlIGl0IGRpc2NhcmRzIHJlbGV2YW50IGZpbGUgY29udGV4dC5cbiAqXG4gKiBAcGFyYW0ge0lTZXJ2aWNlRGVzY3JpcHRvclByb3RvfFJlYWRlcnxVaW50OEFycmF5fSBkZXNjcmlwdG9yIERlc2NyaXB0b3JcbiAqIEBwYXJhbSB7c3RyaW5nfSBbZWRpdGlvbj1cInByb3RvMlwiXSBUaGUgc3ludGF4IG9yIGVkaXRpb24gdG8gdXNlXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtuZXN0ZWQ9ZmFsc2VdIFdoZXRoZXIgb3Igbm90IHRoaXMgaXMgYSB0b3AtbGV2ZWwgb2JqZWN0XG4gKiBAcmV0dXJucyB7U2VydmljZX0gU2VydmljZSBpbnN0YW5jZVxuICovXG5TZXJ2aWNlLmZyb21EZXNjcmlwdG9yID0gZnVuY3Rpb24gZnJvbURlc2NyaXB0b3IoZGVzY3JpcHRvciwgZWRpdGlvbiwgbmVzdGVkKSB7XG5cbiAgICAvLyBEZWNvZGUgdGhlIGRlc2NyaXB0b3IgbWVzc2FnZSBpZiBzcGVjaWZpZWQgYXMgYSBidWZmZXI6XG4gICAgaWYgKHR5cGVvZiBkZXNjcmlwdG9yLmxlbmd0aCA9PT0gXCJudW1iZXJcIilcbiAgICAgICAgZGVzY3JpcHRvciA9IGV4cG9ydHMuU2VydmljZURlc2NyaXB0b3JQcm90by5kZWNvZGUoZGVzY3JpcHRvcik7XG5cbiAgICB2YXIgc2VydmljZSA9IG5ldyBTZXJ2aWNlKGRlc2NyaXB0b3IubmFtZSAmJiBkZXNjcmlwdG9yLm5hbWUubGVuZ3RoID8gZGVzY3JpcHRvci5uYW1lIDogXCJTZXJ2aWNlXCIgKyB1bm5hbWVkU2VydmljZUluZGV4KyssIGZyb21EZXNjcmlwdG9yT3B0aW9ucyhkZXNjcmlwdG9yLm9wdGlvbnMsIGV4cG9ydHMuU2VydmljZU9wdGlvbnMpKTtcbiAgICBpZiAoIW5lc3RlZClcbiAgICAgICAgc2VydmljZS5fZWRpdGlvbiA9IGVkaXRpb247XG4gICAgaWYgKGRlc2NyaXB0b3IubWV0aG9kKVxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRlc2NyaXB0b3IubWV0aG9kLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgc2VydmljZS5hZGQoTWV0aG9kLmZyb21EZXNjcmlwdG9yKGRlc2NyaXB0b3IubWV0aG9kW2ldKSk7XG5cbiAgICByZXR1cm4gc2VydmljZTtcbn07XG5cbi8qKlxuICogQ29udmVydHMgYSBzZXJ2aWNlIHRvIGEgZGVzY3JpcHRvci5cbiAqIEByZXR1cm5zIHtNZXNzYWdlPElTZXJ2aWNlRGVzY3JpcHRvclByb3RvPn0gRGVzY3JpcHRvclxuICovXG5TZXJ2aWNlLnByb3RvdHlwZS50b0Rlc2NyaXB0b3IgPSBmdW5jdGlvbiB0b0Rlc2NyaXB0b3IoKSB7XG5cbiAgICAvLyBNZXRob2RzXG4gICAgdmFyIG1ldGhvZHMgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubWV0aG9kc0FycmF5Lmxlbmd0aDsgKytpKVxuICAgICAgICBtZXRob2RzLnB1c2godGhpcy5fbWV0aG9kc0FycmF5W2ldLnRvRGVzY3JpcHRvcigpKTtcblxuICAgIHJldHVybiBleHBvcnRzLlNlcnZpY2VEZXNjcmlwdG9yUHJvdG8uY3JlYXRlKHtcbiAgICAgICAgbmFtZTogdGhpcy5uYW1lLFxuICAgICAgICBtZXRob2Q6IG1ldGhvZHMsXG4gICAgICAgIG9wdGlvbnM6IHRvRGVzY3JpcHRvck9wdGlvbnModGhpcy5vcHRpb25zLCBleHBvcnRzLlNlcnZpY2VPcHRpb25zKVxuICAgIH0pO1xufTtcblxuLy8gLS0tIE1ldGhvZCAtLS1cblxuLyoqXG4gKiBQcm9wZXJ0aWVzIG9mIGEgTWV0aG9kRGVzY3JpcHRvclByb3RvIG1lc3NhZ2UuXG4gKiBAaW50ZXJmYWNlIElNZXRob2REZXNjcmlwdG9yUHJvdG9cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbbmFtZV0gTWV0aG9kIG5hbWVcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbaW5wdXRUeXBlXSBSZXF1ZXN0IHR5cGUgbmFtZVxuICogQHByb3BlcnR5IHtzdHJpbmd9IFtvdXRwdXRUeXBlXSBSZXNwb25zZSB0eXBlIG5hbWVcbiAqIEBwcm9wZXJ0eSB7SU1ldGhvZE9wdGlvbnN9IFtvcHRpb25zXSBOb3Qgc3VwcG9ydGVkXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IFtjbGllbnRTdHJlYW1pbmc9ZmFsc2VdIFdoZXRoZXIgcmVxdWVzdHMgYXJlIHN0cmVhbWVkXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IFtzZXJ2ZXJTdHJlYW1pbmc9ZmFsc2VdIFdoZXRoZXIgcmVzcG9uc2VzIGFyZSBzdHJlYW1lZFxuICovXG5cbi8qKlxuICogUHJvcGVydGllcyBvZiBhIE1ldGhvZE9wdGlvbnMgbWVzc2FnZS5cbiAqXG4gKiBXYXJuaW5nOiB0aGlzIGlzIG5vdCBzYWZlIHRvIHVzZSB3aXRoIGVkaXRpb25zIHByb3Rvcywgc2luY2UgaXQgZGlzY2FyZHMgcmVsZXZhbnQgZmlsZSBjb250ZXh0LlxuICpcbiAqIEBpbnRlcmZhY2UgSU1ldGhvZE9wdGlvbnNcbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW2RlcHJlY2F0ZWRdXG4gKi9cblxudmFyIHVubmFtZWRNZXRob2RJbmRleCA9IDA7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG1ldGhvZCBmcm9tIGEgZGVzY3JpcHRvci5cbiAqIEBwYXJhbSB7SU1ldGhvZERlc2NyaXB0b3JQcm90b3xSZWFkZXJ8VWludDhBcnJheX0gZGVzY3JpcHRvciBEZXNjcmlwdG9yXG4gKiBAcmV0dXJucyB7TWV0aG9kfSBSZWZsZWN0ZWQgbWV0aG9kIGluc3RhbmNlXG4gKi9cbk1ldGhvZC5mcm9tRGVzY3JpcHRvciA9IGZ1bmN0aW9uIGZyb21EZXNjcmlwdG9yKGRlc2NyaXB0b3IpIHtcblxuICAgIC8vIERlY29kZSB0aGUgZGVzY3JpcHRvciBtZXNzYWdlIGlmIHNwZWNpZmllZCBhcyBhIGJ1ZmZlcjpcbiAgICBpZiAodHlwZW9mIGRlc2NyaXB0b3IubGVuZ3RoID09PSBcIm51bWJlclwiKVxuICAgICAgICBkZXNjcmlwdG9yID0gZXhwb3J0cy5NZXRob2REZXNjcmlwdG9yUHJvdG8uZGVjb2RlKGRlc2NyaXB0b3IpO1xuXG4gICAgcmV0dXJuIG5ldyBNZXRob2QoXG4gICAgICAgIC8vIHVubmFtZWRNZXRob2RJbmRleCBpcyBnbG9iYWwsIG5vdCBwZXIgc2VydmljZSwgYmVjYXVzZSB3ZSBoYXZlIG5vIHJlZiB0byBhIHNlcnZpY2UgaGVyZVxuICAgICAgICBkZXNjcmlwdG9yLm5hbWUgJiYgZGVzY3JpcHRvci5uYW1lLmxlbmd0aCA/IGRlc2NyaXB0b3IubmFtZSA6IFwiTWV0aG9kXCIgKyB1bm5hbWVkTWV0aG9kSW5kZXgrKyxcbiAgICAgICAgXCJycGNcIixcbiAgICAgICAgZGVzY3JpcHRvci5pbnB1dFR5cGUsXG4gICAgICAgIGRlc2NyaXB0b3Iub3V0cHV0VHlwZSxcbiAgICAgICAgQm9vbGVhbihkZXNjcmlwdG9yLmNsaWVudFN0cmVhbWluZyksXG4gICAgICAgIEJvb2xlYW4oZGVzY3JpcHRvci5zZXJ2ZXJTdHJlYW1pbmcpLFxuICAgICAgICBmcm9tRGVzY3JpcHRvck9wdGlvbnMoZGVzY3JpcHRvci5vcHRpb25zLCBleHBvcnRzLk1ldGhvZE9wdGlvbnMpXG4gICAgKTtcbn07XG5cbi8qKlxuICogQ29udmVydHMgYSBtZXRob2QgdG8gYSBkZXNjcmlwdG9yLlxuICogQHJldHVybnMge01lc3NhZ2U8SU1ldGhvZERlc2NyaXB0b3JQcm90bz59IERlc2NyaXB0b3JcbiAqL1xuTWV0aG9kLnByb3RvdHlwZS50b0Rlc2NyaXB0b3IgPSBmdW5jdGlvbiB0b0Rlc2NyaXB0b3IoKSB7XG4gICAgcmV0dXJuIGV4cG9ydHMuTWV0aG9kRGVzY3JpcHRvclByb3RvLmNyZWF0ZSh7XG4gICAgICAgIG5hbWU6IHRoaXMubmFtZSxcbiAgICAgICAgaW5wdXRUeXBlOiB0aGlzLnJlc29sdmVkUmVxdWVzdFR5cGUgPyB0aGlzLnJlc29sdmVkUmVxdWVzdFR5cGUuZnVsbE5hbWUgOiB0aGlzLnJlcXVlc3RUeXBlLFxuICAgICAgICBvdXRwdXRUeXBlOiB0aGlzLnJlc29sdmVkUmVzcG9uc2VUeXBlID8gdGhpcy5yZXNvbHZlZFJlc3BvbnNlVHlwZS5mdWxsTmFtZSA6IHRoaXMucmVzcG9uc2VUeXBlLFxuICAgICAgICBjbGllbnRTdHJlYW1pbmc6IHRoaXMucmVxdWVzdFN0cmVhbSxcbiAgICAgICAgc2VydmVyU3RyZWFtaW5nOiB0aGlzLnJlc3BvbnNlU3RyZWFtLFxuICAgICAgICBvcHRpb25zOiB0b0Rlc2NyaXB0b3JPcHRpb25zKHRoaXMub3B0aW9ucywgZXhwb3J0cy5NZXRob2RPcHRpb25zKVxuICAgIH0pO1xufTtcblxuLy8gLS0tIHV0aWxpdHkgLS0tXG5cbi8vIENvbnZlcnRzIGEgZGVzY3JpcHRvciB0eXBlIHRvIGEgcHJvdG9idWYuanMgYmFzaWMgdHlwZVxuZnVuY3Rpb24gZnJvbURlc2NyaXB0b3JUeXBlKHR5cGUpIHtcbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgLy8gMCBpcyByZXNlcnZlZCBmb3IgZXJyb3JzXG4gICAgICAgIGNhc2UgMTogcmV0dXJuIFwiZG91YmxlXCI7XG4gICAgICAgIGNhc2UgMjogcmV0dXJuIFwiZmxvYXRcIjtcbiAgICAgICAgY2FzZSAzOiByZXR1cm4gXCJpbnQ2NFwiO1xuICAgICAgICBjYXNlIDQ6IHJldHVybiBcInVpbnQ2NFwiO1xuICAgICAgICBjYXNlIDU6IHJldHVybiBcImludDMyXCI7XG4gICAgICAgIGNhc2UgNjogcmV0dXJuIFwiZml4ZWQ2NFwiO1xuICAgICAgICBjYXNlIDc6IHJldHVybiBcImZpeGVkMzJcIjtcbiAgICAgICAgY2FzZSA4OiByZXR1cm4gXCJib29sXCI7XG4gICAgICAgIGNhc2UgOTogcmV0dXJuIFwic3RyaW5nXCI7XG4gICAgICAgIGNhc2UgMTI6IHJldHVybiBcImJ5dGVzXCI7XG4gICAgICAgIGNhc2UgMTM6IHJldHVybiBcInVpbnQzMlwiO1xuICAgICAgICBjYXNlIDE1OiByZXR1cm4gXCJzZml4ZWQzMlwiO1xuICAgICAgICBjYXNlIDE2OiByZXR1cm4gXCJzZml4ZWQ2NFwiO1xuICAgICAgICBjYXNlIDE3OiByZXR1cm4gXCJzaW50MzJcIjtcbiAgICAgICAgY2FzZSAxODogcmV0dXJuIFwic2ludDY0XCI7XG4gICAgfVxuICAgIHRocm93IEVycm9yKFwiaWxsZWdhbCB0eXBlOiBcIiArIHR5cGUpO1xufVxuXG4vLyBUZXN0cyBpZiBhIGRlc2NyaXB0b3IgdHlwZSBpcyBwYWNrYWJsZVxuZnVuY3Rpb24gcGFja2FibGVEZXNjcmlwdG9yVHlwZSh0eXBlKSB7XG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgIGNhc2UgMTogLy8gZG91YmxlXG4gICAgICAgIGNhc2UgMjogLy8gZmxvYXRcbiAgICAgICAgY2FzZSAzOiAvLyBpbnQ2NFxuICAgICAgICBjYXNlIDQ6IC8vIHVpbnQ2NFxuICAgICAgICBjYXNlIDU6IC8vIGludDMyXG4gICAgICAgIGNhc2UgNjogLy8gZml4ZWQ2NFxuICAgICAgICBjYXNlIDc6IC8vIGZpeGVkMzJcbiAgICAgICAgY2FzZSA4OiAvLyBib29sXG4gICAgICAgIGNhc2UgMTM6IC8vIHVpbnQzMlxuICAgICAgICBjYXNlIDE0OiAvLyBlbnVtICghKVxuICAgICAgICBjYXNlIDE1OiAvLyBzZml4ZWQzMlxuICAgICAgICBjYXNlIDE2OiAvLyBzZml4ZWQ2NFxuICAgICAgICBjYXNlIDE3OiAvLyBzaW50MzJcbiAgICAgICAgY2FzZSAxODogLy8gc2ludDY0XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuXG4vLyBDb252ZXJ0cyBhIHByb3RvYnVmLmpzIGJhc2ljIHR5cGUgdG8gYSBkZXNjcmlwdG9yIHR5cGVcbmZ1bmN0aW9uIHRvRGVzY3JpcHRvclR5cGUodHlwZSwgcmVzb2x2ZWRUeXBlLCBkZWxpbWl0ZWQpIHtcbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgLy8gMCBpcyByZXNlcnZlZCBmb3IgZXJyb3JzXG4gICAgICAgIGNhc2UgXCJkb3VibGVcIjogcmV0dXJuIDE7XG4gICAgICAgIGNhc2UgXCJmbG9hdFwiOiByZXR1cm4gMjtcbiAgICAgICAgY2FzZSBcImludDY0XCI6IHJldHVybiAzO1xuICAgICAgICBjYXNlIFwidWludDY0XCI6IHJldHVybiA0O1xuICAgICAgICBjYXNlIFwiaW50MzJcIjogcmV0dXJuIDU7XG4gICAgICAgIGNhc2UgXCJmaXhlZDY0XCI6IHJldHVybiA2O1xuICAgICAgICBjYXNlIFwiZml4ZWQzMlwiOiByZXR1cm4gNztcbiAgICAgICAgY2FzZSBcImJvb2xcIjogcmV0dXJuIDg7XG4gICAgICAgIGNhc2UgXCJzdHJpbmdcIjogcmV0dXJuIDk7XG4gICAgICAgIGNhc2UgXCJieXRlc1wiOiByZXR1cm4gMTI7XG4gICAgICAgIGNhc2UgXCJ1aW50MzJcIjogcmV0dXJuIDEzO1xuICAgICAgICBjYXNlIFwic2ZpeGVkMzJcIjogcmV0dXJuIDE1O1xuICAgICAgICBjYXNlIFwic2ZpeGVkNjRcIjogcmV0dXJuIDE2O1xuICAgICAgICBjYXNlIFwic2ludDMyXCI6IHJldHVybiAxNztcbiAgICAgICAgY2FzZSBcInNpbnQ2NFwiOiByZXR1cm4gMTg7XG4gICAgfVxuICAgIGlmIChyZXNvbHZlZFR5cGUgaW5zdGFuY2VvZiBFbnVtKVxuICAgICAgICByZXR1cm4gMTQ7XG4gICAgaWYgKHJlc29sdmVkVHlwZSBpbnN0YW5jZW9mIFR5cGUpXG4gICAgICAgIHJldHVybiBkZWxpbWl0ZWQgPyAxMCA6IDExO1xuICAgIHRocm93IEVycm9yKFwiaWxsZWdhbCB0eXBlOiBcIiArIHR5cGUpO1xufVxuXG5mdW5jdGlvbiBmcm9tRGVzY3JpcHRvck9wdGlvbnNSZWN1cnNpdmUob2JqLCB0eXBlKSB7XG4gICAgdmFyIHZhbCA9IHt9O1xuICAgIGZvciAodmFyIGkgPSAwLCBmaWVsZCwga2V5OyBpIDwgdHlwZS5maWVsZHNBcnJheS5sZW5ndGg7ICsraSkge1xuICAgICAgICBpZiAoKGtleSA9IChmaWVsZCA9IHR5cGUuX2ZpZWxkc0FycmF5W2ldKS5uYW1lKSA9PT0gXCJ1bmludGVycHJldGVkT3B0aW9uXCIpIGNvbnRpbnVlO1xuICAgICAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIGNvbnRpbnVlO1xuXG4gICAgICAgIHZhciBuZXdLZXkgPSB1bmRlclNjb3JlKGtleSk7XG4gICAgICAgIGlmIChmaWVsZC5yZXNvbHZlZFR5cGUgaW5zdGFuY2VvZiBUeXBlKSB7XG4gICAgICAgICAgICB2YWxbbmV3S2V5XSA9IGZyb21EZXNjcmlwdG9yT3B0aW9uc1JlY3Vyc2l2ZShvYmpba2V5XSwgZmllbGQucmVzb2x2ZWRUeXBlKTtcbiAgICAgICAgfSBlbHNlIGlmKGZpZWxkLnJlc29sdmVkVHlwZSBpbnN0YW5jZW9mIEVudW0pIHtcbiAgICAgICAgICAgIHZhbFtuZXdLZXldID0gZmllbGQucmVzb2x2ZWRUeXBlLnZhbHVlc0J5SWRbb2JqW2tleV1dO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFsW25ld0tleV0gPSBvYmpba2V5XTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdmFsO1xufVxuXG4vLyBDb252ZXJ0cyBkZXNjcmlwdG9yIG9wdGlvbnMgdG8gYW4gb3B0aW9ucyBvYmplY3RcbmZ1bmN0aW9uIGZyb21EZXNjcmlwdG9yT3B0aW9ucyhvcHRpb25zLCB0eXBlKSB7XG4gICAgaWYgKCFvcHRpb25zKVxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIHJldHVybiBmcm9tRGVzY3JpcHRvck9wdGlvbnNSZWN1cnNpdmUodHlwZS50b09iamVjdChvcHRpb25zKSwgdHlwZSk7XG59XG5cbmZ1bmN0aW9uIHRvRGVzY3JpcHRvck9wdGlvbnNSZWN1cnNpdmUob2JqLCB0eXBlKSB7XG4gICAgdmFyIHZhbCA9IHt9O1xuICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgICAgIHZhciBuZXdLZXkgPSAkcHJvdG9idWYudXRpbC5jYW1lbENhc2Uoa2V5KTtcbiAgICAgICAgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodHlwZS5maWVsZHMsIG5ld0tleSkpIGNvbnRpbnVlO1xuICAgICAgICB2YXIgZmllbGQgPSB0eXBlLmZpZWxkc1tuZXdLZXldO1xuICAgICAgICBpZiAoZmllbGQucmVzb2x2ZWRUeXBlIGluc3RhbmNlb2YgVHlwZSkge1xuICAgICAgICAgICAgdmFsW25ld0tleV0gPSB0b0Rlc2NyaXB0b3JPcHRpb25zUmVjdXJzaXZlKG9ialtrZXldLCBmaWVsZC5yZXNvbHZlZFR5cGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFsW25ld0tleV0gPSBvYmpba2V5XTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZmllbGQucmVwZWF0ZWQgJiYgIUFycmF5LmlzQXJyYXkodmFsW25ld0tleV0pKSB7XG4gICAgICAgICAgICB2YWxbbmV3S2V5XSA9IFt2YWxbbmV3S2V5XV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHZhbDtcbn1cblxuLy8gQ29udmVydHMgYW4gb3B0aW9ucyBvYmplY3QgdG8gZGVzY3JpcHRvciBvcHRpb25zXG5mdW5jdGlvbiB0b0Rlc2NyaXB0b3JPcHRpb25zKG9wdGlvbnMsIHR5cGUpIHtcbiAgICBpZiAoIW9wdGlvbnMpXG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIHR5cGUuZnJvbU9iamVjdCh0b0Rlc2NyaXB0b3JPcHRpb25zUmVjdXJzaXZlKG9wdGlvbnMsIHR5cGUpKTtcbn1cblxuLy8gQ2FsY3VsYXRlcyB0aGUgc2hvcnRlc3QgcmVsYXRpdmUgcGF0aCBmcm9tIGBmcm9tYCB0byBgdG9gLlxuZnVuY3Rpb24gc2hvcnRuYW1lKGZyb20sIHRvKSB7XG4gICAgdmFyIGZyb21QYXRoID0gZnJvbS5mdWxsTmFtZS5zcGxpdChcIi5cIiksXG4gICAgICAgIHRvUGF0aCA9IHRvLmZ1bGxOYW1lLnNwbGl0KFwiLlwiKSxcbiAgICAgICAgaSA9IDAsXG4gICAgICAgIGogPSAwLFxuICAgICAgICBrID0gdG9QYXRoLmxlbmd0aCAtIDE7XG4gICAgaWYgKCEoZnJvbSBpbnN0YW5jZW9mIFJvb3QpICYmIHRvIGluc3RhbmNlb2YgTmFtZXNwYWNlKVxuICAgICAgICB3aGlsZSAoaSA8IGZyb21QYXRoLmxlbmd0aCAmJiBqIDwgayAmJiBmcm9tUGF0aFtpXSA9PT0gdG9QYXRoW2pdKSB7XG4gICAgICAgICAgICB2YXIgb3RoZXIgPSB0by5sb29rdXAoZnJvbVBhdGhbaSsrXSwgdHJ1ZSk7XG4gICAgICAgICAgICBpZiAob3RoZXIgIT09IG51bGwgJiYgb3RoZXIgIT09IHRvKVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgKytqO1xuICAgICAgICB9XG4gICAgZWxzZVxuICAgICAgICBmb3IgKDsgaSA8IGZyb21QYXRoLmxlbmd0aCAmJiBqIDwgayAmJiBmcm9tUGF0aFtpXSA9PT0gdG9QYXRoW2pdOyArK2ksICsraik7XG4gICAgcmV0dXJuIHRvUGF0aC5zbGljZShqKS5qb2luKFwiLlwiKTtcbn1cblxuLy8gY29waWVkIGhlcmUgZnJvbSBjbGkvdGFyZ2V0cy9wcm90by5qc1xuZnVuY3Rpb24gdW5kZXJTY29yZShzdHIpIHtcbiAgICByZXR1cm4gc3RyLnN1YnN0cmluZygwLDEpXG4gICAgICAgICArIHN0ci5zdWJzdHJpbmcoMSlcbiAgICAgICAgICAgICAgIC5yZXBsYWNlKC8oW0EtWl0pKD89W2Etel18JCkvZywgZnVuY3Rpb24oJDAsICQxKSB7IHJldHVybiBcIl9cIiArICQxLnRvTG93ZXJDYXNlKCk7IH0pO1xufVxuXG5mdW5jdGlvbiBlZGl0aW9uRnJvbURlc2NyaXB0b3IoZmlsZURlc2NyaXB0b3IpIHtcbiAgICBpZiAoZmlsZURlc2NyaXB0b3Iuc3ludGF4ID09PSBcImVkaXRpb25zXCIpIHtcbiAgICAgICAgc3dpdGNoKGZpbGVEZXNjcmlwdG9yLmVkaXRpb24pIHtcbiAgICAgICAgICAgIGNhc2UgZXhwb3J0cy5FZGl0aW9uLkVESVRJT05fMjAyMzpcbiAgICAgICAgICAgICAgICByZXR1cm4gXCIyMDIzXCI7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlVuc3VwcG9ydGVkIGVkaXRpb24gXCIgKyBmaWxlRGVzY3JpcHRvci5lZGl0aW9uKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoZmlsZURlc2NyaXB0b3Iuc3ludGF4ID09PSBcInByb3RvM1wiKSB7XG4gICAgICAgIHJldHVybiBcInByb3RvM1wiO1xuICAgIH1cbiAgICByZXR1cm4gXCJwcm90bzJcIjtcbn1cblxuZnVuY3Rpb24gZWRpdGlvblRvRGVzY3JpcHRvcihlZGl0aW9uLCBmaWxlRGVzY3JpcHRvcikge1xuICAgIGlmICghZWRpdGlvbikgcmV0dXJuO1xuICAgIGlmIChlZGl0aW9uID09PSBcInByb3RvMlwiIHx8IGVkaXRpb24gPT09IFwicHJvdG8zXCIpIHtcbiAgICAgICAgZmlsZURlc2NyaXB0b3Iuc3ludGF4ID0gZWRpdGlvbjtcbiAgICB9IGVsc2Uge1xuICAgICAgICBmaWxlRGVzY3JpcHRvci5zeW50YXggPSBcImVkaXRpb25zXCI7XG4gICAgICAgIHN3aXRjaChlZGl0aW9uKSB7XG4gICAgICAgICAgICBjYXNlIFwiMjAyM1wiOlxuICAgICAgICAgICAgICAgIGZpbGVEZXNjcmlwdG9yLmVkaXRpb24gPSBleHBvcnRzLkVkaXRpb24uRURJVElPTl8yMDIzO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbnN1cHBvcnRlZCBlZGl0aW9uIFwiICsgZWRpdGlvbik7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8vIC0tLSBleHBvcnRzIC0tLVxuXG4vKipcbiAqIFJlZmxlY3RlZCBmaWxlIGRlc2NyaXB0b3Igc2V0LlxuICogQG5hbWUgRmlsZURlc2NyaXB0b3JTZXRcbiAqIEB0eXBlIHtUeXBlfVxuICogQGNvbnN0XG4gKiBAdHN0eXBlICRwcm90b2J1Zi5UeXBlXG4gKi9cblxuLyoqXG4gKiBSZWZsZWN0ZWQgZmlsZSBkZXNjcmlwdG9yIHByb3RvLlxuICogQG5hbWUgRmlsZURlc2NyaXB0b3JQcm90b1xuICogQHR5cGUge1R5cGV9XG4gKiBAY29uc3RcbiAqIEB0c3R5cGUgJHByb3RvYnVmLlR5cGVcbiAqL1xuXG4vKipcbiAqIFJlZmxlY3RlZCBkZXNjcmlwdG9yIHByb3RvLlxuICogQG5hbWUgRGVzY3JpcHRvclByb3RvXG4gKiBAdHlwZSB7VHlwZX1cbiAqIEBwcm9wZXJ0eSB7VHlwZX0gRXh0ZW5zaW9uUmFuZ2VcbiAqIEBwcm9wZXJ0eSB7VHlwZX0gUmVzZXJ2ZWRSYW5nZVxuICogQGNvbnN0XG4gKiBAdHN0eXBlICRwcm90b2J1Zi5UeXBlICYge1xuICogICAgIEV4dGVuc2lvblJhbmdlOiAkcHJvdG9idWYuVHlwZSxcbiAqICAgICBSZXNlcnZlZFJhbmdlOiAkcHJvdG9idWYuVHlwZVxuICogfVxuICovXG5cbi8qKlxuICogUmVmbGVjdGVkIGZpZWxkIGRlc2NyaXB0b3IgcHJvdG8uXG4gKiBAbmFtZSBGaWVsZERlc2NyaXB0b3JQcm90b1xuICogQHR5cGUge1R5cGV9XG4gKiBAcHJvcGVydHkge0VudW19IExhYmVsXG4gKiBAcHJvcGVydHkge0VudW19IFR5cGVcbiAqIEBjb25zdFxuICogQHRzdHlwZSAkcHJvdG9idWYuVHlwZSAmIHtcbiAqICAgICBMYWJlbDogJHByb3RvYnVmLkVudW0sXG4gKiAgICAgVHlwZTogJHByb3RvYnVmLkVudW1cbiAqIH1cbiAqL1xuXG4vKipcbiAqIFJlZmxlY3RlZCBvbmVvZiBkZXNjcmlwdG9yIHByb3RvLlxuICogQG5hbWUgT25lb2ZEZXNjcmlwdG9yUHJvdG9cbiAqIEB0eXBlIHtUeXBlfVxuICogQGNvbnN0XG4gKiBAdHN0eXBlICRwcm90b2J1Zi5UeXBlXG4gKi9cblxuLyoqXG4gKiBSZWZsZWN0ZWQgZW51bSBkZXNjcmlwdG9yIHByb3RvLlxuICogQG5hbWUgRW51bURlc2NyaXB0b3JQcm90b1xuICogQHR5cGUge1R5cGV9XG4gKiBAY29uc3RcbiAqIEB0c3R5cGUgJHByb3RvYnVmLlR5cGVcbiAqL1xuXG4vKipcbiAqIFJlZmxlY3RlZCBzZXJ2aWNlIGRlc2NyaXB0b3IgcHJvdG8uXG4gKiBAbmFtZSBTZXJ2aWNlRGVzY3JpcHRvclByb3RvXG4gKiBAdHlwZSB7VHlwZX1cbiAqIEBjb25zdFxuICogQHRzdHlwZSAkcHJvdG9idWYuVHlwZVxuICovXG5cbi8qKlxuICogUmVmbGVjdGVkIGVudW0gdmFsdWUgZGVzY3JpcHRvciBwcm90by5cbiAqIEBuYW1lIEVudW1WYWx1ZURlc2NyaXB0b3JQcm90b1xuICogQHR5cGUge1R5cGV9XG4gKiBAY29uc3RcbiAqIEB0c3R5cGUgJHByb3RvYnVmLlR5cGVcbiAqL1xuXG4vKipcbiAqIFJlZmxlY3RlZCBtZXRob2QgZGVzY3JpcHRvciBwcm90by5cbiAqIEBuYW1lIE1ldGhvZERlc2NyaXB0b3JQcm90b1xuICogQHR5cGUge1R5cGV9XG4gKiBAY29uc3RcbiAqIEB0c3R5cGUgJHByb3RvYnVmLlR5cGVcbiAqL1xuXG4vKipcbiAqIFJlZmxlY3RlZCBmaWxlIG9wdGlvbnMuXG4gKiBAbmFtZSBGaWxlT3B0aW9uc1xuICogQHR5cGUge1R5cGV9XG4gKiBAcHJvcGVydHkge0VudW19IE9wdGltaXplTW9kZVxuICogQGNvbnN0XG4gKiBAdHN0eXBlICRwcm90b2J1Zi5UeXBlICYge1xuICogICAgIE9wdGltaXplTW9kZTogJHByb3RvYnVmLkVudW1cbiAqIH1cbiAqL1xuXG4vKipcbiAqIFJlZmxlY3RlZCBtZXNzYWdlIG9wdGlvbnMuXG4gKiBAbmFtZSBNZXNzYWdlT3B0aW9uc1xuICogQHR5cGUge1R5cGV9XG4gKiBAY29uc3RcbiAqIEB0c3R5cGUgJHByb3RvYnVmLlR5cGVcbiAqL1xuXG4vKipcbiAqIFJlZmxlY3RlZCBmaWVsZCBvcHRpb25zLlxuICogQG5hbWUgRmllbGRPcHRpb25zXG4gKiBAdHlwZSB7VHlwZX1cbiAqIEBwcm9wZXJ0eSB7RW51bX0gQ1R5cGVcbiAqIEBwcm9wZXJ0eSB7RW51bX0gSlNUeXBlXG4gKiBAY29uc3RcbiAqIEB0c3R5cGUgJHByb3RvYnVmLlR5cGUgJiB7XG4gKiAgICAgQ1R5cGU6ICRwcm90b2J1Zi5FbnVtLFxuICogICAgIEpTVHlwZTogJHByb3RvYnVmLkVudW1cbiAqIH1cbiAqL1xuXG4vKipcbiAqIFJlZmxlY3RlZCBvbmVvZiBvcHRpb25zLlxuICogQG5hbWUgT25lb2ZPcHRpb25zXG4gKiBAdHlwZSB7VHlwZX1cbiAqIEBjb25zdFxuICogQHRzdHlwZSAkcHJvdG9idWYuVHlwZVxuICovXG5cbi8qKlxuICogUmVmbGVjdGVkIGVudW0gb3B0aW9ucy5cbiAqIEBuYW1lIEVudW1PcHRpb25zXG4gKiBAdHlwZSB7VHlwZX1cbiAqIEBjb25zdFxuICogQHRzdHlwZSAkcHJvdG9idWYuVHlwZVxuICovXG5cbi8qKlxuICogUmVmbGVjdGVkIGVudW0gdmFsdWUgb3B0aW9ucy5cbiAqIEBuYW1lIEVudW1WYWx1ZU9wdGlvbnNcbiAqIEB0eXBlIHtUeXBlfVxuICogQGNvbnN0XG4gKiBAdHN0eXBlICRwcm90b2J1Zi5UeXBlXG4gKi9cblxuLyoqXG4gKiBSZWZsZWN0ZWQgc2VydmljZSBvcHRpb25zLlxuICogQG5hbWUgU2VydmljZU9wdGlvbnNcbiAqIEB0eXBlIHtUeXBlfVxuICogQGNvbnN0XG4gKiBAdHN0eXBlICRwcm90b2J1Zi5UeXBlXG4gKi9cblxuLyoqXG4gKiBSZWZsZWN0ZWQgbWV0aG9kIG9wdGlvbnMuXG4gKiBAbmFtZSBNZXRob2RPcHRpb25zXG4gKiBAdHlwZSB7VHlwZX1cbiAqIEBjb25zdFxuICogQHRzdHlwZSAkcHJvdG9idWYuVHlwZVxuICovXG5cbi8qKlxuICogUmVmbGVjdGVkIHVuaW50ZXJwcmV0ZXQgb3B0aW9uLlxuICogQG5hbWUgVW5pbnRlcnByZXRlZE9wdGlvblxuICogQHR5cGUge1R5cGV9XG4gKiBAcHJvcGVydHkge1R5cGV9IE5hbWVQYXJ0XG4gKiBAY29uc3RcbiAqIEB0c3R5cGUgJHByb3RvYnVmLlR5cGUgJiB7XG4gKiAgICAgTmFtZVBhcnQ6ICRwcm90b2J1Zi5UeXBlXG4gKiB9XG4gKi9cblxuLyoqXG4gKiBSZWZsZWN0ZWQgc291cmNlIGNvZGUgaW5mby5cbiAqIEBuYW1lIFNvdXJjZUNvZGVJbmZvXG4gKiBAdHlwZSB7VHlwZX1cbiAqIEBwcm9wZXJ0eSB7VHlwZX0gTG9jYXRpb25cbiAqIEBjb25zdFxuICogQHRzdHlwZSAkcHJvdG9idWYuVHlwZSAmIHtcbiAqICAgICBMb2NhdGlvbjogJHByb3RvYnVmLlR5cGVcbiAqIH1cbiAqL1xuXG4vKipcbiAqIFJlZmxlY3RlZCBnZW5lcmF0ZWQgY29kZSBpbmZvLlxuICogQG5hbWUgR2VuZXJhdGVkQ29kZUluZm9cbiAqIEB0eXBlIHtUeXBlfVxuICogQHByb3BlcnR5IHtUeXBlfSBBbm5vdGF0aW9uXG4gKiBAY29uc3RcbiAqIEB0c3R5cGUgJHByb3RvYnVmLlR5cGUgJiB7XG4gKiAgICAgQW5ub3RhdGlvbjogJHByb3RvYnVmLlR5cGVcbiAqIH1cbiAqL1xuIl0sIm5hbWVzIjpbIiRwcm90b2J1ZiIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwiZGVzY3JpcHRvciIsIlJvb3QiLCJmcm9tSlNPTiIsImxvb2t1cCIsIk5hbWVzcGFjZSIsIkVudW0iLCJUeXBlIiwiRmllbGQiLCJNYXBGaWVsZCIsIk9uZU9mIiwiU2VydmljZSIsIk1ldGhvZCIsImZyb21EZXNjcmlwdG9yIiwibGVuZ3RoIiwiRmlsZURlc2NyaXB0b3JTZXQiLCJkZWNvZGUiLCJyb290IiwiZmlsZSIsImZpbGVEZXNjcmlwdG9yIiwiZmlsZVBhY2thZ2UiLCJqIiwiaSIsImRlZmluZSIsImVkaXRpb24iLCJlZGl0aW9uRnJvbURlc2NyaXB0b3IiLCJuYW1lIiwiZmlsZXMiLCJwdXNoIiwiZmlsZW5hbWUiLCJtZXNzYWdlVHlwZSIsImFkZCIsImVudW1UeXBlIiwiZXh0ZW5zaW9uIiwic2VydmljZSIsIm9wdHMiLCJmcm9tRGVzY3JpcHRvck9wdGlvbnMiLCJvcHRpb25zIiwiRmlsZU9wdGlvbnMiLCJrcyIsIk9iamVjdCIsImtleXMiLCJzZXRPcHRpb24iLCJyZXNvbHZlQWxsIiwicHJvdG90eXBlIiwidG9EZXNjcmlwdG9yIiwic2V0IiwiY3JlYXRlIiwiUm9vdF90b0Rlc2NyaXB0b3JSZWN1cnNpdmUiLCJucyIsIkZpbGVEZXNjcmlwdG9yUHJvdG8iLCJmdWxsTmFtZSIsInN1YnN0cmluZyIsInJlcGxhY2UiLCJlZGl0aW9uVG9EZXNjcmlwdG9yIiwibmVzdGVkIiwibmVzdGVkQXJyYXkiLCJfbmVzdGVkQXJyYXkiLCJ0b0Rlc2NyaXB0b3JPcHRpb25zIiwidW5uYW1lZE1lc3NhZ2VJbmRleCIsIkRlc2NyaXB0b3JQcm90byIsInR5cGUiLCJNZXNzYWdlT3B0aW9ucyIsIl9lZGl0aW9uIiwib25lb2ZEZWNsIiwiZmllbGQiLCJoYXNPd25Qcm9wZXJ0eSIsIm9uZW9mc0FycmF5Iiwib25lb2ZJbmRleCIsIm5lc3RlZFR5cGUiLCJtYXBFbnRyeSIsImV4dGVuc2lvblJhbmdlIiwiZXh0ZW5zaW9ucyIsInN0YXJ0IiwiZW5kIiwicmVzZXJ2ZWRSYW5nZSIsInJlc2VydmVkTmFtZSIsInJlc2VydmVkIiwiZmllbGRzQXJyYXkiLCJmaWVsZERlc2NyaXB0b3IiLCJfZmllbGRzQXJyYXkiLCJrZXlUeXBlIiwidG9EZXNjcmlwdG9yVHlwZSIsInJlc29sdmVkS2V5VHlwZSIsInZhbHVlVHlwZSIsInJlc29sdmVkVHlwZSIsInZhbHVlVHlwZU5hbWUiLCJzaG9ydG5hbWUiLCJwYXJlbnQiLCJ1bmRlZmluZWQiLCJ0eXBlTmFtZSIsIkZpZWxkRGVzY3JpcHRvclByb3RvIiwibnVtYmVyIiwibGFiZWwiLCJfb25lb2ZzQXJyYXkiLCJFeHRlbnNpb25SYW5nZSIsIlJlc2VydmVkUmFuZ2UiLCJudW1iZXJSZSIsIkVycm9yIiwiZmllbGRUeXBlIiwiZnJvbURlc2NyaXB0b3JUeXBlIiwiZmllbGRSdWxlIiwiZXh0ZW5kZWUiLCJGaWVsZE9wdGlvbnMiLCJwcm90bzNfb3B0aW9uYWwiLCJkZWZhdWx0VmFsdWUiLCJtYXRjaCIsImV4ZWMiLCJwYXJzZUludCIsInBhY2thYmxlRGVzY3JpcHRvclR5cGUiLCJwYWNrZWQiLCJpZCIsIm1hcCIsInV0aWwiLCJ1Y0ZpcnN0IiwicmVzb2x2ZSIsImRlbGltaXRlZCIsInJ1bGUiLCJyZXF1aXJlZCIsImV4dGVuc2lvbkZpZWxkIiwiZXh0ZW5kIiwicGFydE9mIiwiaW5kZXhPZiIsIlN0cmluZyIsInVubmFtZWRFbnVtSW5kZXgiLCJFbnVtRGVzY3JpcHRvclByb3RvIiwidmFsdWVzIiwidmFsdWUiLCJlbm0iLCJFbnVtT3B0aW9ucyIsIkVudW1WYWx1ZURlc2NyaXB0b3JQcm90byIsInVubmFtZWRPbmVvZkluZGV4IiwiT25lb2ZEZXNjcmlwdG9yUHJvdG8iLCJ1bm5hbWVkU2VydmljZUluZGV4IiwiU2VydmljZURlc2NyaXB0b3JQcm90byIsIlNlcnZpY2VPcHRpb25zIiwibWV0aG9kIiwibWV0aG9kcyIsIm1ldGhvZHNBcnJheSIsIl9tZXRob2RzQXJyYXkiLCJ1bm5hbWVkTWV0aG9kSW5kZXgiLCJNZXRob2REZXNjcmlwdG9yUHJvdG8iLCJpbnB1dFR5cGUiLCJvdXRwdXRUeXBlIiwiQm9vbGVhbiIsImNsaWVudFN0cmVhbWluZyIsInNlcnZlclN0cmVhbWluZyIsIk1ldGhvZE9wdGlvbnMiLCJyZXNvbHZlZFJlcXVlc3RUeXBlIiwicmVxdWVzdFR5cGUiLCJyZXNvbHZlZFJlc3BvbnNlVHlwZSIsInJlc3BvbnNlVHlwZSIsInJlcXVlc3RTdHJlYW0iLCJyZXNwb25zZVN0cmVhbSIsImZyb21EZXNjcmlwdG9yT3B0aW9uc1JlY3Vyc2l2ZSIsIm9iaiIsInZhbCIsImtleSIsImNhbGwiLCJuZXdLZXkiLCJ1bmRlclNjb3JlIiwidmFsdWVzQnlJZCIsInRvT2JqZWN0IiwidG9EZXNjcmlwdG9yT3B0aW9uc1JlY3Vyc2l2ZSIsImNhbWVsQ2FzZSIsImZpZWxkcyIsInJlcGVhdGVkIiwiQXJyYXkiLCJpc0FycmF5IiwiZnJvbU9iamVjdCIsImZyb20iLCJ0byIsImZyb21QYXRoIiwic3BsaXQiLCJ0b1BhdGgiLCJrIiwib3RoZXIiLCJzbGljZSIsImpvaW4iLCJzdHIiLCIkMCIsIiQxIiwidG9Mb3dlckNhc2UiLCJzeW50YXgiLCJFZGl0aW9uIiwiRURJVElPTl8yMDIzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protobufjs/ext/descriptor/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/protobufjs/index.js":
/*!******************************************!*\
  !*** ./node_modules/protobufjs/index.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// full library entry point.\n\nmodule.exports = __webpack_require__(/*! ./src/index */ \"(ssr)/./node_modules/protobufjs/src/index.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcHJvdG9idWZqcy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQSw0QkFBNEI7QUFFZjtBQUNiQSx1R0FBdUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91bmljb3JuLWNsYXNzZXMvLi9ub2RlX21vZHVsZXMvcHJvdG9idWZqcy9pbmRleC5qcz80ZjI3Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIGZ1bGwgbGlicmFyeSBlbnRyeSBwb2ludC5cblxuXCJ1c2Ugc3RyaWN0XCI7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuL3NyYy9pbmRleFwiKTtcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwicmVxdWlyZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protobufjs/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/protobufjs/src/common.js":
/*!***********************************************!*\
  !*** ./node_modules/protobufjs/src/common.js ***!
  \***********************************************/
/***/ ((module) => {

eval("\nmodule.exports = common;\nvar commonRe = /\\/|\\./;\n/**\n * Provides common type definitions.\n * Can also be used to provide additional google types or your own custom types.\n * @param {string} name Short name as in `google/protobuf/[name].proto` or full file name\n * @param {Object.<string,*>} json JSON definition within `google.protobuf` if a short name, otherwise the file's root definition\n * @returns {undefined}\n * @property {INamespace} google/protobuf/any.proto Any\n * @property {INamespace} google/protobuf/duration.proto Duration\n * @property {INamespace} google/protobuf/empty.proto Empty\n * @property {INamespace} google/protobuf/field_mask.proto FieldMask\n * @property {INamespace} google/protobuf/struct.proto Struct, Value, NullValue and ListValue\n * @property {INamespace} google/protobuf/timestamp.proto Timestamp\n * @property {INamespace} google/protobuf/wrappers.proto Wrappers\n * @example\n * // manually provides descriptor.proto (assumes google/protobuf/ namespace and .proto extension)\n * protobuf.common(\"descriptor\", descriptorJson);\n *\n * // manually provides a custom definition (uses my.foo namespace)\n * protobuf.common(\"my/foo/bar.proto\", myFooBarJson);\n */ function common(name, json) {\n    if (!commonRe.test(name)) {\n        name = \"google/protobuf/\" + name + \".proto\";\n        json = {\n            nested: {\n                google: {\n                    nested: {\n                        protobuf: {\n                            nested: json\n                        }\n                    }\n                }\n            }\n        };\n    }\n    common[name] = json;\n}\n// Not provided because of limited use (feel free to discuss or to provide yourself):\n//\n// google/protobuf/descriptor.proto\n// google/protobuf/source_context.proto\n// google/protobuf/type.proto\n//\n// Stripped and pre-parsed versions of these non-bundled files are instead available as part of\n// the repository or package within the google/protobuf directory.\ncommon(\"any\", {\n    /**\n     * Properties of a google.protobuf.Any message.\n     * @interface IAny\n     * @type {Object}\n     * @property {string} [typeUrl]\n     * @property {Uint8Array} [bytes]\n     * @memberof common\n     */ Any: {\n        fields: {\n            type_url: {\n                type: \"string\",\n                id: 1\n            },\n            value: {\n                type: \"bytes\",\n                id: 2\n            }\n        }\n    }\n});\nvar timeType;\ncommon(\"duration\", {\n    /**\n     * Properties of a google.protobuf.Duration message.\n     * @interface IDuration\n     * @type {Object}\n     * @property {number|Long} [seconds]\n     * @property {number} [nanos]\n     * @memberof common\n     */ Duration: timeType = {\n        fields: {\n            seconds: {\n                type: \"int64\",\n                id: 1\n            },\n            nanos: {\n                type: \"int32\",\n                id: 2\n            }\n        }\n    }\n});\ncommon(\"timestamp\", {\n    /**\n     * Properties of a google.protobuf.Timestamp message.\n     * @interface ITimestamp\n     * @type {Object}\n     * @property {number|Long} [seconds]\n     * @property {number} [nanos]\n     * @memberof common\n     */ Timestamp: timeType\n});\ncommon(\"empty\", {\n    /**\n     * Properties of a google.protobuf.Empty message.\n     * @interface IEmpty\n     * @memberof common\n     */ Empty: {\n        fields: {}\n    }\n});\ncommon(\"struct\", {\n    /**\n     * Properties of a google.protobuf.Struct message.\n     * @interface IStruct\n     * @type {Object}\n     * @property {Object.<string,IValue>} [fields]\n     * @memberof common\n     */ Struct: {\n        fields: {\n            fields: {\n                keyType: \"string\",\n                type: \"Value\",\n                id: 1\n            }\n        }\n    },\n    /**\n     * Properties of a google.protobuf.Value message.\n     * @interface IValue\n     * @type {Object}\n     * @property {string} [kind]\n     * @property {0} [nullValue]\n     * @property {number} [numberValue]\n     * @property {string} [stringValue]\n     * @property {boolean} [boolValue]\n     * @property {IStruct} [structValue]\n     * @property {IListValue} [listValue]\n     * @memberof common\n     */ Value: {\n        oneofs: {\n            kind: {\n                oneof: [\n                    \"nullValue\",\n                    \"numberValue\",\n                    \"stringValue\",\n                    \"boolValue\",\n                    \"structValue\",\n                    \"listValue\"\n                ]\n            }\n        },\n        fields: {\n            nullValue: {\n                type: \"NullValue\",\n                id: 1\n            },\n            numberValue: {\n                type: \"double\",\n                id: 2\n            },\n            stringValue: {\n                type: \"string\",\n                id: 3\n            },\n            boolValue: {\n                type: \"bool\",\n                id: 4\n            },\n            structValue: {\n                type: \"Struct\",\n                id: 5\n            },\n            listValue: {\n                type: \"ListValue\",\n                id: 6\n            }\n        }\n    },\n    NullValue: {\n        values: {\n            NULL_VALUE: 0\n        }\n    },\n    /**\n     * Properties of a google.protobuf.ListValue message.\n     * @interface IListValue\n     * @type {Object}\n     * @property {Array.<IValue>} [values]\n     * @memberof common\n     */ ListValue: {\n        fields: {\n            values: {\n                rule: \"repeated\",\n                type: \"Value\",\n                id: 1\n            }\n        }\n    }\n});\ncommon(\"wrappers\", {\n    /**\n     * Properties of a google.protobuf.DoubleValue message.\n     * @interface IDoubleValue\n     * @type {Object}\n     * @property {number} [value]\n     * @memberof common\n     */ DoubleValue: {\n        fields: {\n            value: {\n                type: \"double\",\n                id: 1\n            }\n        }\n    },\n    /**\n     * Properties of a google.protobuf.FloatValue message.\n     * @interface IFloatValue\n     * @type {Object}\n     * @property {number} [value]\n     * @memberof common\n     */ FloatValue: {\n        fields: {\n            value: {\n                type: \"float\",\n                id: 1\n            }\n        }\n    },\n    /**\n     * Properties of a google.protobuf.Int64Value message.\n     * @interface IInt64Value\n     * @type {Object}\n     * @property {number|Long} [value]\n     * @memberof common\n     */ Int64Value: {\n        fields: {\n            value: {\n                type: \"int64\",\n                id: 1\n            }\n        }\n    },\n    /**\n     * Properties of a google.protobuf.UInt64Value message.\n     * @interface IUInt64Value\n     * @type {Object}\n     * @property {number|Long} [value]\n     * @memberof common\n     */ UInt64Value: {\n        fields: {\n            value: {\n                type: \"uint64\",\n                id: 1\n            }\n        }\n    },\n    /**\n     * Properties of a google.protobuf.Int32Value message.\n     * @interface IInt32Value\n     * @type {Object}\n     * @property {number} [value]\n     * @memberof common\n     */ Int32Value: {\n        fields: {\n            value: {\n                type: \"int32\",\n                id: 1\n            }\n        }\n    },\n    /**\n     * Properties of a google.protobuf.UInt32Value message.\n     * @interface IUInt32Value\n     * @type {Object}\n     * @property {number} [value]\n     * @memberof common\n     */ UInt32Value: {\n        fields: {\n            value: {\n                type: \"uint32\",\n                id: 1\n            }\n        }\n    },\n    /**\n     * Properties of a google.protobuf.BoolValue message.\n     * @interface IBoolValue\n     * @type {Object}\n     * @property {boolean} [value]\n     * @memberof common\n     */ BoolValue: {\n        fields: {\n            value: {\n                type: \"bool\",\n                id: 1\n            }\n        }\n    },\n    /**\n     * Properties of a google.protobuf.StringValue message.\n     * @interface IStringValue\n     * @type {Object}\n     * @property {string} [value]\n     * @memberof common\n     */ StringValue: {\n        fields: {\n            value: {\n                type: \"string\",\n                id: 1\n            }\n        }\n    },\n    /**\n     * Properties of a google.protobuf.BytesValue message.\n     * @interface IBytesValue\n     * @type {Object}\n     * @property {Uint8Array} [value]\n     * @memberof common\n     */ BytesValue: {\n        fields: {\n            value: {\n                type: \"bytes\",\n                id: 1\n            }\n        }\n    }\n});\ncommon(\"field_mask\", {\n    /**\n     * Properties of a google.protobuf.FieldMask message.\n     * @interface IDoubleValue\n     * @type {Object}\n     * @property {number} [value]\n     * @memberof common\n     */ FieldMask: {\n        fields: {\n            paths: {\n                rule: \"repeated\",\n                type: \"string\",\n                id: 1\n            }\n        }\n    }\n});\n/**\n * Gets the root definition of the specified common proto file.\n *\n * Bundled definitions are:\n * - google/protobuf/any.proto\n * - google/protobuf/duration.proto\n * - google/protobuf/empty.proto\n * - google/protobuf/field_mask.proto\n * - google/protobuf/struct.proto\n * - google/protobuf/timestamp.proto\n * - google/protobuf/wrappers.proto\n *\n * @param {string} file Proto file name\n * @returns {INamespace|null} Root definition or `null` if not defined\n */ common.get = function get(file) {\n    return common[file] || null;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protobufjs/src/common.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/protobufjs/src/converter.js":
/*!**************************************************!*\
  !*** ./node_modules/protobufjs/src/converter.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Runtime message from/to plain object converters.\n * @namespace\n */ var converter = exports;\nvar Enum = __webpack_require__(/*! ./enum */ \"(ssr)/./node_modules/protobufjs/src/enum.js\"), util = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/protobufjs/src/util.js\");\n/**\n * Generates a partial value fromObject conveter.\n * @param {Codegen} gen Codegen instance\n * @param {Field} field Reflected field\n * @param {number} fieldIndex Field index\n * @param {string} prop Property reference\n * @returns {Codegen} Codegen instance\n * @ignore\n */ function genValuePartial_fromObject(gen, field, fieldIndex, prop) {\n    var defaultAlreadyEmitted = false;\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */ if (field.resolvedType) {\n        if (field.resolvedType instanceof Enum) {\n            gen(\"switch(d%s){\", prop);\n            for(var values = field.resolvedType.values, keys = Object.keys(values), i = 0; i < keys.length; ++i){\n                // enum unknown values passthrough\n                if (values[keys[i]] === field.typeDefault && !defaultAlreadyEmitted) {\n                    gen(\"default:\")('if(typeof(d%s)===\"number\"){m%s=d%s;break}', prop, prop, prop);\n                    if (!field.repeated) gen // fallback to default value only for\n                    (\"break\"); // for non-repeated fields, just ignore\n                    defaultAlreadyEmitted = true;\n                }\n                gen(\"case%j:\", keys[i])(\"case %i:\", values[keys[i]])(\"m%s=%j\", prop, values[keys[i]])(\"break\");\n            }\n            gen(\"}\");\n        } else gen('if(typeof d%s!==\"object\")', prop)(\"throw TypeError(%j)\", field.fullName + \": object expected\")(\"m%s=types[%i].fromObject(d%s)\", prop, fieldIndex, prop);\n    } else {\n        var isUnsigned = false;\n        switch(field.type){\n            case \"double\":\n            case \"float\":\n                gen(\"m%s=Number(d%s)\", prop, prop); // also catches \"NaN\", \"Infinity\"\n                break;\n            case \"uint32\":\n            case \"fixed32\":\n                gen(\"m%s=d%s>>>0\", prop, prop);\n                break;\n            case \"int32\":\n            case \"sint32\":\n            case \"sfixed32\":\n                gen(\"m%s=d%s|0\", prop, prop);\n                break;\n            case \"uint64\":\n                isUnsigned = true;\n            // eslint-disable-next-line no-fallthrough\n            case \"int64\":\n            case \"sint64\":\n            case \"fixed64\":\n            case \"sfixed64\":\n                gen(\"if(util.Long)\")(\"(m%s=util.Long.fromValue(d%s)).unsigned=%j\", prop, prop, isUnsigned)('else if(typeof d%s===\"string\")', prop)(\"m%s=parseInt(d%s,10)\", prop, prop)('else if(typeof d%s===\"number\")', prop)(\"m%s=d%s\", prop, prop)('else if(typeof d%s===\"object\")', prop)(\"m%s=new util.LongBits(d%s.low>>>0,d%s.high>>>0).toNumber(%s)\", prop, prop, prop, isUnsigned ? \"true\" : \"\");\n                break;\n            case \"bytes\":\n                gen('if(typeof d%s===\"string\")', prop)(\"util.base64.decode(d%s,m%s=util.newBuffer(util.base64.length(d%s)),0)\", prop, prop, prop)(\"else if(d%s.length >= 0)\", prop)(\"m%s=d%s\", prop, prop);\n                break;\n            case \"string\":\n                gen(\"m%s=String(d%s)\", prop, prop);\n                break;\n            case \"bool\":\n                gen(\"m%s=Boolean(d%s)\", prop, prop);\n                break;\n        }\n    }\n    return gen;\n/* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */ }\n/**\n * Generates a plain object to runtime message converter specific to the specified message type.\n * @param {Type} mtype Message type\n * @returns {Codegen} Codegen instance\n */ converter.fromObject = function fromObject(mtype) {\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */ var fields = mtype.fieldsArray;\n    var gen = util.codegen([\n        \"d\"\n    ], mtype.name + \"$fromObject\")(\"if(d instanceof this.ctor)\")(\"return d\");\n    if (!fields.length) return gen(\"return new this.ctor\");\n    gen(\"var m=new this.ctor\");\n    for(var i = 0; i < fields.length; ++i){\n        var field = fields[i].resolve(), prop = util.safeProp(field.name);\n        // Map fields\n        if (field.map) {\n            gen(\"if(d%s){\", prop)('if(typeof d%s!==\"object\")', prop)(\"throw TypeError(%j)\", field.fullName + \": object expected\")(\"m%s={}\", prop)(\"for(var ks=Object.keys(d%s),i=0;i<ks.length;++i){\", prop);\n            genValuePartial_fromObject(gen, field, /* not sorted */ i, prop + \"[ks[i]]\")(\"}\")(\"}\");\n        // Repeated fields\n        } else if (field.repeated) {\n            gen(\"if(d%s){\", prop)(\"if(!Array.isArray(d%s))\", prop)(\"throw TypeError(%j)\", field.fullName + \": array expected\")(\"m%s=[]\", prop)(\"for(var i=0;i<d%s.length;++i){\", prop);\n            genValuePartial_fromObject(gen, field, /* not sorted */ i, prop + \"[i]\")(\"}\")(\"}\");\n        // Non-repeated fields\n        } else {\n            if (!(field.resolvedType instanceof Enum)) gen // no need to test for null/undefined if an enum (uses switch)\n            (\"if(d%s!=null){\", prop); // !== undefined && !== null\n            genValuePartial_fromObject(gen, field, /* not sorted */ i, prop);\n            if (!(field.resolvedType instanceof Enum)) gen(\"}\");\n        }\n    }\n    return gen(\"return m\");\n/* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */ };\n/**\n * Generates a partial value toObject converter.\n * @param {Codegen} gen Codegen instance\n * @param {Field} field Reflected field\n * @param {number} fieldIndex Field index\n * @param {string} prop Property reference\n * @returns {Codegen} Codegen instance\n * @ignore\n */ function genValuePartial_toObject(gen, field, fieldIndex, prop) {\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */ if (field.resolvedType) {\n        if (field.resolvedType instanceof Enum) gen(\"d%s=o.enums===String?(types[%i].values[m%s]===undefined?m%s:types[%i].values[m%s]):m%s\", prop, fieldIndex, prop, prop, fieldIndex, prop, prop);\n        else gen(\"d%s=types[%i].toObject(m%s,o)\", prop, fieldIndex, prop);\n    } else {\n        var isUnsigned = false;\n        switch(field.type){\n            case \"double\":\n            case \"float\":\n                gen(\"d%s=o.json&&!isFinite(m%s)?String(m%s):m%s\", prop, prop, prop, prop);\n                break;\n            case \"uint64\":\n                isUnsigned = true;\n            // eslint-disable-next-line no-fallthrough\n            case \"int64\":\n            case \"sint64\":\n            case \"fixed64\":\n            case \"sfixed64\":\n                gen('if(typeof m%s===\"number\")', prop)(\"d%s=o.longs===String?String(m%s):m%s\", prop, prop, prop)(\"else\") // Long-like\n                (\"d%s=o.longs===String?util.Long.prototype.toString.call(m%s):o.longs===Number?new util.LongBits(m%s.low>>>0,m%s.high>>>0).toNumber(%s):m%s\", prop, prop, prop, prop, isUnsigned ? \"true\" : \"\", prop);\n                break;\n            case \"bytes\":\n                gen(\"d%s=o.bytes===String?util.base64.encode(m%s,0,m%s.length):o.bytes===Array?Array.prototype.slice.call(m%s):m%s\", prop, prop, prop, prop, prop);\n                break;\n            default:\n                gen(\"d%s=m%s\", prop, prop);\n                break;\n        }\n    }\n    return gen;\n/* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */ }\n/**\n * Generates a runtime message to plain object converter specific to the specified message type.\n * @param {Type} mtype Message type\n * @returns {Codegen} Codegen instance\n */ converter.toObject = function toObject(mtype) {\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */ var fields = mtype.fieldsArray.slice().sort(util.compareFieldsById);\n    if (!fields.length) return util.codegen()(\"return {}\");\n    var gen = util.codegen([\n        \"m\",\n        \"o\"\n    ], mtype.name + \"$toObject\")(\"if(!o)\")(\"o={}\")(\"var d={}\");\n    var repeatedFields = [], mapFields = [], normalFields = [], i = 0;\n    for(; i < fields.length; ++i)if (!fields[i].partOf) (fields[i].resolve().repeated ? repeatedFields : fields[i].map ? mapFields : normalFields).push(fields[i]);\n    if (repeatedFields.length) {\n        gen(\"if(o.arrays||o.defaults){\");\n        for(i = 0; i < repeatedFields.length; ++i)gen(\"d%s=[]\", util.safeProp(repeatedFields[i].name));\n        gen(\"}\");\n    }\n    if (mapFields.length) {\n        gen(\"if(o.objects||o.defaults){\");\n        for(i = 0; i < mapFields.length; ++i)gen(\"d%s={}\", util.safeProp(mapFields[i].name));\n        gen(\"}\");\n    }\n    if (normalFields.length) {\n        gen(\"if(o.defaults){\");\n        for(i = 0; i < normalFields.length; ++i){\n            var field = normalFields[i], prop = util.safeProp(field.name);\n            if (field.resolvedType instanceof Enum) gen(\"d%s=o.enums===String?%j:%j\", prop, field.resolvedType.valuesById[field.typeDefault], field.typeDefault);\n            else if (field.long) gen(\"if(util.Long){\")(\"var n=new util.Long(%i,%i,%j)\", field.typeDefault.low, field.typeDefault.high, field.typeDefault.unsigned)(\"d%s=o.longs===String?n.toString():o.longs===Number?n.toNumber():n\", prop)(\"}else\")(\"d%s=o.longs===String?%j:%i\", prop, field.typeDefault.toString(), field.typeDefault.toNumber());\n            else if (field.bytes) {\n                var arrayDefault = \"[\" + Array.prototype.slice.call(field.typeDefault).join(\",\") + \"]\";\n                gen(\"if(o.bytes===String)d%s=%j\", prop, String.fromCharCode.apply(String, field.typeDefault))(\"else{\")(\"d%s=%s\", prop, arrayDefault)(\"if(o.bytes!==Array)d%s=util.newBuffer(d%s)\", prop, prop)(\"}\");\n            } else gen(\"d%s=%j\", prop, field.typeDefault); // also messages (=null)\n        }\n        gen(\"}\");\n    }\n    var hasKs2 = false;\n    for(i = 0; i < fields.length; ++i){\n        var field = fields[i], index = mtype._fieldsArray.indexOf(field), prop = util.safeProp(field.name);\n        if (field.map) {\n            if (!hasKs2) {\n                hasKs2 = true;\n                gen(\"var ks2\");\n            }\n            gen(\"if(m%s&&(ks2=Object.keys(m%s)).length){\", prop, prop)(\"d%s={}\", prop)(\"for(var j=0;j<ks2.length;++j){\");\n            genValuePartial_toObject(gen, field, /* sorted */ index, prop + \"[ks2[j]]\")(\"}\");\n        } else if (field.repeated) {\n            gen(\"if(m%s&&m%s.length){\", prop, prop)(\"d%s=[]\", prop)(\"for(var j=0;j<m%s.length;++j){\", prop);\n            genValuePartial_toObject(gen, field, /* sorted */ index, prop + \"[j]\")(\"}\");\n        } else {\n            gen(\"if(m%s!=null&&m.hasOwnProperty(%j)){\", prop, field.name); // !== undefined && !== null\n            genValuePartial_toObject(gen, field, /* sorted */ index, prop);\n            if (field.partOf) gen(\"if(o.oneofs)\")(\"d%s=%j\", util.safeProp(field.partOf.name), field.name);\n        }\n        gen(\"}\");\n    }\n    return gen(\"return d\");\n/* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */ };\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protobufjs/src/converter.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/protobufjs/src/decoder.js":
/*!************************************************!*\
  !*** ./node_modules/protobufjs/src/decoder.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = decoder;\nvar Enum = __webpack_require__(/*! ./enum */ \"(ssr)/./node_modules/protobufjs/src/enum.js\"), types = __webpack_require__(/*! ./types */ \"(ssr)/./node_modules/protobufjs/src/types.js\"), util = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/protobufjs/src/util.js\");\nfunction missing(field) {\n    return \"missing required '\" + field.name + \"'\";\n}\n/**\n * Generates a decoder specific to the specified message type.\n * @param {Type} mtype Message type\n * @returns {Codegen} Codegen instance\n */ function decoder(mtype) {\n    /* eslint-disable no-unexpected-multiline */ var gen = util.codegen([\n        \"r\",\n        \"l\",\n        \"e\"\n    ], mtype.name + \"$decode\")(\"if(!(r instanceof Reader))\")(\"r=Reader.create(r)\")(\"var c=l===undefined?r.len:r.pos+l,m=new this.ctor\" + (mtype.fieldsArray.filter(function(field) {\n        return field.map;\n    }).length ? \",k,value\" : \"\"))(\"while(r.pos<c){\")(\"var t=r.uint32()\")(\"if(t===e)\")(\"break\")(\"switch(t>>>3){\");\n    var i = 0;\n    for(; i < /* initializes */ mtype.fieldsArray.length; ++i){\n        var field = mtype._fieldsArray[i].resolve(), type = field.resolvedType instanceof Enum ? \"int32\" : field.type, ref = \"m\" + util.safeProp(field.name);\n        gen(\"case %i: {\", field.id);\n        // Map fields\n        if (field.map) {\n            gen(\"if(%s===util.emptyObject)\", ref)(\"%s={}\", ref)(\"var c2 = r.uint32()+r.pos\");\n            if (types.defaults[field.keyType] !== undefined) gen(\"k=%j\", types.defaults[field.keyType]);\n            else gen(\"k=null\");\n            if (types.defaults[type] !== undefined) gen(\"value=%j\", types.defaults[type]);\n            else gen(\"value=null\");\n            gen(\"while(r.pos<c2){\")(\"var tag2=r.uint32()\")(\"switch(tag2>>>3){\")(\"case 1: k=r.%s(); break\", field.keyType)(\"case 2:\");\n            if (types.basic[type] === undefined) gen(\"value=types[%i].decode(r,r.uint32())\", i); // can't be groups\n            else gen(\"value=r.%s()\", type);\n            gen(\"break\")(\"default:\")(\"r.skipType(tag2&7)\")(\"break\")(\"}\")(\"}\");\n            if (types.long[field.keyType] !== undefined) gen('%s[typeof k===\"object\"?util.longToHash(k):k]=value', ref);\n            else gen(\"%s[k]=value\", ref);\n        // Repeated fields\n        } else if (field.repeated) {\n            gen(\"if(!(%s&&%s.length))\", ref, ref)(\"%s=[]\", ref);\n            // Packable (always check for forward and backward compatiblity)\n            if (types.packed[type] !== undefined) gen(\"if((t&7)===2){\")(\"var c2=r.uint32()+r.pos\")(\"while(r.pos<c2)\")(\"%s.push(r.%s())\", ref, type)(\"}else\");\n            // Non-packed\n            if (types.basic[type] === undefined) gen(field.delimited ? \"%s.push(types[%i].decode(r,undefined,((t&~7)|4)))\" : \"%s.push(types[%i].decode(r,r.uint32()))\", ref, i);\n            else gen(\"%s.push(r.%s())\", ref, type);\n        // Non-repeated\n        } else if (types.basic[type] === undefined) gen(field.delimited ? \"%s=types[%i].decode(r,undefined,((t&~7)|4))\" : \"%s=types[%i].decode(r,r.uint32())\", ref, i);\n        else gen(\"%s=r.%s()\", ref, type);\n        gen(\"break\")(\"}\");\n    // Unknown fields\n    }\n    gen(\"default:\")(\"r.skipType(t&7)\")(\"break\")(\"}\")(\"}\");\n    // Field presence\n    for(i = 0; i < mtype._fieldsArray.length; ++i){\n        var rfield = mtype._fieldsArray[i];\n        if (rfield.required) gen(\"if(!m.hasOwnProperty(%j))\", rfield.name)(\"throw util.ProtocolError(%j,{instance:m})\", missing(rfield));\n    }\n    return gen(\"return m\");\n/* eslint-enable no-unexpected-multiline */ }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protobufjs/src/decoder.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/protobufjs/src/encoder.js":
/*!************************************************!*\
  !*** ./node_modules/protobufjs/src/encoder.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = encoder;\nvar Enum = __webpack_require__(/*! ./enum */ \"(ssr)/./node_modules/protobufjs/src/enum.js\"), types = __webpack_require__(/*! ./types */ \"(ssr)/./node_modules/protobufjs/src/types.js\"), util = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/protobufjs/src/util.js\");\n/**\n * Generates a partial message type encoder.\n * @param {Codegen} gen Codegen instance\n * @param {Field} field Reflected field\n * @param {number} fieldIndex Field index\n * @param {string} ref Variable reference\n * @returns {Codegen} Codegen instance\n * @ignore\n */ function genTypePartial(gen, field, fieldIndex, ref) {\n    return field.delimited ? gen(\"types[%i].encode(%s,w.uint32(%i)).uint32(%i)\", fieldIndex, ref, (field.id << 3 | 3) >>> 0, (field.id << 3 | 4) >>> 0) : gen(\"types[%i].encode(%s,w.uint32(%i).fork()).ldelim()\", fieldIndex, ref, (field.id << 3 | 2) >>> 0);\n}\n/**\n * Generates an encoder specific to the specified message type.\n * @param {Type} mtype Message type\n * @returns {Codegen} Codegen instance\n */ function encoder(mtype) {\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */ var gen = util.codegen([\n        \"m\",\n        \"w\"\n    ], mtype.name + \"$encode\")(\"if(!w)\")(\"w=Writer.create()\");\n    var i, ref;\n    // \"when a message is serialized its known fields should be written sequentially by field number\"\n    var fields = /* initializes */ mtype.fieldsArray.slice().sort(util.compareFieldsById);\n    for(var i = 0; i < fields.length; ++i){\n        var field = fields[i].resolve(), index = mtype._fieldsArray.indexOf(field), type = field.resolvedType instanceof Enum ? \"int32\" : field.type, wireType = types.basic[type];\n        ref = \"m\" + util.safeProp(field.name);\n        // Map fields\n        if (field.map) {\n            gen(\"if(%s!=null&&Object.hasOwnProperty.call(m,%j)){\", ref, field.name) // !== undefined && !== null\n            (\"for(var ks=Object.keys(%s),i=0;i<ks.length;++i){\", ref)(\"w.uint32(%i).fork().uint32(%i).%s(ks[i])\", (field.id << 3 | 2) >>> 0, 8 | types.mapKey[field.keyType], field.keyType);\n            if (wireType === undefined) gen(\"types[%i].encode(%s[ks[i]],w.uint32(18).fork()).ldelim().ldelim()\", index, ref); // can't be groups\n            else gen(\".uint32(%i).%s(%s[ks[i]]).ldelim()\", 16 | wireType, type, ref);\n            gen(\"}\")(\"}\");\n        // Repeated fields\n        } else if (field.repeated) {\n            gen(\"if(%s!=null&&%s.length){\", ref, ref); // !== undefined && !== null\n            // Packed repeated\n            if (field.packed && types.packed[type] !== undefined) {\n                gen(\"w.uint32(%i).fork()\", (field.id << 3 | 2) >>> 0)(\"for(var i=0;i<%s.length;++i)\", ref)(\"w.%s(%s[i])\", type, ref)(\"w.ldelim()\");\n            // Non-packed\n            } else {\n                gen(\"for(var i=0;i<%s.length;++i)\", ref);\n                if (wireType === undefined) genTypePartial(gen, field, index, ref + \"[i]\");\n                else gen(\"w.uint32(%i).%s(%s[i])\", (field.id << 3 | wireType) >>> 0, type, ref);\n            }\n            gen(\"}\");\n        // Non-repeated\n        } else {\n            if (field.optional) gen(\"if(%s!=null&&Object.hasOwnProperty.call(m,%j))\", ref, field.name); // !== undefined && !== null\n            if (wireType === undefined) genTypePartial(gen, field, index, ref);\n            else gen(\"w.uint32(%i).%s(%s)\", (field.id << 3 | wireType) >>> 0, type, ref);\n        }\n    }\n    return gen(\"return w\");\n/* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */ }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protobufjs/src/encoder.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/protobufjs/src/enum.js":
/*!*********************************************!*\
  !*** ./node_modules/protobufjs/src/enum.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = Enum;\n// extends ReflectionObject\nvar ReflectionObject = __webpack_require__(/*! ./object */ \"(ssr)/./node_modules/protobufjs/src/object.js\");\n((Enum.prototype = Object.create(ReflectionObject.prototype)).constructor = Enum).className = \"Enum\";\nvar Namespace = __webpack_require__(/*! ./namespace */ \"(ssr)/./node_modules/protobufjs/src/namespace.js\"), util = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/protobufjs/src/util.js\");\n/**\n * Constructs a new enum instance.\n * @classdesc Reflected enum.\n * @extends ReflectionObject\n * @constructor\n * @param {string} name Unique name within its namespace\n * @param {Object.<string,number>} [values] Enum values as an object, by name\n * @param {Object.<string,*>} [options] Declared options\n * @param {string} [comment] The comment for this enum\n * @param {Object.<string,string>} [comments] The value comments for this enum\n * @param {Object.<string,Object<string,*>>|undefined} [valuesOptions] The value options for this enum\n */ function Enum(name, values, options, comment, comments, valuesOptions) {\n    ReflectionObject.call(this, name, options);\n    if (values && typeof values !== \"object\") throw TypeError(\"values must be an object\");\n    /**\n     * Enum values by id.\n     * @type {Object.<number,string>}\n     */ this.valuesById = {};\n    /**\n     * Enum values by name.\n     * @type {Object.<string,number>}\n     */ this.values = Object.create(this.valuesById); // toJSON, marker\n    /**\n     * Enum comment text.\n     * @type {string|null}\n     */ this.comment = comment;\n    /**\n     * Value comment texts, if any.\n     * @type {Object.<string,string>}\n     */ this.comments = comments || {};\n    /**\n     * Values options, if any\n     * @type {Object<string, Object<string, *>>|undefined}\n     */ this.valuesOptions = valuesOptions;\n    /**\n     * Resolved values features, if any\n     * @type {Object<string, Object<string, *>>|undefined}\n     */ this._valuesFeatures = {};\n    /**\n     * Reserved ranges, if any.\n     * @type {Array.<number[]|string>}\n     */ this.reserved = undefined; // toJSON\n    // Note that values inherit valuesById on their prototype which makes them a TypeScript-\n    // compatible enum. This is used by pbts to write actual enum definitions that work for\n    // static and reflection code alike instead of emitting generic object definitions.\n    if (values) {\n        for(var keys = Object.keys(values), i = 0; i < keys.length; ++i)if (typeof values[keys[i]] === \"number\") this.valuesById[this.values[keys[i]] = values[keys[i]]] = keys[i];\n    }\n}\n/**\n * @override\n */ Enum.prototype._resolveFeatures = function _resolveFeatures(edition) {\n    edition = this._edition || edition;\n    ReflectionObject.prototype._resolveFeatures.call(this, edition);\n    Object.keys(this.values).forEach((key)=>{\n        var parentFeaturesCopy = Object.assign({}, this._features);\n        this._valuesFeatures[key] = Object.assign(parentFeaturesCopy, this.valuesOptions && this.valuesOptions[key] && this.valuesOptions[key].features);\n    });\n    return this;\n};\n/**\n * Enum descriptor.\n * @interface IEnum\n * @property {Object.<string,number>} values Enum values\n * @property {Object.<string,*>} [options] Enum options\n */ /**\n * Constructs an enum from an enum descriptor.\n * @param {string} name Enum name\n * @param {IEnum} json Enum descriptor\n * @returns {Enum} Created enum\n * @throws {TypeError} If arguments are invalid\n */ Enum.fromJSON = function fromJSON(name, json) {\n    var enm = new Enum(name, json.values, json.options, json.comment, json.comments);\n    enm.reserved = json.reserved;\n    if (json.edition) enm._edition = json.edition;\n    enm._defaultEdition = \"proto3\"; // For backwards-compatibility.\n    return enm;\n};\n/**\n * Converts this enum to an enum descriptor.\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {IEnum} Enum descriptor\n */ Enum.prototype.toJSON = function toJSON(toJSONOptions) {\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n    return util.toObject([\n        \"edition\",\n        this._editionToJSON(),\n        \"options\",\n        this.options,\n        \"valuesOptions\",\n        this.valuesOptions,\n        \"values\",\n        this.values,\n        \"reserved\",\n        this.reserved && this.reserved.length ? this.reserved : undefined,\n        \"comment\",\n        keepComments ? this.comment : undefined,\n        \"comments\",\n        keepComments ? this.comments : undefined\n    ]);\n};\n/**\n * Adds a value to this enum.\n * @param {string} name Value name\n * @param {number} id Value id\n * @param {string} [comment] Comment, if any\n * @param {Object.<string, *>|undefined} [options] Options, if any\n * @returns {Enum} `this`\n * @throws {TypeError} If arguments are invalid\n * @throws {Error} If there is already a value with this name or id\n */ Enum.prototype.add = function add(name, id, comment, options) {\n    // utilized by the parser but not by .fromJSON\n    if (!util.isString(name)) throw TypeError(\"name must be a string\");\n    if (!util.isInteger(id)) throw TypeError(\"id must be an integer\");\n    if (this.values[name] !== undefined) throw Error(\"duplicate name '\" + name + \"' in \" + this);\n    if (this.isReservedId(id)) throw Error(\"id \" + id + \" is reserved in \" + this);\n    if (this.isReservedName(name)) throw Error(\"name '\" + name + \"' is reserved in \" + this);\n    if (this.valuesById[id] !== undefined) {\n        if (!(this.options && this.options.allow_alias)) throw Error(\"duplicate id \" + id + \" in \" + this);\n        this.values[name] = id;\n    } else this.valuesById[this.values[name] = id] = name;\n    if (options) {\n        if (this.valuesOptions === undefined) this.valuesOptions = {};\n        this.valuesOptions[name] = options || null;\n    }\n    this.comments[name] = comment || null;\n    return this;\n};\n/**\n * Removes a value from this enum\n * @param {string} name Value name\n * @returns {Enum} `this`\n * @throws {TypeError} If arguments are invalid\n * @throws {Error} If `name` is not a name of this enum\n */ Enum.prototype.remove = function remove(name) {\n    if (!util.isString(name)) throw TypeError(\"name must be a string\");\n    var val = this.values[name];\n    if (val == null) throw Error(\"name '\" + name + \"' does not exist in \" + this);\n    delete this.valuesById[val];\n    delete this.values[name];\n    delete this.comments[name];\n    if (this.valuesOptions) delete this.valuesOptions[name];\n    return this;\n};\n/**\n * Tests if the specified id is reserved.\n * @param {number} id Id to test\n * @returns {boolean} `true` if reserved, otherwise `false`\n */ Enum.prototype.isReservedId = function isReservedId(id) {\n    return Namespace.isReservedId(this.reserved, id);\n};\n/**\n * Tests if the specified name is reserved.\n * @param {string} name Name to test\n * @returns {boolean} `true` if reserved, otherwise `false`\n */ Enum.prototype.isReservedName = function isReservedName(name) {\n    return Namespace.isReservedName(this.reserved, name);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protobufjs/src/enum.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/protobufjs/src/field.js":
/*!**********************************************!*\
  !*** ./node_modules/protobufjs/src/field.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = Field;\n// extends ReflectionObject\nvar ReflectionObject = __webpack_require__(/*! ./object */ \"(ssr)/./node_modules/protobufjs/src/object.js\");\n((Field.prototype = Object.create(ReflectionObject.prototype)).constructor = Field).className = \"Field\";\nvar Enum = __webpack_require__(/*! ./enum */ \"(ssr)/./node_modules/protobufjs/src/enum.js\"), types = __webpack_require__(/*! ./types */ \"(ssr)/./node_modules/protobufjs/src/types.js\"), util = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/protobufjs/src/util.js\");\nvar Type; // cyclic\nvar ruleRe = /^required|optional|repeated$/;\n/**\n * Constructs a new message field instance. Note that {@link MapField|map fields} have their own class.\n * @name Field\n * @classdesc Reflected message field.\n * @extends FieldBase\n * @constructor\n * @param {string} name Unique name within its namespace\n * @param {number} id Unique id within its namespace\n * @param {string} type Value type\n * @param {string|Object.<string,*>} [rule=\"optional\"] Field rule\n * @param {string|Object.<string,*>} [extend] Extended type if different from parent\n * @param {Object.<string,*>} [options] Declared options\n */ /**\n * Constructs a field from a field descriptor.\n * @param {string} name Field name\n * @param {IField} json Field descriptor\n * @returns {Field} Created field\n * @throws {TypeError} If arguments are invalid\n */ Field.fromJSON = function fromJSON(name, json) {\n    var field = new Field(name, json.id, json.type, json.rule, json.extend, json.options, json.comment);\n    if (json.edition) field._edition = json.edition;\n    field._defaultEdition = \"proto3\"; // For backwards-compatibility.\n    return field;\n};\n/**\n * Not an actual constructor. Use {@link Field} instead.\n * @classdesc Base class of all reflected message fields. This is not an actual class but here for the sake of having consistent type definitions.\n * @exports FieldBase\n * @extends ReflectionObject\n * @constructor\n * @param {string} name Unique name within its namespace\n * @param {number} id Unique id within its namespace\n * @param {string} type Value type\n * @param {string|Object.<string,*>} [rule=\"optional\"] Field rule\n * @param {string|Object.<string,*>} [extend] Extended type if different from parent\n * @param {Object.<string,*>} [options] Declared options\n * @param {string} [comment] Comment associated with this field\n */ function Field(name, id, type, rule, extend, options, comment) {\n    if (util.isObject(rule)) {\n        comment = extend;\n        options = rule;\n        rule = extend = undefined;\n    } else if (util.isObject(extend)) {\n        comment = options;\n        options = extend;\n        extend = undefined;\n    }\n    ReflectionObject.call(this, name, options);\n    if (!util.isInteger(id) || id < 0) throw TypeError(\"id must be a non-negative integer\");\n    if (!util.isString(type)) throw TypeError(\"type must be a string\");\n    if (rule !== undefined && !ruleRe.test(rule = rule.toString().toLowerCase())) throw TypeError(\"rule must be a string rule\");\n    if (extend !== undefined && !util.isString(extend)) throw TypeError(\"extend must be a string\");\n    /**\n     * Field rule, if any.\n     * @type {string|undefined}\n     */ if (rule === \"proto3_optional\") {\n        rule = \"optional\";\n    }\n    this.rule = rule && rule !== \"optional\" ? rule : undefined; // toJSON\n    /**\n     * Field type.\n     * @type {string}\n     */ this.type = type; // toJSON\n    /**\n     * Unique field id.\n     * @type {number}\n     */ this.id = id; // toJSON, marker\n    /**\n     * Extended type if different from parent.\n     * @type {string|undefined}\n     */ this.extend = extend || undefined; // toJSON\n    /**\n     * Whether this field is repeated.\n     * @type {boolean}\n     */ this.repeated = rule === \"repeated\";\n    /**\n     * Whether this field is a map or not.\n     * @type {boolean}\n     */ this.map = false;\n    /**\n     * Message this field belongs to.\n     * @type {Type|null}\n     */ this.message = null;\n    /**\n     * OneOf this field belongs to, if any,\n     * @type {OneOf|null}\n     */ this.partOf = null;\n    /**\n     * The field type's default value.\n     * @type {*}\n     */ this.typeDefault = null;\n    /**\n     * The field's default value on prototypes.\n     * @type {*}\n     */ this.defaultValue = null;\n    /**\n     * Whether this field's value should be treated as a long.\n     * @type {boolean}\n     */ this.long = util.Long ? types.long[type] !== undefined : /* istanbul ignore next */ false;\n    /**\n     * Whether this field's value is a buffer.\n     * @type {boolean}\n     */ this.bytes = type === \"bytes\";\n    /**\n     * Resolved type if not a basic type.\n     * @type {Type|Enum|null}\n     */ this.resolvedType = null;\n    /**\n     * Sister-field within the extended type if a declaring extension field.\n     * @type {Field|null}\n     */ this.extensionField = null;\n    /**\n     * Sister-field within the declaring namespace if an extended field.\n     * @type {Field|null}\n     */ this.declaringField = null;\n    /**\n     * Comment for this field.\n     * @type {string|null}\n     */ this.comment = comment;\n}\n/**\n * Determines whether this field is required.\n * @name Field#required\n * @type {boolean}\n * @readonly\n */ Object.defineProperty(Field.prototype, \"required\", {\n    get: function() {\n        return this._features.field_presence === \"LEGACY_REQUIRED\";\n    }\n});\n/**\n * Determines whether this field is not required.\n * @name Field#optional\n * @type {boolean}\n * @readonly\n */ Object.defineProperty(Field.prototype, \"optional\", {\n    get: function() {\n        return !this.required;\n    }\n});\n/**\n * Determines whether this field uses tag-delimited encoding.  In proto2 this\n * corresponded to group syntax.\n * @name Field#delimited\n * @type {boolean}\n * @readonly\n */ Object.defineProperty(Field.prototype, \"delimited\", {\n    get: function() {\n        return this.resolvedType instanceof Type && this._features.message_encoding === \"DELIMITED\";\n    }\n});\n/**\n * Determines whether this field is packed. Only relevant when repeated.\n * @name Field#packed\n * @type {boolean}\n * @readonly\n */ Object.defineProperty(Field.prototype, \"packed\", {\n    get: function() {\n        return this._features.repeated_field_encoding === \"PACKED\";\n    }\n});\n/**\n * Determines whether this field tracks presence.\n * @name Field#hasPresence\n * @type {boolean}\n * @readonly\n */ Object.defineProperty(Field.prototype, \"hasPresence\", {\n    get: function() {\n        if (this.repeated || this.map) {\n            return false;\n        }\n        return this.partOf || // oneofs\n        this.declaringField || this.extensionField || // extensions\n        this._features.field_presence !== \"IMPLICIT\";\n    }\n});\n/**\n * @override\n */ Field.prototype.setOption = function setOption(name, value, ifNotSet) {\n    return ReflectionObject.prototype.setOption.call(this, name, value, ifNotSet);\n};\n/**\n * Field descriptor.\n * @interface IField\n * @property {string} [rule=\"optional\"] Field rule\n * @property {string} type Field type\n * @property {number} id Field id\n * @property {Object.<string,*>} [options] Field options\n */ /**\n * Extension field descriptor.\n * @interface IExtensionField\n * @extends IField\n * @property {string} extend Extended type\n */ /**\n * Converts this field to a field descriptor.\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {IField} Field descriptor\n */ Field.prototype.toJSON = function toJSON(toJSONOptions) {\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n    return util.toObject([\n        \"edition\",\n        this._editionToJSON(),\n        \"rule\",\n        this.rule !== \"optional\" && this.rule || undefined,\n        \"type\",\n        this.type,\n        \"id\",\n        this.id,\n        \"extend\",\n        this.extend,\n        \"options\",\n        this.options,\n        \"comment\",\n        keepComments ? this.comment : undefined\n    ]);\n};\n/**\n * Resolves this field's type references.\n * @returns {Field} `this`\n * @throws {Error} If any reference cannot be resolved\n */ Field.prototype.resolve = function resolve() {\n    if (this.resolved) return this;\n    if ((this.typeDefault = types.defaults[this.type]) === undefined) {\n        this.resolvedType = (this.declaringField ? this.declaringField.parent : this.parent).lookupTypeOrEnum(this.type);\n        if (this.resolvedType instanceof Type) this.typeDefault = null;\n        else this.typeDefault = this.resolvedType.values[Object.keys(this.resolvedType.values)[0]]; // first defined\n    } else if (this.options && this.options.proto3_optional) {\n        // proto3 scalar value marked optional; should default to null\n        this.typeDefault = null;\n    }\n    // use explicitly set default value if present\n    if (this.options && this.options[\"default\"] != null) {\n        this.typeDefault = this.options[\"default\"];\n        if (this.resolvedType instanceof Enum && typeof this.typeDefault === \"string\") this.typeDefault = this.resolvedType.values[this.typeDefault];\n    }\n    // remove unnecessary options\n    if (this.options) {\n        if (this.options.packed !== undefined && this.resolvedType && !(this.resolvedType instanceof Enum)) delete this.options.packed;\n        if (!Object.keys(this.options).length) this.options = undefined;\n    }\n    // convert to internal data type if necesssary\n    if (this.long) {\n        this.typeDefault = util.Long.fromNumber(this.typeDefault, this.type.charAt(0) === \"u\");\n        /* istanbul ignore else */ if (Object.freeze) Object.freeze(this.typeDefault); // long instances are meant to be immutable anyway (i.e. use small int cache that even requires it)\n    } else if (this.bytes && typeof this.typeDefault === \"string\") {\n        var buf;\n        if (util.base64.test(this.typeDefault)) util.base64.decode(this.typeDefault, buf = util.newBuffer(util.base64.length(this.typeDefault)), 0);\n        else util.utf8.write(this.typeDefault, buf = util.newBuffer(util.utf8.length(this.typeDefault)), 0);\n        this.typeDefault = buf;\n    }\n    // take special care of maps and repeated fields\n    if (this.map) this.defaultValue = util.emptyObject;\n    else if (this.repeated) this.defaultValue = util.emptyArray;\n    else this.defaultValue = this.typeDefault;\n    // ensure proper value on prototype\n    if (this.parent instanceof Type) this.parent.ctor.prototype[this.name] = this.defaultValue;\n    return ReflectionObject.prototype.resolve.call(this);\n};\n/**\n * Infers field features from legacy syntax that may have been specified differently.\n * in older editions.\n * @param {string|undefined} edition The edition this proto is on, or undefined if pre-editions\n * @returns {object} The feature values to override\n */ Field.prototype._inferLegacyProtoFeatures = function _inferLegacyProtoFeatures(edition) {\n    if (edition !== \"proto2\" && edition !== \"proto3\") {\n        return {};\n    }\n    var features = {};\n    if (this.rule === \"required\") {\n        features.field_presence = \"LEGACY_REQUIRED\";\n    }\n    if (this.parent && types.defaults[this.type] === undefined) {\n        // We can't use resolvedType because types may not have been resolved yet.  However,\n        // legacy groups are always in the same scope as the field so we don't have to do a\n        // full scan of the tree.\n        var type = this.parent.get(this.type.split(\".\").pop());\n        if (type && type instanceof Type && type.group) {\n            features.message_encoding = \"DELIMITED\";\n        }\n    }\n    if (this.getOption(\"packed\") === true) {\n        features.repeated_field_encoding = \"PACKED\";\n    } else if (this.getOption(\"packed\") === false) {\n        features.repeated_field_encoding = \"EXPANDED\";\n    }\n    return features;\n};\n/**\n * @override\n */ Field.prototype._resolveFeatures = function _resolveFeatures(edition) {\n    return ReflectionObject.prototype._resolveFeatures.call(this, this._edition || edition);\n};\n/**\n * Decorator function as returned by {@link Field.d} and {@link MapField.d} (TypeScript).\n * @typedef FieldDecorator\n * @type {function}\n * @param {Object} prototype Target prototype\n * @param {string} fieldName Field name\n * @returns {undefined}\n */ /**\n * Field decorator (TypeScript).\n * @name Field.d\n * @function\n * @param {number} fieldId Field id\n * @param {\"double\"|\"float\"|\"int32\"|\"uint32\"|\"sint32\"|\"fixed32\"|\"sfixed32\"|\"int64\"|\"uint64\"|\"sint64\"|\"fixed64\"|\"sfixed64\"|\"string\"|\"bool\"|\"bytes\"|Object} fieldType Field type\n * @param {\"optional\"|\"required\"|\"repeated\"} [fieldRule=\"optional\"] Field rule\n * @param {T} [defaultValue] Default value\n * @returns {FieldDecorator} Decorator function\n * @template T extends number | number[] | Long | Long[] | string | string[] | boolean | boolean[] | Uint8Array | Uint8Array[] | Buffer | Buffer[]\n */ Field.d = function decorateField(fieldId, fieldType, fieldRule, defaultValue) {\n    // submessage: decorate the submessage and use its name as the type\n    if (typeof fieldType === \"function\") fieldType = util.decorateType(fieldType).name;\n    else if (fieldType && typeof fieldType === \"object\") fieldType = util.decorateEnum(fieldType).name;\n    return function fieldDecorator(prototype, fieldName) {\n        util.decorateType(prototype.constructor).add(new Field(fieldName, fieldId, fieldType, fieldRule, {\n            \"default\": defaultValue\n        }));\n    };\n};\n/**\n * Field decorator (TypeScript).\n * @name Field.d\n * @function\n * @param {number} fieldId Field id\n * @param {Constructor<T>|string} fieldType Field type\n * @param {\"optional\"|\"required\"|\"repeated\"} [fieldRule=\"optional\"] Field rule\n * @returns {FieldDecorator} Decorator function\n * @template T extends Message<T>\n * @variation 2\n */ // like Field.d but without a default value\n// Sets up cyclic dependencies (called in index-light)\nField._configure = function configure(Type_) {\n    Type = Type_;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protobufjs/src/field.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/protobufjs/src/index-light.js":
/*!****************************************************!*\
  !*** ./node_modules/protobufjs/src/index-light.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar protobuf = module.exports = __webpack_require__(/*! ./index-minimal */ \"(ssr)/./node_modules/protobufjs/src/index-minimal.js\");\nprotobuf.build = \"light\";\n/**\n * A node-style callback as used by {@link load} and {@link Root#load}.\n * @typedef LoadCallback\n * @type {function}\n * @param {Error|null} error Error, if any, otherwise `null`\n * @param {Root} [root] Root, if there hasn't been an error\n * @returns {undefined}\n */ /**\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\n * @param {string|string[]} filename One or multiple files to load\n * @param {Root} root Root namespace, defaults to create a new one if omitted.\n * @param {LoadCallback} callback Callback function\n * @returns {undefined}\n * @see {@link Root#load}\n */ function load(filename, root, callback) {\n    if (typeof root === \"function\") {\n        callback = root;\n        root = new protobuf.Root();\n    } else if (!root) root = new protobuf.Root();\n    return root.load(filename, callback);\n}\n/**\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\n * @name load\n * @function\n * @param {string|string[]} filename One or multiple files to load\n * @param {LoadCallback} callback Callback function\n * @returns {undefined}\n * @see {@link Root#load}\n * @variation 2\n */ // function load(filename:string, callback:LoadCallback):undefined\n/**\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and returns a promise.\n * @name load\n * @function\n * @param {string|string[]} filename One or multiple files to load\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\n * @returns {Promise<Root>} Promise\n * @see {@link Root#load}\n * @variation 3\n */ // function load(filename:string, [root:Root]):Promise<Root>\nprotobuf.load = load;\n/**\n * Synchronously loads one or multiple .proto or preprocessed .json files into a common root namespace (node only).\n * @param {string|string[]} filename One or multiple files to load\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\n * @returns {Root} Root namespace\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\n * @see {@link Root#loadSync}\n */ function loadSync(filename, root) {\n    if (!root) root = new protobuf.Root();\n    return root.loadSync(filename);\n}\nprotobuf.loadSync = loadSync;\n// Serialization\nprotobuf.encoder = __webpack_require__(/*! ./encoder */ \"(ssr)/./node_modules/protobufjs/src/encoder.js\");\nprotobuf.decoder = __webpack_require__(/*! ./decoder */ \"(ssr)/./node_modules/protobufjs/src/decoder.js\");\nprotobuf.verifier = __webpack_require__(/*! ./verifier */ \"(ssr)/./node_modules/protobufjs/src/verifier.js\");\nprotobuf.converter = __webpack_require__(/*! ./converter */ \"(ssr)/./node_modules/protobufjs/src/converter.js\");\n// Reflection\nprotobuf.ReflectionObject = __webpack_require__(/*! ./object */ \"(ssr)/./node_modules/protobufjs/src/object.js\");\nprotobuf.Namespace = __webpack_require__(/*! ./namespace */ \"(ssr)/./node_modules/protobufjs/src/namespace.js\");\nprotobuf.Root = __webpack_require__(/*! ./root */ \"(ssr)/./node_modules/protobufjs/src/root.js\");\nprotobuf.Enum = __webpack_require__(/*! ./enum */ \"(ssr)/./node_modules/protobufjs/src/enum.js\");\nprotobuf.Type = __webpack_require__(/*! ./type */ \"(ssr)/./node_modules/protobufjs/src/type.js\");\nprotobuf.Field = __webpack_require__(/*! ./field */ \"(ssr)/./node_modules/protobufjs/src/field.js\");\nprotobuf.OneOf = __webpack_require__(/*! ./oneof */ \"(ssr)/./node_modules/protobufjs/src/oneof.js\");\nprotobuf.MapField = __webpack_require__(/*! ./mapfield */ \"(ssr)/./node_modules/protobufjs/src/mapfield.js\");\nprotobuf.Service = __webpack_require__(/*! ./service */ \"(ssr)/./node_modules/protobufjs/src/service.js\");\nprotobuf.Method = __webpack_require__(/*! ./method */ \"(ssr)/./node_modules/protobufjs/src/method.js\");\n// Runtime\nprotobuf.Message = __webpack_require__(/*! ./message */ \"(ssr)/./node_modules/protobufjs/src/message.js\");\nprotobuf.wrappers = __webpack_require__(/*! ./wrappers */ \"(ssr)/./node_modules/protobufjs/src/wrappers.js\");\n// Utility\nprotobuf.types = __webpack_require__(/*! ./types */ \"(ssr)/./node_modules/protobufjs/src/types.js\");\nprotobuf.util = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/protobufjs/src/util.js\");\n// Set up possibly cyclic reflection dependencies\nprotobuf.ReflectionObject._configure(protobuf.Root);\nprotobuf.Namespace._configure(protobuf.Type, protobuf.Service, protobuf.Enum);\nprotobuf.Root._configure(protobuf.Type);\nprotobuf.Field._configure(protobuf.Type);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcHJvdG9idWZqcy9zcmMvaW5kZXgtbGlnaHQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYixJQUFJQSxXQUFXQyxtSEFBMkM7QUFFMURELFNBQVNJLEtBQUssR0FBRztBQUVqQjs7Ozs7OztDQU9DLEdBRUQ7Ozs7Ozs7Q0FPQyxHQUNELFNBQVNDLEtBQUtDLFFBQVEsRUFBRUMsSUFBSSxFQUFFQyxRQUFRO0lBQ2xDLElBQUksT0FBT0QsU0FBUyxZQUFZO1FBQzVCQyxXQUFXRDtRQUNYQSxPQUFPLElBQUlQLFNBQVNTLElBQUk7SUFDNUIsT0FBTyxJQUFJLENBQUNGLE1BQ1JBLE9BQU8sSUFBSVAsU0FBU1MsSUFBSTtJQUM1QixPQUFPRixLQUFLRixJQUFJLENBQUNDLFVBQVVFO0FBQy9CO0FBRUE7Ozs7Ozs7OztDQVNDLEdBQ0Qsa0VBQWtFO0FBRWxFOzs7Ozs7Ozs7Q0FTQyxHQUNELDREQUE0RDtBQUU1RFIsU0FBU0ssSUFBSSxHQUFHQTtBQUVoQjs7Ozs7OztDQU9DLEdBQ0QsU0FBU0ssU0FBU0osUUFBUSxFQUFFQyxJQUFJO0lBQzVCLElBQUksQ0FBQ0EsTUFDREEsT0FBTyxJQUFJUCxTQUFTUyxJQUFJO0lBQzVCLE9BQU9GLEtBQUtHLFFBQVEsQ0FBQ0o7QUFDekI7QUFFQU4sU0FBU1UsUUFBUSxHQUFHQTtBQUVwQixnQkFBZ0I7QUFDaEJWLFNBQVNXLE9BQU8sR0FBWVIsbUJBQU9BLENBQUMsaUVBQVc7QUFDL0NILFNBQVNZLE9BQU8sR0FBWVQsbUJBQU9BLENBQUMsaUVBQVc7QUFDL0NILFNBQVNhLFFBQVEsR0FBV1YsbUJBQU9BLENBQUMsbUVBQVk7QUFDaERILFNBQVNjLFNBQVMsR0FBVVgsbUJBQU9BLENBQUMscUVBQWE7QUFFakQsYUFBYTtBQUNiSCxTQUFTZSxnQkFBZ0IsR0FBR1osbUJBQU9BLENBQUMsK0RBQVU7QUFDOUNILFNBQVNnQixTQUFTLEdBQVViLG1CQUFPQSxDQUFDLHFFQUFhO0FBQ2pESCxTQUFTUyxJQUFJLEdBQWVOLG1CQUFPQSxDQUFDLDJEQUFRO0FBQzVDSCxTQUFTaUIsSUFBSSxHQUFlZCxtQkFBT0EsQ0FBQywyREFBUTtBQUM1Q0gsU0FBU2tCLElBQUksR0FBZWYsbUJBQU9BLENBQUMsMkRBQVE7QUFDNUNILFNBQVNtQixLQUFLLEdBQWNoQixtQkFBT0EsQ0FBQyw2REFBUztBQUM3Q0gsU0FBU29CLEtBQUssR0FBY2pCLG1CQUFPQSxDQUFDLDZEQUFTO0FBQzdDSCxTQUFTcUIsUUFBUSxHQUFXbEIsbUJBQU9BLENBQUMsbUVBQVk7QUFDaERILFNBQVNzQixPQUFPLEdBQVluQixtQkFBT0EsQ0FBQyxpRUFBVztBQUMvQ0gsU0FBU3VCLE1BQU0sR0FBYXBCLG1CQUFPQSxDQUFDLCtEQUFVO0FBRTlDLFVBQVU7QUFDVkgsU0FBU3dCLE9BQU8sR0FBWXJCLG1CQUFPQSxDQUFDLGlFQUFXO0FBQy9DSCxTQUFTeUIsUUFBUSxHQUFXdEIsbUJBQU9BLENBQUMsbUVBQVk7QUFFaEQsVUFBVTtBQUNWSCxTQUFTMEIsS0FBSyxHQUFjdkIsbUJBQU9BLENBQUMsNkRBQVM7QUFDN0NILFNBQVMyQixJQUFJLEdBQWV4QixtQkFBT0EsQ0FBQywyREFBUTtBQUU1QyxpREFBaUQ7QUFDakRILFNBQVNlLGdCQUFnQixDQUFDYSxVQUFVLENBQUM1QixTQUFTUyxJQUFJO0FBQ2xEVCxTQUFTZ0IsU0FBUyxDQUFDWSxVQUFVLENBQUM1QixTQUFTa0IsSUFBSSxFQUFFbEIsU0FBU3NCLE9BQU8sRUFBRXRCLFNBQVNpQixJQUFJO0FBQzVFakIsU0FBU1MsSUFBSSxDQUFDbUIsVUFBVSxDQUFDNUIsU0FBU2tCLElBQUk7QUFDdENsQixTQUFTbUIsS0FBSyxDQUFDUyxVQUFVLENBQUM1QixTQUFTa0IsSUFBSSIsInNvdXJjZXMiOlsid2VicGFjazovL3VuaWNvcm4tY2xhc3Nlcy8uL25vZGVfbW9kdWxlcy9wcm90b2J1ZmpzL3NyYy9pbmRleC1saWdodC5qcz81ZGFmIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIHByb3RvYnVmID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi9pbmRleC1taW5pbWFsXCIpO1xuXG5wcm90b2J1Zi5idWlsZCA9IFwibGlnaHRcIjtcblxuLyoqXG4gKiBBIG5vZGUtc3R5bGUgY2FsbGJhY2sgYXMgdXNlZCBieSB7QGxpbmsgbG9hZH0gYW5kIHtAbGluayBSb290I2xvYWR9LlxuICogQHR5cGVkZWYgTG9hZENhbGxiYWNrXG4gKiBAdHlwZSB7ZnVuY3Rpb259XG4gKiBAcGFyYW0ge0Vycm9yfG51bGx9IGVycm9yIEVycm9yLCBpZiBhbnksIG90aGVyd2lzZSBgbnVsbGBcbiAqIEBwYXJhbSB7Um9vdH0gW3Jvb3RdIFJvb3QsIGlmIHRoZXJlIGhhc24ndCBiZWVuIGFuIGVycm9yXG4gKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICovXG5cbi8qKlxuICogTG9hZHMgb25lIG9yIG11bHRpcGxlIC5wcm90byBvciBwcmVwcm9jZXNzZWQgLmpzb24gZmlsZXMgaW50byBhIGNvbW1vbiByb290IG5hbWVzcGFjZSBhbmQgY2FsbHMgdGhlIGNhbGxiYWNrLlxuICogQHBhcmFtIHtzdHJpbmd8c3RyaW5nW119IGZpbGVuYW1lIE9uZSBvciBtdWx0aXBsZSBmaWxlcyB0byBsb2FkXG4gKiBAcGFyYW0ge1Jvb3R9IHJvb3QgUm9vdCBuYW1lc3BhY2UsIGRlZmF1bHRzIHRvIGNyZWF0ZSBhIG5ldyBvbmUgaWYgb21pdHRlZC5cbiAqIEBwYXJhbSB7TG9hZENhbGxiYWNrfSBjYWxsYmFjayBDYWxsYmFjayBmdW5jdGlvblxuICogQHJldHVybnMge3VuZGVmaW5lZH1cbiAqIEBzZWUge0BsaW5rIFJvb3QjbG9hZH1cbiAqL1xuZnVuY3Rpb24gbG9hZChmaWxlbmFtZSwgcm9vdCwgY2FsbGJhY2spIHtcbiAgICBpZiAodHlwZW9mIHJvb3QgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICBjYWxsYmFjayA9IHJvb3Q7XG4gICAgICAgIHJvb3QgPSBuZXcgcHJvdG9idWYuUm9vdCgpO1xuICAgIH0gZWxzZSBpZiAoIXJvb3QpXG4gICAgICAgIHJvb3QgPSBuZXcgcHJvdG9idWYuUm9vdCgpO1xuICAgIHJldHVybiByb290LmxvYWQoZmlsZW5hbWUsIGNhbGxiYWNrKTtcbn1cblxuLyoqXG4gKiBMb2FkcyBvbmUgb3IgbXVsdGlwbGUgLnByb3RvIG9yIHByZXByb2Nlc3NlZCAuanNvbiBmaWxlcyBpbnRvIGEgY29tbW9uIHJvb3QgbmFtZXNwYWNlIGFuZCBjYWxscyB0aGUgY2FsbGJhY2suXG4gKiBAbmFtZSBsb2FkXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7c3RyaW5nfHN0cmluZ1tdfSBmaWxlbmFtZSBPbmUgb3IgbXVsdGlwbGUgZmlsZXMgdG8gbG9hZFxuICogQHBhcmFtIHtMb2FkQ2FsbGJhY2t9IGNhbGxiYWNrIENhbGxiYWNrIGZ1bmN0aW9uXG4gKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICogQHNlZSB7QGxpbmsgUm9vdCNsb2FkfVxuICogQHZhcmlhdGlvbiAyXG4gKi9cbi8vIGZ1bmN0aW9uIGxvYWQoZmlsZW5hbWU6c3RyaW5nLCBjYWxsYmFjazpMb2FkQ2FsbGJhY2spOnVuZGVmaW5lZFxuXG4vKipcbiAqIExvYWRzIG9uZSBvciBtdWx0aXBsZSAucHJvdG8gb3IgcHJlcHJvY2Vzc2VkIC5qc29uIGZpbGVzIGludG8gYSBjb21tb24gcm9vdCBuYW1lc3BhY2UgYW5kIHJldHVybnMgYSBwcm9taXNlLlxuICogQG5hbWUgbG9hZFxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge3N0cmluZ3xzdHJpbmdbXX0gZmlsZW5hbWUgT25lIG9yIG11bHRpcGxlIGZpbGVzIHRvIGxvYWRcbiAqIEBwYXJhbSB7Um9vdH0gW3Jvb3RdIFJvb3QgbmFtZXNwYWNlLCBkZWZhdWx0cyB0byBjcmVhdGUgYSBuZXcgb25lIGlmIG9taXR0ZWQuXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxSb290Pn0gUHJvbWlzZVxuICogQHNlZSB7QGxpbmsgUm9vdCNsb2FkfVxuICogQHZhcmlhdGlvbiAzXG4gKi9cbi8vIGZ1bmN0aW9uIGxvYWQoZmlsZW5hbWU6c3RyaW5nLCBbcm9vdDpSb290XSk6UHJvbWlzZTxSb290PlxuXG5wcm90b2J1Zi5sb2FkID0gbG9hZDtcblxuLyoqXG4gKiBTeW5jaHJvbm91c2x5IGxvYWRzIG9uZSBvciBtdWx0aXBsZSAucHJvdG8gb3IgcHJlcHJvY2Vzc2VkIC5qc29uIGZpbGVzIGludG8gYSBjb21tb24gcm9vdCBuYW1lc3BhY2UgKG5vZGUgb25seSkuXG4gKiBAcGFyYW0ge3N0cmluZ3xzdHJpbmdbXX0gZmlsZW5hbWUgT25lIG9yIG11bHRpcGxlIGZpbGVzIHRvIGxvYWRcbiAqIEBwYXJhbSB7Um9vdH0gW3Jvb3RdIFJvb3QgbmFtZXNwYWNlLCBkZWZhdWx0cyB0byBjcmVhdGUgYSBuZXcgb25lIGlmIG9taXR0ZWQuXG4gKiBAcmV0dXJucyB7Um9vdH0gUm9vdCBuYW1lc3BhY2VcbiAqIEB0aHJvd3Mge0Vycm9yfSBJZiBzeW5jaHJvbm91cyBmZXRjaGluZyBpcyBub3Qgc3VwcG9ydGVkIChpLmUuIGluIGJyb3dzZXJzKSBvciBpZiBhIGZpbGUncyBzeW50YXggaXMgaW52YWxpZFxuICogQHNlZSB7QGxpbmsgUm9vdCNsb2FkU3luY31cbiAqL1xuZnVuY3Rpb24gbG9hZFN5bmMoZmlsZW5hbWUsIHJvb3QpIHtcbiAgICBpZiAoIXJvb3QpXG4gICAgICAgIHJvb3QgPSBuZXcgcHJvdG9idWYuUm9vdCgpO1xuICAgIHJldHVybiByb290LmxvYWRTeW5jKGZpbGVuYW1lKTtcbn1cblxucHJvdG9idWYubG9hZFN5bmMgPSBsb2FkU3luYztcblxuLy8gU2VyaWFsaXphdGlvblxucHJvdG9idWYuZW5jb2RlciAgICAgICAgICA9IHJlcXVpcmUoXCIuL2VuY29kZXJcIik7XG5wcm90b2J1Zi5kZWNvZGVyICAgICAgICAgID0gcmVxdWlyZShcIi4vZGVjb2RlclwiKTtcbnByb3RvYnVmLnZlcmlmaWVyICAgICAgICAgPSByZXF1aXJlKFwiLi92ZXJpZmllclwiKTtcbnByb3RvYnVmLmNvbnZlcnRlciAgICAgICAgPSByZXF1aXJlKFwiLi9jb252ZXJ0ZXJcIik7XG5cbi8vIFJlZmxlY3Rpb25cbnByb3RvYnVmLlJlZmxlY3Rpb25PYmplY3QgPSByZXF1aXJlKFwiLi9vYmplY3RcIik7XG5wcm90b2J1Zi5OYW1lc3BhY2UgICAgICAgID0gcmVxdWlyZShcIi4vbmFtZXNwYWNlXCIpO1xucHJvdG9idWYuUm9vdCAgICAgICAgICAgICA9IHJlcXVpcmUoXCIuL3Jvb3RcIik7XG5wcm90b2J1Zi5FbnVtICAgICAgICAgICAgID0gcmVxdWlyZShcIi4vZW51bVwiKTtcbnByb3RvYnVmLlR5cGUgICAgICAgICAgICAgPSByZXF1aXJlKFwiLi90eXBlXCIpO1xucHJvdG9idWYuRmllbGQgICAgICAgICAgICA9IHJlcXVpcmUoXCIuL2ZpZWxkXCIpO1xucHJvdG9idWYuT25lT2YgICAgICAgICAgICA9IHJlcXVpcmUoXCIuL29uZW9mXCIpO1xucHJvdG9idWYuTWFwRmllbGQgICAgICAgICA9IHJlcXVpcmUoXCIuL21hcGZpZWxkXCIpO1xucHJvdG9idWYuU2VydmljZSAgICAgICAgICA9IHJlcXVpcmUoXCIuL3NlcnZpY2VcIik7XG5wcm90b2J1Zi5NZXRob2QgICAgICAgICAgID0gcmVxdWlyZShcIi4vbWV0aG9kXCIpO1xuXG4vLyBSdW50aW1lXG5wcm90b2J1Zi5NZXNzYWdlICAgICAgICAgID0gcmVxdWlyZShcIi4vbWVzc2FnZVwiKTtcbnByb3RvYnVmLndyYXBwZXJzICAgICAgICAgPSByZXF1aXJlKFwiLi93cmFwcGVyc1wiKTtcblxuLy8gVXRpbGl0eVxucHJvdG9idWYudHlwZXMgICAgICAgICAgICA9IHJlcXVpcmUoXCIuL3R5cGVzXCIpO1xucHJvdG9idWYudXRpbCAgICAgICAgICAgICA9IHJlcXVpcmUoXCIuL3V0aWxcIik7XG5cbi8vIFNldCB1cCBwb3NzaWJseSBjeWNsaWMgcmVmbGVjdGlvbiBkZXBlbmRlbmNpZXNcbnByb3RvYnVmLlJlZmxlY3Rpb25PYmplY3QuX2NvbmZpZ3VyZShwcm90b2J1Zi5Sb290KTtcbnByb3RvYnVmLk5hbWVzcGFjZS5fY29uZmlndXJlKHByb3RvYnVmLlR5cGUsIHByb3RvYnVmLlNlcnZpY2UsIHByb3RvYnVmLkVudW0pO1xucHJvdG9idWYuUm9vdC5fY29uZmlndXJlKHByb3RvYnVmLlR5cGUpO1xucHJvdG9idWYuRmllbGQuX2NvbmZpZ3VyZShwcm90b2J1Zi5UeXBlKTtcbiJdLCJuYW1lcyI6WyJwcm90b2J1ZiIsIm1vZHVsZSIsImV4cG9ydHMiLCJyZXF1aXJlIiwiYnVpbGQiLCJsb2FkIiwiZmlsZW5hbWUiLCJyb290IiwiY2FsbGJhY2siLCJSb290IiwibG9hZFN5bmMiLCJlbmNvZGVyIiwiZGVjb2RlciIsInZlcmlmaWVyIiwiY29udmVydGVyIiwiUmVmbGVjdGlvbk9iamVjdCIsIk5hbWVzcGFjZSIsIkVudW0iLCJUeXBlIiwiRmllbGQiLCJPbmVPZiIsIk1hcEZpZWxkIiwiU2VydmljZSIsIk1ldGhvZCIsIk1lc3NhZ2UiLCJ3cmFwcGVycyIsInR5cGVzIiwidXRpbCIsIl9jb25maWd1cmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protobufjs/src/index-light.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/protobufjs/src/index-minimal.js":
/*!******************************************************!*\
  !*** ./node_modules/protobufjs/src/index-minimal.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar protobuf = exports;\n/**\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\n * @name build\n * @type {string}\n * @const\n */ protobuf.build = \"minimal\";\n// Serialization\nprotobuf.Writer = __webpack_require__(/*! ./writer */ \"(ssr)/./node_modules/protobufjs/src/writer.js\");\nprotobuf.BufferWriter = __webpack_require__(/*! ./writer_buffer */ \"(ssr)/./node_modules/protobufjs/src/writer_buffer.js\");\nprotobuf.Reader = __webpack_require__(/*! ./reader */ \"(ssr)/./node_modules/protobufjs/src/reader.js\");\nprotobuf.BufferReader = __webpack_require__(/*! ./reader_buffer */ \"(ssr)/./node_modules/protobufjs/src/reader_buffer.js\");\n// Utility\nprotobuf.util = __webpack_require__(/*! ./util/minimal */ \"(ssr)/./node_modules/protobufjs/src/util/minimal.js\");\nprotobuf.rpc = __webpack_require__(/*! ./rpc */ \"(ssr)/./node_modules/protobufjs/src/rpc.js\");\nprotobuf.roots = __webpack_require__(/*! ./roots */ \"(ssr)/./node_modules/protobufjs/src/roots.js\");\nprotobuf.configure = configure;\n/* istanbul ignore next */ /**\n * Reconfigures the library according to the environment.\n * @returns {undefined}\n */ function configure() {\n    protobuf.util._configure();\n    protobuf.Writer._configure(protobuf.BufferWriter);\n    protobuf.Reader._configure(protobuf.BufferReader);\n}\n// Set up buffer utility according to the environment\nconfigure();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcHJvdG9idWZqcy9zcmMvaW5kZXgtbWluaW1hbC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLElBQUlBLFdBQVdDO0FBRWY7Ozs7O0NBS0MsR0FDREQsU0FBU0UsS0FBSyxHQUFHO0FBRWpCLGdCQUFnQjtBQUNoQkYsU0FBU0csTUFBTSxHQUFTQyxtQkFBT0EsQ0FBQywrREFBVTtBQUMxQ0osU0FBU0ssWUFBWSxHQUFHRCxtQkFBT0EsQ0FBQyw2RUFBaUI7QUFDakRKLFNBQVNNLE1BQU0sR0FBU0YsbUJBQU9BLENBQUMsK0RBQVU7QUFDMUNKLFNBQVNPLFlBQVksR0FBR0gsbUJBQU9BLENBQUMsNkVBQWlCO0FBRWpELFVBQVU7QUFDVkosU0FBU1EsSUFBSSxHQUFXSixtQkFBT0EsQ0FBQywyRUFBZ0I7QUFDaERKLFNBQVNTLEdBQUcsR0FBWUwsbUJBQU9BLENBQUMseURBQU87QUFDdkNKLFNBQVNVLEtBQUssR0FBVU4sbUJBQU9BLENBQUMsNkRBQVM7QUFDekNKLFNBQVNXLFNBQVMsR0FBTUE7QUFFeEIsd0JBQXdCLEdBQ3hCOzs7Q0FHQyxHQUNELFNBQVNBO0lBQ0xYLFNBQVNRLElBQUksQ0FBQ0ksVUFBVTtJQUN4QlosU0FBU0csTUFBTSxDQUFDUyxVQUFVLENBQUNaLFNBQVNLLFlBQVk7SUFDaERMLFNBQVNNLE1BQU0sQ0FBQ00sVUFBVSxDQUFDWixTQUFTTyxZQUFZO0FBQ3BEO0FBRUEscURBQXFEO0FBQ3JESSIsInNvdXJjZXMiOlsid2VicGFjazovL3VuaWNvcm4tY2xhc3Nlcy8uL25vZGVfbW9kdWxlcy9wcm90b2J1ZmpzL3NyYy9pbmRleC1taW5pbWFsLmpzPzk0M2YiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgcHJvdG9idWYgPSBleHBvcnRzO1xuXG4vKipcbiAqIEJ1aWxkIHR5cGUsIG9uZSBvZiBgXCJmdWxsXCJgLCBgXCJsaWdodFwiYCBvciBgXCJtaW5pbWFsXCJgLlxuICogQG5hbWUgYnVpbGRcbiAqIEB0eXBlIHtzdHJpbmd9XG4gKiBAY29uc3RcbiAqL1xucHJvdG9idWYuYnVpbGQgPSBcIm1pbmltYWxcIjtcblxuLy8gU2VyaWFsaXphdGlvblxucHJvdG9idWYuV3JpdGVyICAgICAgID0gcmVxdWlyZShcIi4vd3JpdGVyXCIpO1xucHJvdG9idWYuQnVmZmVyV3JpdGVyID0gcmVxdWlyZShcIi4vd3JpdGVyX2J1ZmZlclwiKTtcbnByb3RvYnVmLlJlYWRlciAgICAgICA9IHJlcXVpcmUoXCIuL3JlYWRlclwiKTtcbnByb3RvYnVmLkJ1ZmZlclJlYWRlciA9IHJlcXVpcmUoXCIuL3JlYWRlcl9idWZmZXJcIik7XG5cbi8vIFV0aWxpdHlcbnByb3RvYnVmLnV0aWwgICAgICAgICA9IHJlcXVpcmUoXCIuL3V0aWwvbWluaW1hbFwiKTtcbnByb3RvYnVmLnJwYyAgICAgICAgICA9IHJlcXVpcmUoXCIuL3JwY1wiKTtcbnByb3RvYnVmLnJvb3RzICAgICAgICA9IHJlcXVpcmUoXCIuL3Jvb3RzXCIpO1xucHJvdG9idWYuY29uZmlndXJlICAgID0gY29uZmlndXJlO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuLyoqXG4gKiBSZWNvbmZpZ3VyZXMgdGhlIGxpYnJhcnkgYWNjb3JkaW5nIHRvIHRoZSBlbnZpcm9ubWVudC5cbiAqIEByZXR1cm5zIHt1bmRlZmluZWR9XG4gKi9cbmZ1bmN0aW9uIGNvbmZpZ3VyZSgpIHtcbiAgICBwcm90b2J1Zi51dGlsLl9jb25maWd1cmUoKTtcbiAgICBwcm90b2J1Zi5Xcml0ZXIuX2NvbmZpZ3VyZShwcm90b2J1Zi5CdWZmZXJXcml0ZXIpO1xuICAgIHByb3RvYnVmLlJlYWRlci5fY29uZmlndXJlKHByb3RvYnVmLkJ1ZmZlclJlYWRlcik7XG59XG5cbi8vIFNldCB1cCBidWZmZXIgdXRpbGl0eSBhY2NvcmRpbmcgdG8gdGhlIGVudmlyb25tZW50XG5jb25maWd1cmUoKTtcbiJdLCJuYW1lcyI6WyJwcm90b2J1ZiIsImV4cG9ydHMiLCJidWlsZCIsIldyaXRlciIsInJlcXVpcmUiLCJCdWZmZXJXcml0ZXIiLCJSZWFkZXIiLCJCdWZmZXJSZWFkZXIiLCJ1dGlsIiwicnBjIiwicm9vdHMiLCJjb25maWd1cmUiLCJfY29uZmlndXJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protobufjs/src/index-minimal.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/protobufjs/src/index.js":
/*!**********************************************!*\
  !*** ./node_modules/protobufjs/src/index.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar protobuf = module.exports = __webpack_require__(/*! ./index-light */ \"(ssr)/./node_modules/protobufjs/src/index-light.js\");\nprotobuf.build = \"full\";\n// Parser\nprotobuf.tokenize = __webpack_require__(/*! ./tokenize */ \"(ssr)/./node_modules/protobufjs/src/tokenize.js\");\nprotobuf.parse = __webpack_require__(/*! ./parse */ \"(ssr)/./node_modules/protobufjs/src/parse.js\");\nprotobuf.common = __webpack_require__(/*! ./common */ \"(ssr)/./node_modules/protobufjs/src/common.js\");\n// Configure parser\nprotobuf.Root._configure(protobuf.Type, protobuf.parse, protobuf.common);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcHJvdG9idWZqcy9zcmMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYixJQUFJQSxXQUFXQywrR0FBeUM7QUFFeERELFNBQVNJLEtBQUssR0FBRztBQUVqQixTQUFTO0FBQ1RKLFNBQVNLLFFBQVEsR0FBV0YsbUJBQU9BLENBQUMsbUVBQVk7QUFDaERILFNBQVNNLEtBQUssR0FBY0gsbUJBQU9BLENBQUMsNkRBQVM7QUFDN0NILFNBQVNPLE1BQU0sR0FBYUosbUJBQU9BLENBQUMsK0RBQVU7QUFFOUMsbUJBQW1CO0FBQ25CSCxTQUFTUSxJQUFJLENBQUNDLFVBQVUsQ0FBQ1QsU0FBU1UsSUFBSSxFQUFFVixTQUFTTSxLQUFLLEVBQUVOLFNBQVNPLE1BQU0iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91bmljb3JuLWNsYXNzZXMvLi9ub2RlX21vZHVsZXMvcHJvdG9idWZqcy9zcmMvaW5kZXguanM/NWE0YyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBwcm90b2J1ZiA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4vaW5kZXgtbGlnaHRcIik7XG5cbnByb3RvYnVmLmJ1aWxkID0gXCJmdWxsXCI7XG5cbi8vIFBhcnNlclxucHJvdG9idWYudG9rZW5pemUgICAgICAgICA9IHJlcXVpcmUoXCIuL3Rva2VuaXplXCIpO1xucHJvdG9idWYucGFyc2UgICAgICAgICAgICA9IHJlcXVpcmUoXCIuL3BhcnNlXCIpO1xucHJvdG9idWYuY29tbW9uICAgICAgICAgICA9IHJlcXVpcmUoXCIuL2NvbW1vblwiKTtcblxuLy8gQ29uZmlndXJlIHBhcnNlclxucHJvdG9idWYuUm9vdC5fY29uZmlndXJlKHByb3RvYnVmLlR5cGUsIHByb3RvYnVmLnBhcnNlLCBwcm90b2J1Zi5jb21tb24pO1xuIl0sIm5hbWVzIjpbInByb3RvYnVmIiwibW9kdWxlIiwiZXhwb3J0cyIsInJlcXVpcmUiLCJidWlsZCIsInRva2VuaXplIiwicGFyc2UiLCJjb21tb24iLCJSb290IiwiX2NvbmZpZ3VyZSIsIlR5cGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protobufjs/src/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/protobufjs/src/mapfield.js":
/*!*************************************************!*\
  !*** ./node_modules/protobufjs/src/mapfield.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = MapField;\n// extends Field\nvar Field = __webpack_require__(/*! ./field */ \"(ssr)/./node_modules/protobufjs/src/field.js\");\n((MapField.prototype = Object.create(Field.prototype)).constructor = MapField).className = \"MapField\";\nvar types = __webpack_require__(/*! ./types */ \"(ssr)/./node_modules/protobufjs/src/types.js\"), util = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/protobufjs/src/util.js\");\n/**\n * Constructs a new map field instance.\n * @classdesc Reflected map field.\n * @extends FieldBase\n * @constructor\n * @param {string} name Unique name within its namespace\n * @param {number} id Unique id within its namespace\n * @param {string} keyType Key type\n * @param {string} type Value type\n * @param {Object.<string,*>} [options] Declared options\n * @param {string} [comment] Comment associated with this field\n */ function MapField(name, id, keyType, type, options, comment) {\n    Field.call(this, name, id, type, undefined, undefined, options, comment);\n    /* istanbul ignore if */ if (!util.isString(keyType)) throw TypeError(\"keyType must be a string\");\n    /**\n     * Key type.\n     * @type {string}\n     */ this.keyType = keyType; // toJSON, marker\n    /**\n     * Resolved key type if not a basic type.\n     * @type {ReflectionObject|null}\n     */ this.resolvedKeyType = null;\n    // Overrides Field#map\n    this.map = true;\n}\n/**\n * Map field descriptor.\n * @interface IMapField\n * @extends {IField}\n * @property {string} keyType Key type\n */ /**\n * Extension map field descriptor.\n * @interface IExtensionMapField\n * @extends IMapField\n * @property {string} extend Extended type\n */ /**\n * Constructs a map field from a map field descriptor.\n * @param {string} name Field name\n * @param {IMapField} json Map field descriptor\n * @returns {MapField} Created map field\n * @throws {TypeError} If arguments are invalid\n */ MapField.fromJSON = function fromJSON(name, json) {\n    return new MapField(name, json.id, json.keyType, json.type, json.options, json.comment);\n};\n/**\n * Converts this map field to a map field descriptor.\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {IMapField} Map field descriptor\n */ MapField.prototype.toJSON = function toJSON(toJSONOptions) {\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n    return util.toObject([\n        \"keyType\",\n        this.keyType,\n        \"type\",\n        this.type,\n        \"id\",\n        this.id,\n        \"extend\",\n        this.extend,\n        \"options\",\n        this.options,\n        \"comment\",\n        keepComments ? this.comment : undefined\n    ]);\n};\n/**\n * @override\n */ MapField.prototype.resolve = function resolve() {\n    if (this.resolved) return this;\n    // Besides a value type, map fields have a key type that may be \"any scalar type except for floating point types and bytes\"\n    if (types.mapKey[this.keyType] === undefined) throw Error(\"invalid key type: \" + this.keyType);\n    return Field.prototype.resolve.call(this);\n};\n/**\n * Map field decorator (TypeScript).\n * @name MapField.d\n * @function\n * @param {number} fieldId Field id\n * @param {\"int32\"|\"uint32\"|\"sint32\"|\"fixed32\"|\"sfixed32\"|\"int64\"|\"uint64\"|\"sint64\"|\"fixed64\"|\"sfixed64\"|\"bool\"|\"string\"} fieldKeyType Field key type\n * @param {\"double\"|\"float\"|\"int32\"|\"uint32\"|\"sint32\"|\"fixed32\"|\"sfixed32\"|\"int64\"|\"uint64\"|\"sint64\"|\"fixed64\"|\"sfixed64\"|\"bool\"|\"string\"|\"bytes\"|Object|Constructor<{}>} fieldValueType Field value type\n * @returns {FieldDecorator} Decorator function\n * @template T extends { [key: string]: number | Long | string | boolean | Uint8Array | Buffer | number[] | Message<{}> }\n */ MapField.d = function decorateMapField(fieldId, fieldKeyType, fieldValueType) {\n    // submessage value: decorate the submessage and use its name as the type\n    if (typeof fieldValueType === \"function\") fieldValueType = util.decorateType(fieldValueType).name;\n    else if (fieldValueType && typeof fieldValueType === \"object\") fieldValueType = util.decorateEnum(fieldValueType).name;\n    return function mapFieldDecorator(prototype, fieldName) {\n        util.decorateType(prototype.constructor).add(new MapField(fieldName, fieldId, fieldKeyType, fieldValueType));\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protobufjs/src/mapfield.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/protobufjs/src/message.js":
/*!************************************************!*\
  !*** ./node_modules/protobufjs/src/message.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = Message;\nvar util = __webpack_require__(/*! ./util/minimal */ \"(ssr)/./node_modules/protobufjs/src/util/minimal.js\");\n/**\n * Constructs a new message instance.\n * @classdesc Abstract runtime message.\n * @constructor\n * @param {Properties<T>} [properties] Properties to set\n * @template T extends object = object\n */ function Message(properties) {\n    // not used internally\n    if (properties) for(var keys = Object.keys(properties), i = 0; i < keys.length; ++i)this[keys[i]] = properties[keys[i]];\n}\n/**\n * Reference to the reflected type.\n * @name Message.$type\n * @type {Type}\n * @readonly\n */ /**\n * Reference to the reflected type.\n * @name Message#$type\n * @type {Type}\n * @readonly\n */ /*eslint-disable valid-jsdoc*/ /**\n * Creates a new message of this type using the specified properties.\n * @param {Object.<string,*>} [properties] Properties to set\n * @returns {Message<T>} Message instance\n * @template T extends Message<T>\n * @this Constructor<T>\n */ Message.create = function create(properties) {\n    return this.$type.create(properties);\n};\n/**\n * Encodes a message of this type.\n * @param {T|Object.<string,*>} message Message to encode\n * @param {Writer} [writer] Writer to use\n * @returns {Writer} Writer\n * @template T extends Message<T>\n * @this Constructor<T>\n */ Message.encode = function encode(message, writer) {\n    return this.$type.encode(message, writer);\n};\n/**\n * Encodes a message of this type preceeded by its length as a varint.\n * @param {T|Object.<string,*>} message Message to encode\n * @param {Writer} [writer] Writer to use\n * @returns {Writer} Writer\n * @template T extends Message<T>\n * @this Constructor<T>\n */ Message.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.$type.encodeDelimited(message, writer);\n};\n/**\n * Decodes a message of this type.\n * @name Message.decode\n * @function\n * @param {Reader|Uint8Array} reader Reader or buffer to decode\n * @returns {T} Decoded message\n * @template T extends Message<T>\n * @this Constructor<T>\n */ Message.decode = function decode(reader) {\n    return this.$type.decode(reader);\n};\n/**\n * Decodes a message of this type preceeded by its length as a varint.\n * @name Message.decodeDelimited\n * @function\n * @param {Reader|Uint8Array} reader Reader or buffer to decode\n * @returns {T} Decoded message\n * @template T extends Message<T>\n * @this Constructor<T>\n */ Message.decodeDelimited = function decodeDelimited(reader) {\n    return this.$type.decodeDelimited(reader);\n};\n/**\n * Verifies a message of this type.\n * @name Message.verify\n * @function\n * @param {Object.<string,*>} message Plain object to verify\n * @returns {string|null} `null` if valid, otherwise the reason why it is not\n */ Message.verify = function verify(message) {\n    return this.$type.verify(message);\n};\n/**\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\n * @param {Object.<string,*>} object Plain object\n * @returns {T} Message instance\n * @template T extends Message<T>\n * @this Constructor<T>\n */ Message.fromObject = function fromObject(object) {\n    return this.$type.fromObject(object);\n};\n/**\n * Creates a plain object from a message of this type. Also converts values to other types if specified.\n * @param {T} message Message instance\n * @param {IConversionOptions} [options] Conversion options\n * @returns {Object.<string,*>} Plain object\n * @template T extends Message<T>\n * @this Constructor<T>\n */ Message.toObject = function toObject(message, options) {\n    return this.$type.toObject(message, options);\n};\n/**\n * Converts this message to JSON.\n * @returns {Object.<string,*>} JSON object\n */ Message.prototype.toJSON = function toJSON() {\n    return this.$type.toObject(this, util.toJSONOptions);\n}; /*eslint-enable valid-jsdoc*/ \n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcHJvdG9idWZqcy9zcmMvbWVzc2FnZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSxPQUFPQyxPQUFPLEdBQUdDO0FBRWpCLElBQUlDLE9BQU9DLG1CQUFPQSxDQUFDLDJFQUFnQjtBQUVuQzs7Ozs7O0NBTUMsR0FDRCxTQUFTRixRQUFRRyxVQUFVO0lBQ3ZCLHNCQUFzQjtJQUN0QixJQUFJQSxZQUNBLElBQUssSUFBSUMsT0FBT0MsT0FBT0QsSUFBSSxDQUFDRCxhQUFhRyxJQUFJLEdBQUdBLElBQUlGLEtBQUtHLE1BQU0sRUFBRSxFQUFFRCxFQUMvRCxJQUFJLENBQUNGLElBQUksQ0FBQ0UsRUFBRSxDQUFDLEdBQUdILFVBQVUsQ0FBQ0MsSUFBSSxDQUFDRSxFQUFFLENBQUM7QUFDL0M7QUFFQTs7Ozs7Q0FLQyxHQUVEOzs7OztDQUtDLEdBRUQsNEJBQTRCLEdBRTVCOzs7Ozs7Q0FNQyxHQUNETixRQUFRUSxNQUFNLEdBQUcsU0FBU0EsT0FBT0wsVUFBVTtJQUN2QyxPQUFPLElBQUksQ0FBQ00sS0FBSyxDQUFDRCxNQUFNLENBQUNMO0FBQzdCO0FBRUE7Ozs7Ozs7Q0FPQyxHQUNESCxRQUFRVSxNQUFNLEdBQUcsU0FBU0EsT0FBT0MsT0FBTyxFQUFFQyxNQUFNO0lBQzVDLE9BQU8sSUFBSSxDQUFDSCxLQUFLLENBQUNDLE1BQU0sQ0FBQ0MsU0FBU0M7QUFDdEM7QUFFQTs7Ozs7OztDQU9DLEdBQ0RaLFFBQVFhLGVBQWUsR0FBRyxTQUFTQSxnQkFBZ0JGLE9BQU8sRUFBRUMsTUFBTTtJQUM5RCxPQUFPLElBQUksQ0FBQ0gsS0FBSyxDQUFDSSxlQUFlLENBQUNGLFNBQVNDO0FBQy9DO0FBRUE7Ozs7Ozs7O0NBUUMsR0FDRFosUUFBUWMsTUFBTSxHQUFHLFNBQVNBLE9BQU9DLE1BQU07SUFDbkMsT0FBTyxJQUFJLENBQUNOLEtBQUssQ0FBQ0ssTUFBTSxDQUFDQztBQUM3QjtBQUVBOzs7Ozs7OztDQVFDLEdBQ0RmLFFBQVFnQixlQUFlLEdBQUcsU0FBU0EsZ0JBQWdCRCxNQUFNO0lBQ3JELE9BQU8sSUFBSSxDQUFDTixLQUFLLENBQUNPLGVBQWUsQ0FBQ0Q7QUFDdEM7QUFFQTs7Ozs7O0NBTUMsR0FDRGYsUUFBUWlCLE1BQU0sR0FBRyxTQUFTQSxPQUFPTixPQUFPO0lBQ3BDLE9BQU8sSUFBSSxDQUFDRixLQUFLLENBQUNRLE1BQU0sQ0FBQ047QUFDN0I7QUFFQTs7Ozs7O0NBTUMsR0FDRFgsUUFBUWtCLFVBQVUsR0FBRyxTQUFTQSxXQUFXQyxNQUFNO0lBQzNDLE9BQU8sSUFBSSxDQUFDVixLQUFLLENBQUNTLFVBQVUsQ0FBQ0M7QUFDakM7QUFFQTs7Ozs7OztDQU9DLEdBQ0RuQixRQUFRb0IsUUFBUSxHQUFHLFNBQVNBLFNBQVNULE9BQU8sRUFBRVUsT0FBTztJQUNqRCxPQUFPLElBQUksQ0FBQ1osS0FBSyxDQUFDVyxRQUFRLENBQUNULFNBQVNVO0FBQ3hDO0FBRUE7OztDQUdDLEdBQ0RyQixRQUFRc0IsU0FBUyxDQUFDQyxNQUFNLEdBQUcsU0FBU0E7SUFDaEMsT0FBTyxJQUFJLENBQUNkLEtBQUssQ0FBQ1csUUFBUSxDQUFDLElBQUksRUFBRW5CLEtBQUt1QixhQUFhO0FBQ3ZELEdBRUEsMkJBQTJCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdW5pY29ybi1jbGFzc2VzLy4vbm9kZV9tb2R1bGVzL3Byb3RvYnVmanMvc3JjL21lc3NhZ2UuanM/OGY4ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbm1vZHVsZS5leHBvcnRzID0gTWVzc2FnZTtcblxudmFyIHV0aWwgPSByZXF1aXJlKFwiLi91dGlsL21pbmltYWxcIik7XG5cbi8qKlxuICogQ29uc3RydWN0cyBhIG5ldyBtZXNzYWdlIGluc3RhbmNlLlxuICogQGNsYXNzZGVzYyBBYnN0cmFjdCBydW50aW1lIG1lc3NhZ2UuXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7UHJvcGVydGllczxUPn0gW3Byb3BlcnRpZXNdIFByb3BlcnRpZXMgdG8gc2V0XG4gKiBAdGVtcGxhdGUgVCBleHRlbmRzIG9iamVjdCA9IG9iamVjdFxuICovXG5mdW5jdGlvbiBNZXNzYWdlKHByb3BlcnRpZXMpIHtcbiAgICAvLyBub3QgdXNlZCBpbnRlcm5hbGx5XG4gICAgaWYgKHByb3BlcnRpZXMpXG4gICAgICAgIGZvciAodmFyIGtleXMgPSBPYmplY3Qua2V5cyhwcm9wZXJ0aWVzKSwgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgdGhpc1trZXlzW2ldXSA9IHByb3BlcnRpZXNba2V5c1tpXV07XG59XG5cbi8qKlxuICogUmVmZXJlbmNlIHRvIHRoZSByZWZsZWN0ZWQgdHlwZS5cbiAqIEBuYW1lIE1lc3NhZ2UuJHR5cGVcbiAqIEB0eXBlIHtUeXBlfVxuICogQHJlYWRvbmx5XG4gKi9cblxuLyoqXG4gKiBSZWZlcmVuY2UgdG8gdGhlIHJlZmxlY3RlZCB0eXBlLlxuICogQG5hbWUgTWVzc2FnZSMkdHlwZVxuICogQHR5cGUge1R5cGV9XG4gKiBAcmVhZG9ubHlcbiAqL1xuXG4vKmVzbGludC1kaXNhYmxlIHZhbGlkLWpzZG9jKi9cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IG1lc3NhZ2Ugb2YgdGhpcyB0eXBlIHVzaW5nIHRoZSBzcGVjaWZpZWQgcHJvcGVydGllcy5cbiAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsKj59IFtwcm9wZXJ0aWVzXSBQcm9wZXJ0aWVzIHRvIHNldFxuICogQHJldHVybnMge01lc3NhZ2U8VD59IE1lc3NhZ2UgaW5zdGFuY2VcbiAqIEB0ZW1wbGF0ZSBUIGV4dGVuZHMgTWVzc2FnZTxUPlxuICogQHRoaXMgQ29uc3RydWN0b3I8VD5cbiAqL1xuTWVzc2FnZS5jcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUocHJvcGVydGllcykge1xuICAgIHJldHVybiB0aGlzLiR0eXBlLmNyZWF0ZShwcm9wZXJ0aWVzKTtcbn07XG5cbi8qKlxuICogRW5jb2RlcyBhIG1lc3NhZ2Ugb2YgdGhpcyB0eXBlLlxuICogQHBhcmFtIHtUfE9iamVjdC48c3RyaW5nLCo+fSBtZXNzYWdlIE1lc3NhZ2UgdG8gZW5jb2RlXG4gKiBAcGFyYW0ge1dyaXRlcn0gW3dyaXRlcl0gV3JpdGVyIHRvIHVzZVxuICogQHJldHVybnMge1dyaXRlcn0gV3JpdGVyXG4gKiBAdGVtcGxhdGUgVCBleHRlbmRzIE1lc3NhZ2U8VD5cbiAqIEB0aGlzIENvbnN0cnVjdG9yPFQ+XG4gKi9cbk1lc3NhZ2UuZW5jb2RlID0gZnVuY3Rpb24gZW5jb2RlKG1lc3NhZ2UsIHdyaXRlcikge1xuICAgIHJldHVybiB0aGlzLiR0eXBlLmVuY29kZShtZXNzYWdlLCB3cml0ZXIpO1xufTtcblxuLyoqXG4gKiBFbmNvZGVzIGEgbWVzc2FnZSBvZiB0aGlzIHR5cGUgcHJlY2VlZGVkIGJ5IGl0cyBsZW5ndGggYXMgYSB2YXJpbnQuXG4gKiBAcGFyYW0ge1R8T2JqZWN0LjxzdHJpbmcsKj59IG1lc3NhZ2UgTWVzc2FnZSB0byBlbmNvZGVcbiAqIEBwYXJhbSB7V3JpdGVyfSBbd3JpdGVyXSBXcml0ZXIgdG8gdXNlXG4gKiBAcmV0dXJucyB7V3JpdGVyfSBXcml0ZXJcbiAqIEB0ZW1wbGF0ZSBUIGV4dGVuZHMgTWVzc2FnZTxUPlxuICogQHRoaXMgQ29uc3RydWN0b3I8VD5cbiAqL1xuTWVzc2FnZS5lbmNvZGVEZWxpbWl0ZWQgPSBmdW5jdGlvbiBlbmNvZGVEZWxpbWl0ZWQobWVzc2FnZSwgd3JpdGVyKSB7XG4gICAgcmV0dXJuIHRoaXMuJHR5cGUuZW5jb2RlRGVsaW1pdGVkKG1lc3NhZ2UsIHdyaXRlcik7XG59O1xuXG4vKipcbiAqIERlY29kZXMgYSBtZXNzYWdlIG9mIHRoaXMgdHlwZS5cbiAqIEBuYW1lIE1lc3NhZ2UuZGVjb2RlXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7UmVhZGVyfFVpbnQ4QXJyYXl9IHJlYWRlciBSZWFkZXIgb3IgYnVmZmVyIHRvIGRlY29kZVxuICogQHJldHVybnMge1R9IERlY29kZWQgbWVzc2FnZVxuICogQHRlbXBsYXRlIFQgZXh0ZW5kcyBNZXNzYWdlPFQ+XG4gKiBAdGhpcyBDb25zdHJ1Y3RvcjxUPlxuICovXG5NZXNzYWdlLmRlY29kZSA9IGZ1bmN0aW9uIGRlY29kZShyZWFkZXIpIHtcbiAgICByZXR1cm4gdGhpcy4kdHlwZS5kZWNvZGUocmVhZGVyKTtcbn07XG5cbi8qKlxuICogRGVjb2RlcyBhIG1lc3NhZ2Ugb2YgdGhpcyB0eXBlIHByZWNlZWRlZCBieSBpdHMgbGVuZ3RoIGFzIGEgdmFyaW50LlxuICogQG5hbWUgTWVzc2FnZS5kZWNvZGVEZWxpbWl0ZWRcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtSZWFkZXJ8VWludDhBcnJheX0gcmVhZGVyIFJlYWRlciBvciBidWZmZXIgdG8gZGVjb2RlXG4gKiBAcmV0dXJucyB7VH0gRGVjb2RlZCBtZXNzYWdlXG4gKiBAdGVtcGxhdGUgVCBleHRlbmRzIE1lc3NhZ2U8VD5cbiAqIEB0aGlzIENvbnN0cnVjdG9yPFQ+XG4gKi9cbk1lc3NhZ2UuZGVjb2RlRGVsaW1pdGVkID0gZnVuY3Rpb24gZGVjb2RlRGVsaW1pdGVkKHJlYWRlcikge1xuICAgIHJldHVybiB0aGlzLiR0eXBlLmRlY29kZURlbGltaXRlZChyZWFkZXIpO1xufTtcblxuLyoqXG4gKiBWZXJpZmllcyBhIG1lc3NhZ2Ugb2YgdGhpcyB0eXBlLlxuICogQG5hbWUgTWVzc2FnZS52ZXJpZnlcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywqPn0gbWVzc2FnZSBQbGFpbiBvYmplY3QgdG8gdmVyaWZ5XG4gKiBAcmV0dXJucyB7c3RyaW5nfG51bGx9IGBudWxsYCBpZiB2YWxpZCwgb3RoZXJ3aXNlIHRoZSByZWFzb24gd2h5IGl0IGlzIG5vdFxuICovXG5NZXNzYWdlLnZlcmlmeSA9IGZ1bmN0aW9uIHZlcmlmeShtZXNzYWdlKSB7XG4gICAgcmV0dXJuIHRoaXMuJHR5cGUudmVyaWZ5KG1lc3NhZ2UpO1xufTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IG1lc3NhZ2Ugb2YgdGhpcyB0eXBlIGZyb20gYSBwbGFpbiBvYmplY3QuIEFsc28gY29udmVydHMgdmFsdWVzIHRvIHRoZWlyIHJlc3BlY3RpdmUgaW50ZXJuYWwgdHlwZXMuXG4gKiBAcGFyYW0ge09iamVjdC48c3RyaW5nLCo+fSBvYmplY3QgUGxhaW4gb2JqZWN0XG4gKiBAcmV0dXJucyB7VH0gTWVzc2FnZSBpbnN0YW5jZVxuICogQHRlbXBsYXRlIFQgZXh0ZW5kcyBNZXNzYWdlPFQ+XG4gKiBAdGhpcyBDb25zdHJ1Y3RvcjxUPlxuICovXG5NZXNzYWdlLmZyb21PYmplY3QgPSBmdW5jdGlvbiBmcm9tT2JqZWN0KG9iamVjdCkge1xuICAgIHJldHVybiB0aGlzLiR0eXBlLmZyb21PYmplY3Qob2JqZWN0KTtcbn07XG5cbi8qKlxuICogQ3JlYXRlcyBhIHBsYWluIG9iamVjdCBmcm9tIGEgbWVzc2FnZSBvZiB0aGlzIHR5cGUuIEFsc28gY29udmVydHMgdmFsdWVzIHRvIG90aGVyIHR5cGVzIGlmIHNwZWNpZmllZC5cbiAqIEBwYXJhbSB7VH0gbWVzc2FnZSBNZXNzYWdlIGluc3RhbmNlXG4gKiBAcGFyYW0ge0lDb252ZXJzaW9uT3B0aW9uc30gW29wdGlvbnNdIENvbnZlcnNpb24gb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdC48c3RyaW5nLCo+fSBQbGFpbiBvYmplY3RcbiAqIEB0ZW1wbGF0ZSBUIGV4dGVuZHMgTWVzc2FnZTxUPlxuICogQHRoaXMgQ29uc3RydWN0b3I8VD5cbiAqL1xuTWVzc2FnZS50b09iamVjdCA9IGZ1bmN0aW9uIHRvT2JqZWN0KG1lc3NhZ2UsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gdGhpcy4kdHlwZS50b09iamVjdChtZXNzYWdlLCBvcHRpb25zKTtcbn07XG5cbi8qKlxuICogQ29udmVydHMgdGhpcyBtZXNzYWdlIHRvIEpTT04uXG4gKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IEpTT04gb2JqZWN0XG4gKi9cbk1lc3NhZ2UucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICByZXR1cm4gdGhpcy4kdHlwZS50b09iamVjdCh0aGlzLCB1dGlsLnRvSlNPTk9wdGlvbnMpO1xufTtcblxuLyplc2xpbnQtZW5hYmxlIHZhbGlkLWpzZG9jKi8iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsIk1lc3NhZ2UiLCJ1dGlsIiwicmVxdWlyZSIsInByb3BlcnRpZXMiLCJrZXlzIiwiT2JqZWN0IiwiaSIsImxlbmd0aCIsImNyZWF0ZSIsIiR0eXBlIiwiZW5jb2RlIiwibWVzc2FnZSIsIndyaXRlciIsImVuY29kZURlbGltaXRlZCIsImRlY29kZSIsInJlYWRlciIsImRlY29kZURlbGltaXRlZCIsInZlcmlmeSIsImZyb21PYmplY3QiLCJvYmplY3QiLCJ0b09iamVjdCIsIm9wdGlvbnMiLCJwcm90b3R5cGUiLCJ0b0pTT04iLCJ0b0pTT05PcHRpb25zIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protobufjs/src/message.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/protobufjs/src/method.js":
/*!***********************************************!*\
  !*** ./node_modules/protobufjs/src/method.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = Method;\n// extends ReflectionObject\nvar ReflectionObject = __webpack_require__(/*! ./object */ \"(ssr)/./node_modules/protobufjs/src/object.js\");\n((Method.prototype = Object.create(ReflectionObject.prototype)).constructor = Method).className = \"Method\";\nvar util = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/protobufjs/src/util.js\");\n/**\n * Constructs a new service method instance.\n * @classdesc Reflected service method.\n * @extends ReflectionObject\n * @constructor\n * @param {string} name Method name\n * @param {string|undefined} type Method type, usually `\"rpc\"`\n * @param {string} requestType Request message type\n * @param {string} responseType Response message type\n * @param {boolean|Object.<string,*>} [requestStream] Whether the request is streamed\n * @param {boolean|Object.<string,*>} [responseStream] Whether the response is streamed\n * @param {Object.<string,*>} [options] Declared options\n * @param {string} [comment] The comment for this method\n * @param {Object.<string,*>} [parsedOptions] Declared options, properly parsed into an object\n */ function Method(name, type, requestType, responseType, requestStream, responseStream, options, comment, parsedOptions) {\n    /* istanbul ignore next */ if (util.isObject(requestStream)) {\n        options = requestStream;\n        requestStream = responseStream = undefined;\n    } else if (util.isObject(responseStream)) {\n        options = responseStream;\n        responseStream = undefined;\n    }\n    /* istanbul ignore if */ if (!(type === undefined || util.isString(type))) throw TypeError(\"type must be a string\");\n    /* istanbul ignore if */ if (!util.isString(requestType)) throw TypeError(\"requestType must be a string\");\n    /* istanbul ignore if */ if (!util.isString(responseType)) throw TypeError(\"responseType must be a string\");\n    ReflectionObject.call(this, name, options);\n    /**\n     * Method type.\n     * @type {string}\n     */ this.type = type || \"rpc\"; // toJSON\n    /**\n     * Request type.\n     * @type {string}\n     */ this.requestType = requestType; // toJSON, marker\n    /**\n     * Whether requests are streamed or not.\n     * @type {boolean|undefined}\n     */ this.requestStream = requestStream ? true : undefined; // toJSON\n    /**\n     * Response type.\n     * @type {string}\n     */ this.responseType = responseType; // toJSON\n    /**\n     * Whether responses are streamed or not.\n     * @type {boolean|undefined}\n     */ this.responseStream = responseStream ? true : undefined; // toJSON\n    /**\n     * Resolved request type.\n     * @type {Type|null}\n     */ this.resolvedRequestType = null;\n    /**\n     * Resolved response type.\n     * @type {Type|null}\n     */ this.resolvedResponseType = null;\n    /**\n     * Comment for this method\n     * @type {string|null}\n     */ this.comment = comment;\n    /**\n     * Options properly parsed into an object\n     */ this.parsedOptions = parsedOptions;\n}\n/**\n * Method descriptor.\n * @interface IMethod\n * @property {string} [type=\"rpc\"] Method type\n * @property {string} requestType Request type\n * @property {string} responseType Response type\n * @property {boolean} [requestStream=false] Whether requests are streamed\n * @property {boolean} [responseStream=false] Whether responses are streamed\n * @property {Object.<string,*>} [options] Method options\n * @property {string} comment Method comments\n * @property {Object.<string,*>} [parsedOptions] Method options properly parsed into an object\n */ /**\n * Constructs a method from a method descriptor.\n * @param {string} name Method name\n * @param {IMethod} json Method descriptor\n * @returns {Method} Created method\n * @throws {TypeError} If arguments are invalid\n */ Method.fromJSON = function fromJSON(name, json) {\n    return new Method(name, json.type, json.requestType, json.responseType, json.requestStream, json.responseStream, json.options, json.comment, json.parsedOptions);\n};\n/**\n * Converts this method to a method descriptor.\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {IMethod} Method descriptor\n */ Method.prototype.toJSON = function toJSON(toJSONOptions) {\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n    return util.toObject([\n        \"type\",\n        this.type !== \"rpc\" && /* istanbul ignore next */ this.type || undefined,\n        \"requestType\",\n        this.requestType,\n        \"requestStream\",\n        this.requestStream,\n        \"responseType\",\n        this.responseType,\n        \"responseStream\",\n        this.responseStream,\n        \"options\",\n        this.options,\n        \"comment\",\n        keepComments ? this.comment : undefined,\n        \"parsedOptions\",\n        this.parsedOptions\n    ]);\n};\n/**\n * @override\n */ Method.prototype.resolve = function resolve() {\n    /* istanbul ignore if */ if (this.resolved) return this;\n    this.resolvedRequestType = this.parent.lookupType(this.requestType);\n    this.resolvedResponseType = this.parent.lookupType(this.responseType);\n    return ReflectionObject.prototype.resolve.call(this);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcHJvdG9idWZqcy9zcmMvbWV0aG9kLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLE9BQU9DLE9BQU8sR0FBR0M7QUFFakIsMkJBQTJCO0FBQzNCLElBQUlDLG1CQUFtQkMsbUJBQU9BLENBQUMsK0RBQVU7QUFDeEMsRUFBQ0YsT0FBT0csU0FBUyxHQUFHQyxPQUFPQyxNQUFNLENBQUNKLGlCQUFpQkUsU0FBUyxHQUFHRyxXQUFXLEdBQUdOLE1BQUssRUFBR08sU0FBUyxHQUFHO0FBRWxHLElBQUlDLE9BQU9OLG1CQUFPQSxDQUFDLDJEQUFRO0FBRTNCOzs7Ozs7Ozs7Ozs7OztDQWNDLEdBQ0QsU0FBU0YsT0FBT1MsSUFBSSxFQUFFQyxJQUFJLEVBQUVDLFdBQVcsRUFBRUMsWUFBWSxFQUFFQyxhQUFhLEVBQUVDLGNBQWMsRUFBRUMsT0FBTyxFQUFFQyxPQUFPLEVBQUVDLGFBQWE7SUFFakgsd0JBQXdCLEdBQ3hCLElBQUlULEtBQUtVLFFBQVEsQ0FBQ0wsZ0JBQWdCO1FBQzlCRSxVQUFVRjtRQUNWQSxnQkFBZ0JDLGlCQUFpQks7SUFDckMsT0FBTyxJQUFJWCxLQUFLVSxRQUFRLENBQUNKLGlCQUFpQjtRQUN0Q0MsVUFBVUQ7UUFDVkEsaUJBQWlCSztJQUNyQjtJQUVBLHNCQUFzQixHQUN0QixJQUFJLENBQUVULENBQUFBLFNBQVNTLGFBQWFYLEtBQUtZLFFBQVEsQ0FBQ1YsS0FBSSxHQUMxQyxNQUFNVyxVQUFVO0lBRXBCLHNCQUFzQixHQUN0QixJQUFJLENBQUNiLEtBQUtZLFFBQVEsQ0FBQ1QsY0FDZixNQUFNVSxVQUFVO0lBRXBCLHNCQUFzQixHQUN0QixJQUFJLENBQUNiLEtBQUtZLFFBQVEsQ0FBQ1IsZUFDZixNQUFNUyxVQUFVO0lBRXBCcEIsaUJBQWlCcUIsSUFBSSxDQUFDLElBQUksRUFBRWIsTUFBTU07SUFFbEM7OztLQUdDLEdBQ0QsSUFBSSxDQUFDTCxJQUFJLEdBQUdBLFFBQVEsT0FBTyxTQUFTO0lBRXBDOzs7S0FHQyxHQUNELElBQUksQ0FBQ0MsV0FBVyxHQUFHQSxhQUFhLGlCQUFpQjtJQUVqRDs7O0tBR0MsR0FDRCxJQUFJLENBQUNFLGFBQWEsR0FBR0EsZ0JBQWdCLE9BQU9NLFdBQVcsU0FBUztJQUVoRTs7O0tBR0MsR0FDRCxJQUFJLENBQUNQLFlBQVksR0FBR0EsY0FBYyxTQUFTO0lBRTNDOzs7S0FHQyxHQUNELElBQUksQ0FBQ0UsY0FBYyxHQUFHQSxpQkFBaUIsT0FBT0ssV0FBVyxTQUFTO0lBRWxFOzs7S0FHQyxHQUNELElBQUksQ0FBQ0ksbUJBQW1CLEdBQUc7SUFFM0I7OztLQUdDLEdBQ0QsSUFBSSxDQUFDQyxvQkFBb0IsR0FBRztJQUU1Qjs7O0tBR0MsR0FDRCxJQUFJLENBQUNSLE9BQU8sR0FBR0E7SUFFZjs7S0FFQyxHQUNELElBQUksQ0FBQ0MsYUFBYSxHQUFHQTtBQUN6QjtBQUVBOzs7Ozs7Ozs7OztDQVdDLEdBRUQ7Ozs7OztDQU1DLEdBQ0RqQixPQUFPeUIsUUFBUSxHQUFHLFNBQVNBLFNBQVNoQixJQUFJLEVBQUVpQixJQUFJO0lBQzFDLE9BQU8sSUFBSTFCLE9BQU9TLE1BQU1pQixLQUFLaEIsSUFBSSxFQUFFZ0IsS0FBS2YsV0FBVyxFQUFFZSxLQUFLZCxZQUFZLEVBQUVjLEtBQUtiLGFBQWEsRUFBRWEsS0FBS1osY0FBYyxFQUFFWSxLQUFLWCxPQUFPLEVBQUVXLEtBQUtWLE9BQU8sRUFBRVUsS0FBS1QsYUFBYTtBQUNuSztBQUVBOzs7O0NBSUMsR0FDRGpCLE9BQU9HLFNBQVMsQ0FBQ3dCLE1BQU0sR0FBRyxTQUFTQSxPQUFPQyxhQUFhO0lBQ25ELElBQUlDLGVBQWVELGdCQUFnQkUsUUFBUUYsY0FBY0MsWUFBWSxJQUFJO0lBQ3pFLE9BQU9yQixLQUFLdUIsUUFBUSxDQUFDO1FBQ2pCO1FBQW1CLElBQUksQ0FBQ3JCLElBQUksS0FBSyxTQUFTLHdCQUF3QixHQUFHLElBQUksQ0FBQ0EsSUFBSSxJQUFJUztRQUNsRjtRQUFtQixJQUFJLENBQUNSLFdBQVc7UUFDbkM7UUFBbUIsSUFBSSxDQUFDRSxhQUFhO1FBQ3JDO1FBQW1CLElBQUksQ0FBQ0QsWUFBWTtRQUNwQztRQUFtQixJQUFJLENBQUNFLGNBQWM7UUFDdEM7UUFBbUIsSUFBSSxDQUFDQyxPQUFPO1FBQy9CO1FBQW1CYyxlQUFlLElBQUksQ0FBQ2IsT0FBTyxHQUFHRztRQUNqRDtRQUFtQixJQUFJLENBQUNGLGFBQWE7S0FDeEM7QUFDTDtBQUVBOztDQUVDLEdBQ0RqQixPQUFPRyxTQUFTLENBQUM2QixPQUFPLEdBQUcsU0FBU0E7SUFFaEMsc0JBQXNCLEdBQ3RCLElBQUksSUFBSSxDQUFDQyxRQUFRLEVBQ2IsT0FBTyxJQUFJO0lBRWYsSUFBSSxDQUFDVixtQkFBbUIsR0FBRyxJQUFJLENBQUNXLE1BQU0sQ0FBQ0MsVUFBVSxDQUFDLElBQUksQ0FBQ3hCLFdBQVc7SUFDbEUsSUFBSSxDQUFDYSxvQkFBb0IsR0FBRyxJQUFJLENBQUNVLE1BQU0sQ0FBQ0MsVUFBVSxDQUFDLElBQUksQ0FBQ3ZCLFlBQVk7SUFFcEUsT0FBT1gsaUJBQWlCRSxTQUFTLENBQUM2QixPQUFPLENBQUNWLElBQUksQ0FBQyxJQUFJO0FBQ3ZEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdW5pY29ybi1jbGFzc2VzLy4vbm9kZV9tb2R1bGVzL3Byb3RvYnVmanMvc3JjL21ldGhvZC5qcz9iZTA5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xubW9kdWxlLmV4cG9ydHMgPSBNZXRob2Q7XG5cbi8vIGV4dGVuZHMgUmVmbGVjdGlvbk9iamVjdFxudmFyIFJlZmxlY3Rpb25PYmplY3QgPSByZXF1aXJlKFwiLi9vYmplY3RcIik7XG4oKE1ldGhvZC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKFJlZmxlY3Rpb25PYmplY3QucHJvdG90eXBlKSkuY29uc3RydWN0b3IgPSBNZXRob2QpLmNsYXNzTmFtZSA9IFwiTWV0aG9kXCI7XG5cbnZhciB1dGlsID0gcmVxdWlyZShcIi4vdXRpbFwiKTtcblxuLyoqXG4gKiBDb25zdHJ1Y3RzIGEgbmV3IHNlcnZpY2UgbWV0aG9kIGluc3RhbmNlLlxuICogQGNsYXNzZGVzYyBSZWZsZWN0ZWQgc2VydmljZSBtZXRob2QuXG4gKiBAZXh0ZW5kcyBSZWZsZWN0aW9uT2JqZWN0XG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIE1ldGhvZCBuYW1lXG4gKiBAcGFyYW0ge3N0cmluZ3x1bmRlZmluZWR9IHR5cGUgTWV0aG9kIHR5cGUsIHVzdWFsbHkgYFwicnBjXCJgXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVxdWVzdFR5cGUgUmVxdWVzdCBtZXNzYWdlIHR5cGVcbiAqIEBwYXJhbSB7c3RyaW5nfSByZXNwb25zZVR5cGUgUmVzcG9uc2UgbWVzc2FnZSB0eXBlXG4gKiBAcGFyYW0ge2Jvb2xlYW58T2JqZWN0LjxzdHJpbmcsKj59IFtyZXF1ZXN0U3RyZWFtXSBXaGV0aGVyIHRoZSByZXF1ZXN0IGlzIHN0cmVhbWVkXG4gKiBAcGFyYW0ge2Jvb2xlYW58T2JqZWN0LjxzdHJpbmcsKj59IFtyZXNwb25zZVN0cmVhbV0gV2hldGhlciB0aGUgcmVzcG9uc2UgaXMgc3RyZWFtZWRcbiAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsKj59IFtvcHRpb25zXSBEZWNsYXJlZCBvcHRpb25zXG4gKiBAcGFyYW0ge3N0cmluZ30gW2NvbW1lbnRdIFRoZSBjb21tZW50IGZvciB0aGlzIG1ldGhvZFxuICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywqPn0gW3BhcnNlZE9wdGlvbnNdIERlY2xhcmVkIG9wdGlvbnMsIHByb3Blcmx5IHBhcnNlZCBpbnRvIGFuIG9iamVjdFxuICovXG5mdW5jdGlvbiBNZXRob2QobmFtZSwgdHlwZSwgcmVxdWVzdFR5cGUsIHJlc3BvbnNlVHlwZSwgcmVxdWVzdFN0cmVhbSwgcmVzcG9uc2VTdHJlYW0sIG9wdGlvbnMsIGNvbW1lbnQsIHBhcnNlZE9wdGlvbnMpIHtcblxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgaWYgKHV0aWwuaXNPYmplY3QocmVxdWVzdFN0cmVhbSkpIHtcbiAgICAgICAgb3B0aW9ucyA9IHJlcXVlc3RTdHJlYW07XG4gICAgICAgIHJlcXVlc3RTdHJlYW0gPSByZXNwb25zZVN0cmVhbSA9IHVuZGVmaW5lZDtcbiAgICB9IGVsc2UgaWYgKHV0aWwuaXNPYmplY3QocmVzcG9uc2VTdHJlYW0pKSB7XG4gICAgICAgIG9wdGlvbnMgPSByZXNwb25zZVN0cmVhbTtcbiAgICAgICAgcmVzcG9uc2VTdHJlYW0gPSB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKCEodHlwZSA9PT0gdW5kZWZpbmVkIHx8IHV0aWwuaXNTdHJpbmcodHlwZSkpKVxuICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJ0eXBlIG11c3QgYmUgYSBzdHJpbmdcIik7XG5cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoIXV0aWwuaXNTdHJpbmcocmVxdWVzdFR5cGUpKVxuICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJyZXF1ZXN0VHlwZSBtdXN0IGJlIGEgc3RyaW5nXCIpO1xuXG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKCF1dGlsLmlzU3RyaW5nKHJlc3BvbnNlVHlwZSkpXG4gICAgICAgIHRocm93IFR5cGVFcnJvcihcInJlc3BvbnNlVHlwZSBtdXN0IGJlIGEgc3RyaW5nXCIpO1xuXG4gICAgUmVmbGVjdGlvbk9iamVjdC5jYWxsKHRoaXMsIG5hbWUsIG9wdGlvbnMpO1xuXG4gICAgLyoqXG4gICAgICogTWV0aG9kIHR5cGUuXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLnR5cGUgPSB0eXBlIHx8IFwicnBjXCI7IC8vIHRvSlNPTlxuXG4gICAgLyoqXG4gICAgICogUmVxdWVzdCB0eXBlLlxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgdGhpcy5yZXF1ZXN0VHlwZSA9IHJlcXVlc3RUeXBlOyAvLyB0b0pTT04sIG1hcmtlclxuXG4gICAgLyoqXG4gICAgICogV2hldGhlciByZXF1ZXN0cyBhcmUgc3RyZWFtZWQgb3Igbm90LlxuICAgICAqIEB0eXBlIHtib29sZWFufHVuZGVmaW5lZH1cbiAgICAgKi9cbiAgICB0aGlzLnJlcXVlc3RTdHJlYW0gPSByZXF1ZXN0U3RyZWFtID8gdHJ1ZSA6IHVuZGVmaW5lZDsgLy8gdG9KU09OXG5cbiAgICAvKipcbiAgICAgKiBSZXNwb25zZSB0eXBlLlxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgdGhpcy5yZXNwb25zZVR5cGUgPSByZXNwb25zZVR5cGU7IC8vIHRvSlNPTlxuXG4gICAgLyoqXG4gICAgICogV2hldGhlciByZXNwb25zZXMgYXJlIHN0cmVhbWVkIG9yIG5vdC5cbiAgICAgKiBAdHlwZSB7Ym9vbGVhbnx1bmRlZmluZWR9XG4gICAgICovXG4gICAgdGhpcy5yZXNwb25zZVN0cmVhbSA9IHJlc3BvbnNlU3RyZWFtID8gdHJ1ZSA6IHVuZGVmaW5lZDsgLy8gdG9KU09OXG5cbiAgICAvKipcbiAgICAgKiBSZXNvbHZlZCByZXF1ZXN0IHR5cGUuXG4gICAgICogQHR5cGUge1R5cGV8bnVsbH1cbiAgICAgKi9cbiAgICB0aGlzLnJlc29sdmVkUmVxdWVzdFR5cGUgPSBudWxsO1xuXG4gICAgLyoqXG4gICAgICogUmVzb2x2ZWQgcmVzcG9uc2UgdHlwZS5cbiAgICAgKiBAdHlwZSB7VHlwZXxudWxsfVxuICAgICAqL1xuICAgIHRoaXMucmVzb2x2ZWRSZXNwb25zZVR5cGUgPSBudWxsO1xuXG4gICAgLyoqXG4gICAgICogQ29tbWVudCBmb3IgdGhpcyBtZXRob2RcbiAgICAgKiBAdHlwZSB7c3RyaW5nfG51bGx9XG4gICAgICovXG4gICAgdGhpcy5jb21tZW50ID0gY29tbWVudDtcblxuICAgIC8qKlxuICAgICAqIE9wdGlvbnMgcHJvcGVybHkgcGFyc2VkIGludG8gYW4gb2JqZWN0XG4gICAgICovXG4gICAgdGhpcy5wYXJzZWRPcHRpb25zID0gcGFyc2VkT3B0aW9ucztcbn1cblxuLyoqXG4gKiBNZXRob2QgZGVzY3JpcHRvci5cbiAqIEBpbnRlcmZhY2UgSU1ldGhvZFxuICogQHByb3BlcnR5IHtzdHJpbmd9IFt0eXBlPVwicnBjXCJdIE1ldGhvZCB0eXBlXG4gKiBAcHJvcGVydHkge3N0cmluZ30gcmVxdWVzdFR5cGUgUmVxdWVzdCB0eXBlXG4gKiBAcHJvcGVydHkge3N0cmluZ30gcmVzcG9uc2VUeXBlIFJlc3BvbnNlIHR5cGVcbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW3JlcXVlc3RTdHJlYW09ZmFsc2VdIFdoZXRoZXIgcmVxdWVzdHMgYXJlIHN0cmVhbWVkXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IFtyZXNwb25zZVN0cmVhbT1mYWxzZV0gV2hldGhlciByZXNwb25zZXMgYXJlIHN0cmVhbWVkXG4gKiBAcHJvcGVydHkge09iamVjdC48c3RyaW5nLCo+fSBbb3B0aW9uc10gTWV0aG9kIG9wdGlvbnNcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBjb21tZW50IE1ldGhvZCBjb21tZW50c1xuICogQHByb3BlcnR5IHtPYmplY3QuPHN0cmluZywqPn0gW3BhcnNlZE9wdGlvbnNdIE1ldGhvZCBvcHRpb25zIHByb3Blcmx5IHBhcnNlZCBpbnRvIGFuIG9iamVjdFxuICovXG5cbi8qKlxuICogQ29uc3RydWN0cyBhIG1ldGhvZCBmcm9tIGEgbWV0aG9kIGRlc2NyaXB0b3IuXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBNZXRob2QgbmFtZVxuICogQHBhcmFtIHtJTWV0aG9kfSBqc29uIE1ldGhvZCBkZXNjcmlwdG9yXG4gKiBAcmV0dXJucyB7TWV0aG9kfSBDcmVhdGVkIG1ldGhvZFxuICogQHRocm93cyB7VHlwZUVycm9yfSBJZiBhcmd1bWVudHMgYXJlIGludmFsaWRcbiAqL1xuTWV0aG9kLmZyb21KU09OID0gZnVuY3Rpb24gZnJvbUpTT04obmFtZSwganNvbikge1xuICAgIHJldHVybiBuZXcgTWV0aG9kKG5hbWUsIGpzb24udHlwZSwganNvbi5yZXF1ZXN0VHlwZSwganNvbi5yZXNwb25zZVR5cGUsIGpzb24ucmVxdWVzdFN0cmVhbSwganNvbi5yZXNwb25zZVN0cmVhbSwganNvbi5vcHRpb25zLCBqc29uLmNvbW1lbnQsIGpzb24ucGFyc2VkT3B0aW9ucyk7XG59O1xuXG4vKipcbiAqIENvbnZlcnRzIHRoaXMgbWV0aG9kIHRvIGEgbWV0aG9kIGRlc2NyaXB0b3IuXG4gKiBAcGFyYW0ge0lUb0pTT05PcHRpb25zfSBbdG9KU09OT3B0aW9uc10gSlNPTiBjb252ZXJzaW9uIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtJTWV0aG9kfSBNZXRob2QgZGVzY3JpcHRvclxuICovXG5NZXRob2QucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTih0b0pTT05PcHRpb25zKSB7XG4gICAgdmFyIGtlZXBDb21tZW50cyA9IHRvSlNPTk9wdGlvbnMgPyBCb29sZWFuKHRvSlNPTk9wdGlvbnMua2VlcENvbW1lbnRzKSA6IGZhbHNlO1xuICAgIHJldHVybiB1dGlsLnRvT2JqZWN0KFtcbiAgICAgICAgXCJ0eXBlXCIgICAgICAgICAgICwgdGhpcy50eXBlICE9PSBcInJwY1wiICYmIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovIHRoaXMudHlwZSB8fCB1bmRlZmluZWQsXG4gICAgICAgIFwicmVxdWVzdFR5cGVcIiAgICAsIHRoaXMucmVxdWVzdFR5cGUsXG4gICAgICAgIFwicmVxdWVzdFN0cmVhbVwiICAsIHRoaXMucmVxdWVzdFN0cmVhbSxcbiAgICAgICAgXCJyZXNwb25zZVR5cGVcIiAgICwgdGhpcy5yZXNwb25zZVR5cGUsXG4gICAgICAgIFwicmVzcG9uc2VTdHJlYW1cIiAsIHRoaXMucmVzcG9uc2VTdHJlYW0sXG4gICAgICAgIFwib3B0aW9uc1wiICAgICAgICAsIHRoaXMub3B0aW9ucyxcbiAgICAgICAgXCJjb21tZW50XCIgICAgICAgICwga2VlcENvbW1lbnRzID8gdGhpcy5jb21tZW50IDogdW5kZWZpbmVkLFxuICAgICAgICBcInBhcnNlZE9wdGlvbnNcIiAgLCB0aGlzLnBhcnNlZE9wdGlvbnMsXG4gICAgXSk7XG59O1xuXG4vKipcbiAqIEBvdmVycmlkZVxuICovXG5NZXRob2QucHJvdG90eXBlLnJlc29sdmUgPSBmdW5jdGlvbiByZXNvbHZlKCkge1xuXG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKHRoaXMucmVzb2x2ZWQpXG4gICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgdGhpcy5yZXNvbHZlZFJlcXVlc3RUeXBlID0gdGhpcy5wYXJlbnQubG9va3VwVHlwZSh0aGlzLnJlcXVlc3RUeXBlKTtcbiAgICB0aGlzLnJlc29sdmVkUmVzcG9uc2VUeXBlID0gdGhpcy5wYXJlbnQubG9va3VwVHlwZSh0aGlzLnJlc3BvbnNlVHlwZSk7XG5cbiAgICByZXR1cm4gUmVmbGVjdGlvbk9iamVjdC5wcm90b3R5cGUucmVzb2x2ZS5jYWxsKHRoaXMpO1xufTtcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiTWV0aG9kIiwiUmVmbGVjdGlvbk9iamVjdCIsInJlcXVpcmUiLCJwcm90b3R5cGUiLCJPYmplY3QiLCJjcmVhdGUiLCJjb25zdHJ1Y3RvciIsImNsYXNzTmFtZSIsInV0aWwiLCJuYW1lIiwidHlwZSIsInJlcXVlc3RUeXBlIiwicmVzcG9uc2VUeXBlIiwicmVxdWVzdFN0cmVhbSIsInJlc3BvbnNlU3RyZWFtIiwib3B0aW9ucyIsImNvbW1lbnQiLCJwYXJzZWRPcHRpb25zIiwiaXNPYmplY3QiLCJ1bmRlZmluZWQiLCJpc1N0cmluZyIsIlR5cGVFcnJvciIsImNhbGwiLCJyZXNvbHZlZFJlcXVlc3RUeXBlIiwicmVzb2x2ZWRSZXNwb25zZVR5cGUiLCJmcm9tSlNPTiIsImpzb24iLCJ0b0pTT04iLCJ0b0pTT05PcHRpb25zIiwia2VlcENvbW1lbnRzIiwiQm9vbGVhbiIsInRvT2JqZWN0IiwicmVzb2x2ZSIsInJlc29sdmVkIiwicGFyZW50IiwibG9va3VwVHlwZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protobufjs/src/method.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/protobufjs/src/namespace.js":
/*!**************************************************!*\
  !*** ./node_modules/protobufjs/src/namespace.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = Namespace;\n// extends ReflectionObject\nvar ReflectionObject = __webpack_require__(/*! ./object */ \"(ssr)/./node_modules/protobufjs/src/object.js\");\n((Namespace.prototype = Object.create(ReflectionObject.prototype)).constructor = Namespace).className = \"Namespace\";\nvar Field = __webpack_require__(/*! ./field */ \"(ssr)/./node_modules/protobufjs/src/field.js\"), util = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/protobufjs/src/util.js\"), OneOf = __webpack_require__(/*! ./oneof */ \"(ssr)/./node_modules/protobufjs/src/oneof.js\");\nvar Type, Service, Enum;\n/**\n * Constructs a new namespace instance.\n * @name Namespace\n * @classdesc Reflected namespace.\n * @extends NamespaceBase\n * @constructor\n * @param {string} name Namespace name\n * @param {Object.<string,*>} [options] Declared options\n */ /**\n * Constructs a namespace from JSON.\n * @memberof Namespace\n * @function\n * @param {string} name Namespace name\n * @param {Object.<string,*>} json JSON object\n * @returns {Namespace} Created namespace\n * @throws {TypeError} If arguments are invalid\n */ Namespace.fromJSON = function fromJSON(name, json) {\n    return new Namespace(name, json.options).addJSON(json.nested);\n};\n/**\n * Converts an array of reflection objects to JSON.\n * @memberof Namespace\n * @param {ReflectionObject[]} array Object array\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {Object.<string,*>|undefined} JSON object or `undefined` when array is empty\n */ function arrayToJSON(array, toJSONOptions) {\n    if (!(array && array.length)) return undefined;\n    var obj = {};\n    for(var i = 0; i < array.length; ++i)obj[array[i].name] = array[i].toJSON(toJSONOptions);\n    return obj;\n}\nNamespace.arrayToJSON = arrayToJSON;\n/**\n * Tests if the specified id is reserved.\n * @param {Array.<number[]|string>|undefined} reserved Array of reserved ranges and names\n * @param {number} id Id to test\n * @returns {boolean} `true` if reserved, otherwise `false`\n */ Namespace.isReservedId = function isReservedId(reserved, id) {\n    if (reserved) {\n        for(var i = 0; i < reserved.length; ++i)if (typeof reserved[i] !== \"string\" && reserved[i][0] <= id && reserved[i][1] > id) return true;\n    }\n    return false;\n};\n/**\n * Tests if the specified name is reserved.\n * @param {Array.<number[]|string>|undefined} reserved Array of reserved ranges and names\n * @param {string} name Name to test\n * @returns {boolean} `true` if reserved, otherwise `false`\n */ Namespace.isReservedName = function isReservedName(reserved, name) {\n    if (reserved) {\n        for(var i = 0; i < reserved.length; ++i)if (reserved[i] === name) return true;\n    }\n    return false;\n};\n/**\n * Not an actual constructor. Use {@link Namespace} instead.\n * @classdesc Base class of all reflection objects containing nested objects. This is not an actual class but here for the sake of having consistent type definitions.\n * @exports NamespaceBase\n * @extends ReflectionObject\n * @abstract\n * @constructor\n * @param {string} name Namespace name\n * @param {Object.<string,*>} [options] Declared options\n * @see {@link Namespace}\n */ function Namespace(name, options) {\n    ReflectionObject.call(this, name, options);\n    /**\n     * Nested objects by name.\n     * @type {Object.<string,ReflectionObject>|undefined}\n     */ this.nested = undefined; // toJSON\n    /**\n     * Cached nested objects as an array.\n     * @type {ReflectionObject[]|null}\n     * @private\n     */ this._nestedArray = null;\n    /**\n     * Cache lookup calls for any objects contains anywhere under this namespace.\n     * This drastically speeds up resolve for large cross-linked protos where the same\n     * types are looked up repeatedly.\n     * @type {Object.<string,ReflectionObject|null>}\n     * @private\n     */ this._lookupCache = {};\n    /**\n     * Whether or not objects contained in this namespace need feature resolution.\n     * @type {boolean}\n     * @protected\n     */ this._needsRecursiveFeatureResolution = true;\n    /**\n     * Whether or not objects contained in this namespace need a resolve.\n     * @type {boolean}\n     * @protected\n     */ this._needsRecursiveResolve = true;\n}\nfunction clearCache(namespace) {\n    namespace._nestedArray = null;\n    namespace._lookupCache = {};\n    // Also clear parent caches, since they include nested lookups.\n    var parent = namespace;\n    while(parent = parent.parent){\n        parent._lookupCache = {};\n    }\n    return namespace;\n}\n/**\n * Nested objects of this namespace as an array for iteration.\n * @name NamespaceBase#nestedArray\n * @type {ReflectionObject[]}\n * @readonly\n */ Object.defineProperty(Namespace.prototype, \"nestedArray\", {\n    get: function() {\n        return this._nestedArray || (this._nestedArray = util.toArray(this.nested));\n    }\n});\n/**\n * Namespace descriptor.\n * @interface INamespace\n * @property {Object.<string,*>} [options] Namespace options\n * @property {Object.<string,AnyNestedObject>} [nested] Nested object descriptors\n */ /**\n * Any extension field descriptor.\n * @typedef AnyExtensionField\n * @type {IExtensionField|IExtensionMapField}\n */ /**\n * Any nested object descriptor.\n * @typedef AnyNestedObject\n * @type {IEnum|IType|IService|AnyExtensionField|INamespace|IOneOf}\n */ /**\n * Converts this namespace to a namespace descriptor.\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {INamespace} Namespace descriptor\n */ Namespace.prototype.toJSON = function toJSON(toJSONOptions) {\n    return util.toObject([\n        \"options\",\n        this.options,\n        \"nested\",\n        arrayToJSON(this.nestedArray, toJSONOptions)\n    ]);\n};\n/**\n * Adds nested objects to this namespace from nested object descriptors.\n * @param {Object.<string,AnyNestedObject>} nestedJson Any nested object descriptors\n * @returns {Namespace} `this`\n */ Namespace.prototype.addJSON = function addJSON(nestedJson) {\n    var ns = this;\n    /* istanbul ignore else */ if (nestedJson) {\n        for(var names = Object.keys(nestedJson), i = 0, nested; i < names.length; ++i){\n            nested = nestedJson[names[i]];\n            ns.add((nested.fields !== undefined ? Type.fromJSON : nested.values !== undefined ? Enum.fromJSON : nested.methods !== undefined ? Service.fromJSON : nested.id !== undefined ? Field.fromJSON : Namespace.fromJSON)(names[i], nested));\n        }\n    }\n    return this;\n};\n/**\n * Gets the nested object of the specified name.\n * @param {string} name Nested object name\n * @returns {ReflectionObject|null} The reflection object or `null` if it doesn't exist\n */ Namespace.prototype.get = function get(name) {\n    return this.nested && this.nested[name] || null;\n};\n/**\n * Gets the values of the nested {@link Enum|enum} of the specified name.\n * This methods differs from {@link Namespace#get|get} in that it returns an enum's values directly and throws instead of returning `null`.\n * @param {string} name Nested enum name\n * @returns {Object.<string,number>} Enum values\n * @throws {Error} If there is no such enum\n */ Namespace.prototype.getEnum = function getEnum(name) {\n    if (this.nested && this.nested[name] instanceof Enum) return this.nested[name].values;\n    throw Error(\"no such enum: \" + name);\n};\n/**\n * Adds a nested object to this namespace.\n * @param {ReflectionObject} object Nested object to add\n * @returns {Namespace} `this`\n * @throws {TypeError} If arguments are invalid\n * @throws {Error} If there is already a nested object with this name\n */ Namespace.prototype.add = function add(object) {\n    if (!(object instanceof Field && object.extend !== undefined || object instanceof Type || object instanceof OneOf || object instanceof Enum || object instanceof Service || object instanceof Namespace)) throw TypeError(\"object must be a valid nested object\");\n    if (!this.nested) this.nested = {};\n    else {\n        var prev = this.get(object.name);\n        if (prev) {\n            if (prev instanceof Namespace && object instanceof Namespace && !(prev instanceof Type || prev instanceof Service)) {\n                // replace plain namespace but keep existing nested elements and options\n                var nested = prev.nestedArray;\n                for(var i = 0; i < nested.length; ++i)object.add(nested[i]);\n                this.remove(prev);\n                if (!this.nested) this.nested = {};\n                object.setOptions(prev.options, true);\n            } else throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\n        }\n    }\n    this.nested[object.name] = object;\n    if (!(this instanceof Type || this instanceof Service || this instanceof Enum || this instanceof Field)) {\n        // This is a package or a root namespace.\n        if (!object._edition) {\n            // Make sure that some edition is set if it hasn't already been specified.\n            object._edition = object._defaultEdition;\n        }\n    }\n    this._needsRecursiveFeatureResolution = true;\n    this._needsRecursiveResolve = true;\n    // Also clear parent caches, since they need to recurse down.\n    var parent = this;\n    while(parent = parent.parent){\n        parent._needsRecursiveFeatureResolution = true;\n        parent._needsRecursiveResolve = true;\n    }\n    object.onAdd(this);\n    return clearCache(this);\n};\n/**\n * Removes a nested object from this namespace.\n * @param {ReflectionObject} object Nested object to remove\n * @returns {Namespace} `this`\n * @throws {TypeError} If arguments are invalid\n * @throws {Error} If `object` is not a member of this namespace\n */ Namespace.prototype.remove = function remove(object) {\n    if (!(object instanceof ReflectionObject)) throw TypeError(\"object must be a ReflectionObject\");\n    if (object.parent !== this) throw Error(object + \" is not a member of \" + this);\n    delete this.nested[object.name];\n    if (!Object.keys(this.nested).length) this.nested = undefined;\n    object.onRemove(this);\n    return clearCache(this);\n};\n/**\n * Defines additial namespaces within this one if not yet existing.\n * @param {string|string[]} path Path to create\n * @param {*} [json] Nested types to create from JSON\n * @returns {Namespace} Pointer to the last namespace created or `this` if path is empty\n */ Namespace.prototype.define = function define(path, json) {\n    if (util.isString(path)) path = path.split(\".\");\n    else if (!Array.isArray(path)) throw TypeError(\"illegal path\");\n    if (path && path.length && path[0] === \"\") throw Error(\"path must be relative\");\n    var ptr = this;\n    while(path.length > 0){\n        var part = path.shift();\n        if (ptr.nested && ptr.nested[part]) {\n            ptr = ptr.nested[part];\n            if (!(ptr instanceof Namespace)) throw Error(\"path conflicts with non-namespace objects\");\n        } else ptr.add(ptr = new Namespace(part));\n    }\n    if (json) ptr.addJSON(json);\n    return ptr;\n};\n/**\n * Resolves this namespace's and all its nested objects' type references. Useful to validate a reflection tree, but comes at a cost.\n * @returns {Namespace} `this`\n */ Namespace.prototype.resolveAll = function resolveAll() {\n    if (!this._needsRecursiveResolve) return this;\n    this._resolveFeaturesRecursive(this._edition);\n    var nested = this.nestedArray, i = 0;\n    this.resolve();\n    while(i < nested.length)if (nested[i] instanceof Namespace) nested[i++].resolveAll();\n    else nested[i++].resolve();\n    this._needsRecursiveResolve = false;\n    return this;\n};\n/**\n * @override\n */ Namespace.prototype._resolveFeaturesRecursive = function _resolveFeaturesRecursive(edition) {\n    if (!this._needsRecursiveFeatureResolution) return this;\n    this._needsRecursiveFeatureResolution = false;\n    edition = this._edition || edition;\n    ReflectionObject.prototype._resolveFeaturesRecursive.call(this, edition);\n    this.nestedArray.forEach((nested)=>{\n        nested._resolveFeaturesRecursive(edition);\n    });\n    return this;\n};\n/**\n * Recursively looks up the reflection object matching the specified path in the scope of this namespace.\n * @param {string|string[]} path Path to look up\n * @param {*|Array.<*>} filterTypes Filter types, any combination of the constructors of `protobuf.Type`, `protobuf.Enum`, `protobuf.Service` etc.\n * @param {boolean} [parentAlreadyChecked=false] If known, whether the parent has already been checked\n * @returns {ReflectionObject|null} Looked up object or `null` if none could be found\n */ Namespace.prototype.lookup = function lookup(path, filterTypes, parentAlreadyChecked) {\n    /* istanbul ignore next */ if (typeof filterTypes === \"boolean\") {\n        parentAlreadyChecked = filterTypes;\n        filterTypes = undefined;\n    } else if (filterTypes && !Array.isArray(filterTypes)) filterTypes = [\n        filterTypes\n    ];\n    if (util.isString(path) && path.length) {\n        if (path === \".\") return this.root;\n        path = path.split(\".\");\n    } else if (!path.length) return this;\n    var flatPath = path.join(\".\");\n    // Start at root if path is absolute\n    if (path[0] === \"\") return this.root.lookup(path.slice(1), filterTypes);\n    // Early bailout for objects with matching absolute paths\n    var found = this.root._fullyQualifiedObjects && this.root._fullyQualifiedObjects[\".\" + flatPath];\n    if (found && (!filterTypes || filterTypes.indexOf(found.constructor) > -1)) {\n        return found;\n    }\n    // Do a regular lookup at this namespace and below\n    found = this._lookupImpl(path, flatPath);\n    if (found && (!filterTypes || filterTypes.indexOf(found.constructor) > -1)) {\n        return found;\n    }\n    if (parentAlreadyChecked) return null;\n    // If there hasn't been a match, walk up the tree and look more broadly\n    var current = this;\n    while(current.parent){\n        found = current.parent._lookupImpl(path, flatPath);\n        if (found && (!filterTypes || filterTypes.indexOf(found.constructor) > -1)) {\n            return found;\n        }\n        current = current.parent;\n    }\n    return null;\n};\n/**\n * Internal helper for lookup that handles searching just at this namespace and below along with caching.\n * @param {string[]} path Path to look up\n * @param {string} flatPath Flattened version of the path to use as a cache key\n * @returns {ReflectionObject|null} Looked up object or `null` if none could be found\n * @private\n */ Namespace.prototype._lookupImpl = function lookup(path, flatPath) {\n    if (Object.prototype.hasOwnProperty.call(this._lookupCache, flatPath)) {\n        return this._lookupCache[flatPath];\n    }\n    // Test if the first part matches any nested object, and if so, traverse if path contains more\n    var found = this.get(path[0]);\n    var exact = null;\n    if (found) {\n        if (path.length === 1) {\n            exact = found;\n        } else if (found instanceof Namespace) {\n            path = path.slice(1);\n            exact = found._lookupImpl(path, path.join(\".\"));\n        }\n    // Otherwise try each nested namespace\n    } else {\n        for(var i = 0; i < this.nestedArray.length; ++i)if (this._nestedArray[i] instanceof Namespace && (found = this._nestedArray[i]._lookupImpl(path, flatPath))) exact = found;\n    }\n    // Set this even when null, so that when we walk up the tree we can quickly bail on repeated checks back down.\n    this._lookupCache[flatPath] = exact;\n    return exact;\n};\n/**\n * Looks up the reflection object at the specified path, relative to this namespace.\n * @name NamespaceBase#lookup\n * @function\n * @param {string|string[]} path Path to look up\n * @param {boolean} [parentAlreadyChecked=false] Whether the parent has already been checked\n * @returns {ReflectionObject|null} Looked up object or `null` if none could be found\n * @variation 2\n */ // lookup(path: string, [parentAlreadyChecked: boolean])\n/**\n * Looks up the {@link Type|type} at the specified path, relative to this namespace.\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\n * @param {string|string[]} path Path to look up\n * @returns {Type} Looked up type\n * @throws {Error} If `path` does not point to a type\n */ Namespace.prototype.lookupType = function lookupType(path) {\n    var found = this.lookup(path, [\n        Type\n    ]);\n    if (!found) throw Error(\"no such type: \" + path);\n    return found;\n};\n/**\n * Looks up the values of the {@link Enum|enum} at the specified path, relative to this namespace.\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\n * @param {string|string[]} path Path to look up\n * @returns {Enum} Looked up enum\n * @throws {Error} If `path` does not point to an enum\n */ Namespace.prototype.lookupEnum = function lookupEnum(path) {\n    var found = this.lookup(path, [\n        Enum\n    ]);\n    if (!found) throw Error(\"no such Enum '\" + path + \"' in \" + this);\n    return found;\n};\n/**\n * Looks up the {@link Type|type} or {@link Enum|enum} at the specified path, relative to this namespace.\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\n * @param {string|string[]} path Path to look up\n * @returns {Type} Looked up type or enum\n * @throws {Error} If `path` does not point to a type or enum\n */ Namespace.prototype.lookupTypeOrEnum = function lookupTypeOrEnum(path) {\n    var found = this.lookup(path, [\n        Type,\n        Enum\n    ]);\n    if (!found) throw Error(\"no such Type or Enum '\" + path + \"' in \" + this);\n    return found;\n};\n/**\n * Looks up the {@link Service|service} at the specified path, relative to this namespace.\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\n * @param {string|string[]} path Path to look up\n * @returns {Service} Looked up service\n * @throws {Error} If `path` does not point to a service\n */ Namespace.prototype.lookupService = function lookupService(path) {\n    var found = this.lookup(path, [\n        Service\n    ]);\n    if (!found) throw Error(\"no such Service '\" + path + \"' in \" + this);\n    return found;\n};\n// Sets up cyclic dependencies (called in index-light)\nNamespace._configure = function(Type_, Service_, Enum_) {\n    Type = Type_;\n    Service = Service_;\n    Enum = Enum_;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protobufjs/src/namespace.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/protobufjs/src/object.js":
/*!***********************************************!*\
  !*** ./node_modules/protobufjs/src/object.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = ReflectionObject;\nReflectionObject.className = \"ReflectionObject\";\nconst OneOf = __webpack_require__(/*! ./oneof */ \"(ssr)/./node_modules/protobufjs/src/oneof.js\");\nvar util = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/protobufjs/src/util.js\");\nvar Root; // cyclic\n/* eslint-disable no-warning-comments */ // TODO: Replace with embedded proto.\nvar editions2023Defaults = {\n    enum_type: \"OPEN\",\n    field_presence: \"EXPLICIT\",\n    json_format: \"ALLOW\",\n    message_encoding: \"LENGTH_PREFIXED\",\n    repeated_field_encoding: \"PACKED\",\n    utf8_validation: \"VERIFY\"\n};\nvar proto2Defaults = {\n    enum_type: \"CLOSED\",\n    field_presence: \"EXPLICIT\",\n    json_format: \"LEGACY_BEST_EFFORT\",\n    message_encoding: \"LENGTH_PREFIXED\",\n    repeated_field_encoding: \"EXPANDED\",\n    utf8_validation: \"NONE\"\n};\nvar proto3Defaults = {\n    enum_type: \"OPEN\",\n    field_presence: \"IMPLICIT\",\n    json_format: \"ALLOW\",\n    message_encoding: \"LENGTH_PREFIXED\",\n    repeated_field_encoding: \"PACKED\",\n    utf8_validation: \"VERIFY\"\n};\n/**\n * Constructs a new reflection object instance.\n * @classdesc Base class of all reflection objects.\n * @constructor\n * @param {string} name Object name\n * @param {Object.<string,*>} [options] Declared options\n * @abstract\n */ function ReflectionObject(name, options) {\n    if (!util.isString(name)) throw TypeError(\"name must be a string\");\n    if (options && !util.isObject(options)) throw TypeError(\"options must be an object\");\n    /**\n     * Options.\n     * @type {Object.<string,*>|undefined}\n     */ this.options = options; // toJSON\n    /**\n     * Parsed Options.\n     * @type {Array.<Object.<string,*>>|undefined}\n     */ this.parsedOptions = null;\n    /**\n     * Unique name within its namespace.\n     * @type {string}\n     */ this.name = name;\n    /**\n     * The edition specified for this object.  Only relevant for top-level objects.\n     * @type {string}\n     * @private\n     */ this._edition = null;\n    /**\n     * The default edition to use for this object if none is specified.  For legacy reasons,\n     * this is proto2 except in the JSON parsing case where it was proto3.\n     * @type {string}\n     * @private\n     */ this._defaultEdition = \"proto2\";\n    /**\n     * Resolved Features.\n     * @type {object}\n     * @private\n     */ this._features = {};\n    /**\n     * Whether or not features have been resolved.\n     * @type {boolean}\n     * @private\n     */ this._featuresResolved = false;\n    /**\n     * Parent namespace.\n     * @type {Namespace|null}\n     */ this.parent = null;\n    /**\n     * Whether already resolved or not.\n     * @type {boolean}\n     */ this.resolved = false;\n    /**\n     * Comment text, if any.\n     * @type {string|null}\n     */ this.comment = null;\n    /**\n     * Defining file name.\n     * @type {string|null}\n     */ this.filename = null;\n}\nObject.defineProperties(ReflectionObject.prototype, {\n    /**\n     * Reference to the root namespace.\n     * @name ReflectionObject#root\n     * @type {Root}\n     * @readonly\n     */ root: {\n        get: function() {\n            var ptr = this;\n            while(ptr.parent !== null)ptr = ptr.parent;\n            return ptr;\n        }\n    },\n    /**\n     * Full name including leading dot.\n     * @name ReflectionObject#fullName\n     * @type {string}\n     * @readonly\n     */ fullName: {\n        get: function() {\n            var path = [\n                this.name\n            ], ptr = this.parent;\n            while(ptr){\n                path.unshift(ptr.name);\n                ptr = ptr.parent;\n            }\n            return path.join(\".\");\n        }\n    }\n});\n/**\n * Converts this reflection object to its descriptor representation.\n * @returns {Object.<string,*>} Descriptor\n * @abstract\n */ ReflectionObject.prototype.toJSON = /* istanbul ignore next */ function toJSON() {\n    throw Error(); // not implemented, shouldn't happen\n};\n/**\n * Called when this object is added to a parent.\n * @param {ReflectionObject} parent Parent added to\n * @returns {undefined}\n */ ReflectionObject.prototype.onAdd = function onAdd(parent) {\n    if (this.parent && this.parent !== parent) this.parent.remove(this);\n    this.parent = parent;\n    this.resolved = false;\n    var root = parent.root;\n    if (root instanceof Root) root._handleAdd(this);\n};\n/**\n * Called when this object is removed from a parent.\n * @param {ReflectionObject} parent Parent removed from\n * @returns {undefined}\n */ ReflectionObject.prototype.onRemove = function onRemove(parent) {\n    var root = parent.root;\n    if (root instanceof Root) root._handleRemove(this);\n    this.parent = null;\n    this.resolved = false;\n};\n/**\n * Resolves this objects type references.\n * @returns {ReflectionObject} `this`\n */ ReflectionObject.prototype.resolve = function resolve() {\n    if (this.resolved) return this;\n    if (this.root instanceof Root) this.resolved = true; // only if part of a root\n    return this;\n};\n/**\n * Resolves this objects editions features.\n * @param {string} edition The edition we're currently resolving for.\n * @returns {ReflectionObject} `this`\n */ ReflectionObject.prototype._resolveFeaturesRecursive = function _resolveFeaturesRecursive(edition) {\n    return this._resolveFeatures(this._edition || edition);\n};\n/**\n * Resolves child features from parent features\n * @param {string} edition The edition we're currently resolving for.\n * @returns {undefined}\n */ ReflectionObject.prototype._resolveFeatures = function _resolveFeatures(edition) {\n    if (this._featuresResolved) {\n        return;\n    }\n    var defaults = {};\n    /* istanbul ignore if */ if (!edition) {\n        throw new Error(\"Unknown edition for \" + this.fullName);\n    }\n    var protoFeatures = Object.assign(this.options ? Object.assign({}, this.options.features) : {}, this._inferLegacyProtoFeatures(edition));\n    if (this._edition) {\n        // For a namespace marked with a specific edition, reset defaults.\n        /* istanbul ignore else */ if (edition === \"proto2\") {\n            defaults = Object.assign({}, proto2Defaults);\n        } else if (edition === \"proto3\") {\n            defaults = Object.assign({}, proto3Defaults);\n        } else if (edition === \"2023\") {\n            defaults = Object.assign({}, editions2023Defaults);\n        } else {\n            throw new Error(\"Unknown edition: \" + edition);\n        }\n        this._features = Object.assign(defaults, protoFeatures || {});\n        this._featuresResolved = true;\n        return;\n    }\n    // fields in Oneofs aren't actually children of them, so we have to\n    // special-case it\n    /* istanbul ignore else */ if (this.partOf instanceof OneOf) {\n        var lexicalParentFeaturesCopy = Object.assign({}, this.partOf._features);\n        this._features = Object.assign(lexicalParentFeaturesCopy, protoFeatures || {});\n    } else if (this.declaringField) {\n    // Skip feature resolution of sister fields.\n    } else if (this.parent) {\n        var parentFeaturesCopy = Object.assign({}, this.parent._features);\n        this._features = Object.assign(parentFeaturesCopy, protoFeatures || {});\n    } else {\n        throw new Error(\"Unable to find a parent for \" + this.fullName);\n    }\n    if (this.extensionField) {\n        // Sister fields should have the same features as their extensions.\n        this.extensionField._features = this._features;\n    }\n    this._featuresResolved = true;\n};\n/**\n * Infers features from legacy syntax that may have been specified differently.\n * in older editions.\n * @param {string|undefined} edition The edition this proto is on, or undefined if pre-editions\n * @returns {object} The feature values to override\n */ ReflectionObject.prototype._inferLegacyProtoFeatures = function _inferLegacyProtoFeatures() {\n    return {};\n};\n/**\n * Gets an option value.\n * @param {string} name Option name\n * @returns {*} Option value or `undefined` if not set\n */ ReflectionObject.prototype.getOption = function getOption(name) {\n    if (this.options) return this.options[name];\n    return undefined;\n};\n/**\n * Sets an option.\n * @param {string} name Option name\n * @param {*} value Option value\n * @param {boolean|undefined} [ifNotSet] Sets the option only if it isn't currently set\n * @returns {ReflectionObject} `this`\n */ ReflectionObject.prototype.setOption = function setOption(name, value, ifNotSet) {\n    if (!this.options) this.options = {};\n    if (/^features\\./.test(name)) {\n        util.setProperty(this.options, name, value, ifNotSet);\n    } else if (!ifNotSet || this.options[name] === undefined) {\n        if (this.getOption(name) !== value) this.resolved = false;\n        this.options[name] = value;\n    }\n    return this;\n};\n/**\n * Sets a parsed option.\n * @param {string} name parsed Option name\n * @param {*} value Option value\n * @param {string} propName dot '.' delimited full path of property within the option to set. if undefined\\empty, will add a new option with that value\n * @returns {ReflectionObject} `this`\n */ ReflectionObject.prototype.setParsedOption = function setParsedOption(name, value, propName) {\n    if (!this.parsedOptions) {\n        this.parsedOptions = [];\n    }\n    var parsedOptions = this.parsedOptions;\n    if (propName) {\n        // If setting a sub property of an option then try to merge it\n        // with an existing option\n        var opt = parsedOptions.find(function(opt) {\n            return Object.prototype.hasOwnProperty.call(opt, name);\n        });\n        if (opt) {\n            // If we found an existing option - just merge the property value\n            // (If it's a feature, will just write over)\n            var newValue = opt[name];\n            util.setProperty(newValue, propName, value);\n        } else {\n            // otherwise, create a new option, set its property and add it to the list\n            opt = {};\n            opt[name] = util.setProperty({}, propName, value);\n            parsedOptions.push(opt);\n        }\n    } else {\n        // Always create a new option when setting the value of the option itself\n        var newOpt = {};\n        newOpt[name] = value;\n        parsedOptions.push(newOpt);\n    }\n    return this;\n};\n/**\n * Sets multiple options.\n * @param {Object.<string,*>} options Options to set\n * @param {boolean} [ifNotSet] Sets an option only if it isn't currently set\n * @returns {ReflectionObject} `this`\n */ ReflectionObject.prototype.setOptions = function setOptions(options, ifNotSet) {\n    if (options) for(var keys = Object.keys(options), i = 0; i < keys.length; ++i)this.setOption(keys[i], options[keys[i]], ifNotSet);\n    return this;\n};\n/**\n * Converts this instance to its string representation.\n * @returns {string} Class name[, space, full name]\n */ ReflectionObject.prototype.toString = function toString() {\n    var className = this.constructor.className, fullName = this.fullName;\n    if (fullName.length) return className + \" \" + fullName;\n    return className;\n};\n/**\n * Converts the edition this object is pinned to for JSON format.\n * @returns {string|undefined} The edition string for JSON representation\n */ ReflectionObject.prototype._editionToJSON = function _editionToJSON() {\n    if (!this._edition || this._edition === \"proto3\") {\n        // Avoid emitting proto3 since we need to default to it for backwards\n        // compatibility anyway.\n        return undefined;\n    }\n    return this._edition;\n};\n// Sets up cyclic dependencies (called in index-light)\nReflectionObject._configure = function(Root_) {\n    Root = Root_;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protobufjs/src/object.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/protobufjs/src/oneof.js":
/*!**********************************************!*\
  !*** ./node_modules/protobufjs/src/oneof.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = OneOf;\n// extends ReflectionObject\nvar ReflectionObject = __webpack_require__(/*! ./object */ \"(ssr)/./node_modules/protobufjs/src/object.js\");\n((OneOf.prototype = Object.create(ReflectionObject.prototype)).constructor = OneOf).className = \"OneOf\";\nvar Field = __webpack_require__(/*! ./field */ \"(ssr)/./node_modules/protobufjs/src/field.js\"), util = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/protobufjs/src/util.js\");\n/**\n * Constructs a new oneof instance.\n * @classdesc Reflected oneof.\n * @extends ReflectionObject\n * @constructor\n * @param {string} name Oneof name\n * @param {string[]|Object.<string,*>} [fieldNames] Field names\n * @param {Object.<string,*>} [options] Declared options\n * @param {string} [comment] Comment associated with this field\n */ function OneOf(name, fieldNames, options, comment) {\n    if (!Array.isArray(fieldNames)) {\n        options = fieldNames;\n        fieldNames = undefined;\n    }\n    ReflectionObject.call(this, name, options);\n    /* istanbul ignore if */ if (!(fieldNames === undefined || Array.isArray(fieldNames))) throw TypeError(\"fieldNames must be an Array\");\n    /**\n     * Field names that belong to this oneof.\n     * @type {string[]}\n     */ this.oneof = fieldNames || []; // toJSON, marker\n    /**\n     * Fields that belong to this oneof as an array for iteration.\n     * @type {Field[]}\n     * @readonly\n     */ this.fieldsArray = []; // declared readonly for conformance, possibly not yet added to parent\n    /**\n     * Comment for this field.\n     * @type {string|null}\n     */ this.comment = comment;\n}\n/**\n * Oneof descriptor.\n * @interface IOneOf\n * @property {Array.<string>} oneof Oneof field names\n * @property {Object.<string,*>} [options] Oneof options\n */ /**\n * Constructs a oneof from a oneof descriptor.\n * @param {string} name Oneof name\n * @param {IOneOf} json Oneof descriptor\n * @returns {OneOf} Created oneof\n * @throws {TypeError} If arguments are invalid\n */ OneOf.fromJSON = function fromJSON(name, json) {\n    return new OneOf(name, json.oneof, json.options, json.comment);\n};\n/**\n * Converts this oneof to a oneof descriptor.\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {IOneOf} Oneof descriptor\n */ OneOf.prototype.toJSON = function toJSON(toJSONOptions) {\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n    return util.toObject([\n        \"options\",\n        this.options,\n        \"oneof\",\n        this.oneof,\n        \"comment\",\n        keepComments ? this.comment : undefined\n    ]);\n};\n/**\n * Adds the fields of the specified oneof to the parent if not already done so.\n * @param {OneOf} oneof The oneof\n * @returns {undefined}\n * @inner\n * @ignore\n */ function addFieldsToParent(oneof) {\n    if (oneof.parent) {\n        for(var i = 0; i < oneof.fieldsArray.length; ++i)if (!oneof.fieldsArray[i].parent) oneof.parent.add(oneof.fieldsArray[i]);\n    }\n}\n/**\n * Adds a field to this oneof and removes it from its current parent, if any.\n * @param {Field} field Field to add\n * @returns {OneOf} `this`\n */ OneOf.prototype.add = function add(field) {\n    /* istanbul ignore if */ if (!(field instanceof Field)) throw TypeError(\"field must be a Field\");\n    if (field.parent && field.parent !== this.parent) field.parent.remove(field);\n    this.oneof.push(field.name);\n    this.fieldsArray.push(field);\n    field.partOf = this; // field.parent remains null\n    addFieldsToParent(this);\n    return this;\n};\n/**\n * Removes a field from this oneof and puts it back to the oneof's parent.\n * @param {Field} field Field to remove\n * @returns {OneOf} `this`\n */ OneOf.prototype.remove = function remove(field) {\n    /* istanbul ignore if */ if (!(field instanceof Field)) throw TypeError(\"field must be a Field\");\n    var index = this.fieldsArray.indexOf(field);\n    /* istanbul ignore if */ if (index < 0) throw Error(field + \" is not a member of \" + this);\n    this.fieldsArray.splice(index, 1);\n    index = this.oneof.indexOf(field.name);\n    /* istanbul ignore else */ if (index > -1) this.oneof.splice(index, 1);\n    field.partOf = null;\n    return this;\n};\n/**\n * @override\n */ OneOf.prototype.onAdd = function onAdd(parent) {\n    ReflectionObject.prototype.onAdd.call(this, parent);\n    var self = this;\n    // Collect present fields\n    for(var i = 0; i < this.oneof.length; ++i){\n        var field = parent.get(this.oneof[i]);\n        if (field && !field.partOf) {\n            field.partOf = self;\n            self.fieldsArray.push(field);\n        }\n    }\n    // Add not yet present fields\n    addFieldsToParent(this);\n};\n/**\n * @override\n */ OneOf.prototype.onRemove = function onRemove(parent) {\n    for(var i = 0, field; i < this.fieldsArray.length; ++i)if ((field = this.fieldsArray[i]).parent) field.parent.remove(field);\n    ReflectionObject.prototype.onRemove.call(this, parent);\n};\n/**\n * Determines whether this field corresponds to a synthetic oneof created for\n * a proto3 optional field.  No behavioral logic should depend on this, but it\n * can be relevant for reflection.\n * @name OneOf#isProto3Optional\n * @type {boolean}\n * @readonly\n */ Object.defineProperty(OneOf.prototype, \"isProto3Optional\", {\n    get: function() {\n        if (this.fieldsArray == null || this.fieldsArray.length !== 1) {\n            return false;\n        }\n        var field = this.fieldsArray[0];\n        return field.options != null && field.options[\"proto3_optional\"] === true;\n    }\n});\n/**\n * Decorator function as returned by {@link OneOf.d} (TypeScript).\n * @typedef OneOfDecorator\n * @type {function}\n * @param {Object} prototype Target prototype\n * @param {string} oneofName OneOf name\n * @returns {undefined}\n */ /**\n * OneOf decorator (TypeScript).\n * @function\n * @param {...string} fieldNames Field names\n * @returns {OneOfDecorator} Decorator function\n * @template T extends string\n */ OneOf.d = function decorateOneOf() {\n    var fieldNames = new Array(arguments.length), index = 0;\n    while(index < arguments.length)fieldNames[index] = arguments[index++];\n    return function oneOfDecorator(prototype, oneofName) {\n        util.decorateType(prototype.constructor).add(new OneOf(oneofName, fieldNames));\n        Object.defineProperty(prototype, oneofName, {\n            get: util.oneOfGetter(fieldNames),\n            set: util.oneOfSetter(fieldNames)\n        });\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protobufjs/src/oneof.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/protobufjs/src/parse.js":
/*!**********************************************!*\
  !*** ./node_modules/protobufjs/src/parse.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = parse;\nparse.filename = null;\nparse.defaults = {\n    keepCase: false\n};\nvar tokenize = __webpack_require__(/*! ./tokenize */ \"(ssr)/./node_modules/protobufjs/src/tokenize.js\"), Root = __webpack_require__(/*! ./root */ \"(ssr)/./node_modules/protobufjs/src/root.js\"), Type = __webpack_require__(/*! ./type */ \"(ssr)/./node_modules/protobufjs/src/type.js\"), Field = __webpack_require__(/*! ./field */ \"(ssr)/./node_modules/protobufjs/src/field.js\"), MapField = __webpack_require__(/*! ./mapfield */ \"(ssr)/./node_modules/protobufjs/src/mapfield.js\"), OneOf = __webpack_require__(/*! ./oneof */ \"(ssr)/./node_modules/protobufjs/src/oneof.js\"), Enum = __webpack_require__(/*! ./enum */ \"(ssr)/./node_modules/protobufjs/src/enum.js\"), Service = __webpack_require__(/*! ./service */ \"(ssr)/./node_modules/protobufjs/src/service.js\"), Method = __webpack_require__(/*! ./method */ \"(ssr)/./node_modules/protobufjs/src/method.js\"), ReflectionObject = __webpack_require__(/*! ./object */ \"(ssr)/./node_modules/protobufjs/src/object.js\"), types = __webpack_require__(/*! ./types */ \"(ssr)/./node_modules/protobufjs/src/types.js\"), util = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/protobufjs/src/util.js\");\nvar base10Re = /^[1-9][0-9]*$/, base10NegRe = /^-?[1-9][0-9]*$/, base16Re = /^0[x][0-9a-fA-F]+$/, base16NegRe = /^-?0[x][0-9a-fA-F]+$/, base8Re = /^0[0-7]+$/, base8NegRe = /^-?0[0-7]+$/, numberRe = /^(?![eE])[0-9]*(?:\\.[0-9]*)?(?:[eE][+-]?[0-9]+)?$/, nameRe = /^[a-zA-Z_][a-zA-Z_0-9]*$/, typeRefRe = /^(?:\\.?[a-zA-Z_][a-zA-Z_0-9]*)(?:\\.[a-zA-Z_][a-zA-Z_0-9]*)*$/;\n/**\n * Result object returned from {@link parse}.\n * @interface IParserResult\n * @property {string|undefined} package Package name, if declared\n * @property {string[]|undefined} imports Imports, if any\n * @property {string[]|undefined} weakImports Weak imports, if any\n * @property {Root} root Populated root instance\n */ /**\n * Options modifying the behavior of {@link parse}.\n * @interface IParseOptions\n * @property {boolean} [keepCase=false] Keeps field casing instead of converting to camel case\n * @property {boolean} [alternateCommentMode=false] Recognize double-slash comments in addition to doc-block comments.\n * @property {boolean} [preferTrailingComment=false] Use trailing comment when both leading comment and trailing comment exist.\n */ /**\n * Options modifying the behavior of JSON serialization.\n * @interface IToJSONOptions\n * @property {boolean} [keepComments=false] Serializes comments.\n */ /**\n * Parses the given .proto source and returns an object with the parsed contents.\n * @param {string} source Source contents\n * @param {Root} root Root to populate\n * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\n * @returns {IParserResult} Parser result\n * @property {string} filename=null Currently processing file name for error reporting, if known\n * @property {IParseOptions} defaults Default {@link IParseOptions}\n */ function parse(source, root, options) {\n    /* eslint-disable callback-return */ if (!(root instanceof Root)) {\n        options = root;\n        root = new Root();\n    }\n    if (!options) options = parse.defaults;\n    var preferTrailingComment = options.preferTrailingComment || false;\n    var tn = tokenize(source, options.alternateCommentMode || false), next = tn.next, push = tn.push, peek = tn.peek, skip = tn.skip, cmnt = tn.cmnt;\n    var head = true, pkg, imports, weakImports, edition = \"proto2\";\n    var ptr = root;\n    var topLevelObjects = [];\n    var topLevelOptions = {};\n    var applyCase = options.keepCase ? function(name) {\n        return name;\n    } : util.camelCase;\n    function resolveFileFeatures() {\n        topLevelObjects.forEach((obj)=>{\n            obj._edition = edition;\n            Object.keys(topLevelOptions).forEach((opt)=>{\n                if (obj.getOption(opt) !== undefined) return;\n                obj.setOption(opt, topLevelOptions[opt], true);\n            });\n        });\n    }\n    /* istanbul ignore next */ function illegal(token, name, insideTryCatch) {\n        var filename = parse.filename;\n        if (!insideTryCatch) parse.filename = null;\n        return Error(\"illegal \" + (name || \"token\") + \" '\" + token + \"' (\" + (filename ? filename + \", \" : \"\") + \"line \" + tn.line + \")\");\n    }\n    function readString() {\n        var values = [], token;\n        do {\n            /* istanbul ignore if */ if ((token = next()) !== '\"' && token !== \"'\") throw illegal(token);\n            values.push(next());\n            skip(token);\n            token = peek();\n        }while (token === '\"' || token === \"'\");\n        return values.join(\"\");\n    }\n    function readValue(acceptTypeRef) {\n        var token = next();\n        switch(token){\n            case \"'\":\n            case '\"':\n                push(token);\n                return readString();\n            case \"true\":\n            case \"TRUE\":\n                return true;\n            case \"false\":\n            case \"FALSE\":\n                return false;\n        }\n        try {\n            return parseNumber(token, /* insideTryCatch */ true);\n        } catch (e) {\n            /* istanbul ignore else */ if (acceptTypeRef && typeRefRe.test(token)) return token;\n            /* istanbul ignore next */ throw illegal(token, \"value\");\n        }\n    }\n    function readRanges(target, acceptStrings) {\n        var token, start;\n        do {\n            if (acceptStrings && ((token = peek()) === '\"' || token === \"'\")) {\n                var str = readString();\n                target.push(str);\n                if (edition >= 2023) {\n                    throw illegal(str, \"id\");\n                }\n            } else {\n                try {\n                    target.push([\n                        start = parseId(next()),\n                        skip(\"to\", true) ? parseId(next()) : start\n                    ]);\n                } catch (err) {\n                    if (acceptStrings && typeRefRe.test(token) && edition >= 2023) {\n                        target.push(token);\n                    } else {\n                        throw err;\n                    }\n                }\n            }\n        }while (skip(\",\", true));\n        var dummy = {\n            options: undefined\n        };\n        dummy.setOption = function(name, value) {\n            if (this.options === undefined) this.options = {};\n            this.options[name] = value;\n        };\n        ifBlock(dummy, function parseRange_block(token) {\n            /* istanbul ignore else */ if (token === \"option\") {\n                parseOption(dummy, token); // skip\n                skip(\";\");\n            } else throw illegal(token);\n        }, function parseRange_line() {\n            parseInlineOptions(dummy); // skip\n        });\n    }\n    function parseNumber(token, insideTryCatch) {\n        var sign = 1;\n        if (token.charAt(0) === \"-\") {\n            sign = -1;\n            token = token.substring(1);\n        }\n        switch(token){\n            case \"inf\":\n            case \"INF\":\n            case \"Inf\":\n                return sign * Infinity;\n            case \"nan\":\n            case \"NAN\":\n            case \"Nan\":\n            case \"NaN\":\n                return NaN;\n            case \"0\":\n                return 0;\n        }\n        if (base10Re.test(token)) return sign * parseInt(token, 10);\n        if (base16Re.test(token)) return sign * parseInt(token, 16);\n        if (base8Re.test(token)) return sign * parseInt(token, 8);\n        /* istanbul ignore else */ if (numberRe.test(token)) return sign * parseFloat(token);\n        /* istanbul ignore next */ throw illegal(token, \"number\", insideTryCatch);\n    }\n    function parseId(token, acceptNegative) {\n        switch(token){\n            case \"max\":\n            case \"MAX\":\n            case \"Max\":\n                return 536870911;\n            case \"0\":\n                return 0;\n        }\n        /* istanbul ignore if */ if (!acceptNegative && token.charAt(0) === \"-\") throw illegal(token, \"id\");\n        if (base10NegRe.test(token)) return parseInt(token, 10);\n        if (base16NegRe.test(token)) return parseInt(token, 16);\n        /* istanbul ignore else */ if (base8NegRe.test(token)) return parseInt(token, 8);\n        /* istanbul ignore next */ throw illegal(token, \"id\");\n    }\n    function parsePackage() {\n        /* istanbul ignore if */ if (pkg !== undefined) throw illegal(\"package\");\n        pkg = next();\n        /* istanbul ignore if */ if (!typeRefRe.test(pkg)) throw illegal(pkg, \"name\");\n        ptr = ptr.define(pkg);\n        skip(\";\");\n    }\n    function parseImport() {\n        var token = peek();\n        var whichImports;\n        switch(token){\n            case \"weak\":\n                whichImports = weakImports || (weakImports = []);\n                next();\n                break;\n            case \"public\":\n                next();\n            // eslint-disable-next-line no-fallthrough\n            default:\n                whichImports = imports || (imports = []);\n                break;\n        }\n        token = readString();\n        skip(\";\");\n        whichImports.push(token);\n    }\n    function parseSyntax() {\n        skip(\"=\");\n        edition = readString();\n        /* istanbul ignore if */ if (edition < 2023) throw illegal(edition, \"syntax\");\n        skip(\";\");\n    }\n    function parseEdition() {\n        skip(\"=\");\n        edition = readString();\n        const supportedEditions = [\n            \"2023\"\n        ];\n        /* istanbul ignore if */ if (!supportedEditions.includes(edition)) throw illegal(edition, \"edition\");\n        skip(\";\");\n    }\n    function parseCommon(parent, token) {\n        switch(token){\n            case \"option\":\n                parseOption(parent, token);\n                skip(\";\");\n                return true;\n            case \"message\":\n                parseType(parent, token);\n                return true;\n            case \"enum\":\n                parseEnum(parent, token);\n                return true;\n            case \"service\":\n                parseService(parent, token);\n                return true;\n            case \"extend\":\n                parseExtension(parent, token);\n                return true;\n        }\n        return false;\n    }\n    function ifBlock(obj, fnIf, fnElse) {\n        var trailingLine = tn.line;\n        if (obj) {\n            if (typeof obj.comment !== \"string\") {\n                obj.comment = cmnt(); // try block-type comment\n            }\n            obj.filename = parse.filename;\n        }\n        if (skip(\"{\", true)) {\n            var token;\n            while((token = next()) !== \"}\")fnIf(token);\n            skip(\";\", true);\n        } else {\n            if (fnElse) fnElse();\n            skip(\";\");\n            if (obj && (typeof obj.comment !== \"string\" || preferTrailingComment)) obj.comment = cmnt(trailingLine) || obj.comment; // try line-type comment\n        }\n    }\n    function parseType(parent, token) {\n        /* istanbul ignore if */ if (!nameRe.test(token = next())) throw illegal(token, \"type name\");\n        var type = new Type(token);\n        ifBlock(type, function parseType_block(token) {\n            if (parseCommon(type, token)) return;\n            switch(token){\n                case \"map\":\n                    parseMapField(type, token);\n                    break;\n                case \"required\":\n                    if (edition !== \"proto2\") throw illegal(token);\n                /* eslint-disable no-fallthrough */ case \"repeated\":\n                    parseField(type, token);\n                    break;\n                case \"optional\":\n                    /* istanbul ignore if */ if (edition === \"proto3\") {\n                        parseField(type, \"proto3_optional\");\n                    } else if (edition !== \"proto2\") {\n                        throw illegal(token);\n                    } else {\n                        parseField(type, \"optional\");\n                    }\n                    break;\n                case \"oneof\":\n                    parseOneOf(type, token);\n                    break;\n                case \"extensions\":\n                    readRanges(type.extensions || (type.extensions = []));\n                    break;\n                case \"reserved\":\n                    readRanges(type.reserved || (type.reserved = []), true);\n                    break;\n                default:\n                    /* istanbul ignore if */ if (edition === \"proto2\" || !typeRefRe.test(token)) {\n                        throw illegal(token);\n                    }\n                    push(token);\n                    parseField(type, \"optional\");\n                    break;\n            }\n        });\n        parent.add(type);\n        if (parent === ptr) {\n            topLevelObjects.push(type);\n        }\n    }\n    function parseField(parent, rule, extend) {\n        var type = next();\n        if (type === \"group\") {\n            parseGroup(parent, rule);\n            return;\n        }\n        // Type names can consume multiple tokens, in multiple variants:\n        //    package.subpackage   field       tokens: \"package.subpackage\" [TYPE NAME ENDS HERE] \"field\"\n        //    package . subpackage field       tokens: \"package\" \".\" \"subpackage\" [TYPE NAME ENDS HERE] \"field\"\n        //    package.  subpackage field       tokens: \"package.\" \"subpackage\" [TYPE NAME ENDS HERE] \"field\"\n        //    package  .subpackage field       tokens: \"package\" \".subpackage\" [TYPE NAME ENDS HERE] \"field\"\n        // Keep reading tokens until we get a type name with no period at the end,\n        // and the next token does not start with a period.\n        while(type.endsWith(\".\") || peek().startsWith(\".\")){\n            type += next();\n        }\n        /* istanbul ignore if */ if (!typeRefRe.test(type)) throw illegal(type, \"type\");\n        var name = next();\n        /* istanbul ignore if */ if (!nameRe.test(name)) throw illegal(name, \"name\");\n        name = applyCase(name);\n        skip(\"=\");\n        var field = new Field(name, parseId(next()), type, rule, extend);\n        ifBlock(field, function parseField_block(token) {\n            /* istanbul ignore else */ if (token === \"option\") {\n                parseOption(field, token);\n                skip(\";\");\n            } else throw illegal(token);\n        }, function parseField_line() {\n            parseInlineOptions(field);\n        });\n        if (rule === \"proto3_optional\") {\n            // for proto3 optional fields, we create a single-member Oneof to mimic \"optional\" behavior\n            var oneof = new OneOf(\"_\" + name);\n            field.setOption(\"proto3_optional\", true);\n            oneof.add(field);\n            parent.add(oneof);\n        } else {\n            parent.add(field);\n        }\n        if (parent === ptr) {\n            topLevelObjects.push(field);\n        }\n    }\n    function parseGroup(parent, rule) {\n        if (edition >= 2023) {\n            throw illegal(\"group\");\n        }\n        var name = next();\n        /* istanbul ignore if */ if (!nameRe.test(name)) throw illegal(name, \"name\");\n        var fieldName = util.lcFirst(name);\n        if (name === fieldName) name = util.ucFirst(name);\n        skip(\"=\");\n        var id = parseId(next());\n        var type = new Type(name);\n        type.group = true;\n        var field = new Field(fieldName, id, name, rule);\n        field.filename = parse.filename;\n        ifBlock(type, function parseGroup_block(token) {\n            switch(token){\n                case \"option\":\n                    parseOption(type, token);\n                    skip(\";\");\n                    break;\n                case \"required\":\n                case \"repeated\":\n                    parseField(type, token);\n                    break;\n                case \"optional\":\n                    /* istanbul ignore if */ if (edition === \"proto3\") {\n                        parseField(type, \"proto3_optional\");\n                    } else {\n                        parseField(type, \"optional\");\n                    }\n                    break;\n                case \"message\":\n                    parseType(type, token);\n                    break;\n                case \"enum\":\n                    parseEnum(type, token);\n                    break;\n                case \"reserved\":\n                    readRanges(type.reserved || (type.reserved = []), true);\n                    break;\n                /* istanbul ignore next */ default:\n                    throw illegal(token); // there are no groups with proto3 semantics\n            }\n        });\n        parent.add(type).add(field);\n    }\n    function parseMapField(parent) {\n        skip(\"<\");\n        var keyType = next();\n        /* istanbul ignore if */ if (types.mapKey[keyType] === undefined) throw illegal(keyType, \"type\");\n        skip(\",\");\n        var valueType = next();\n        /* istanbul ignore if */ if (!typeRefRe.test(valueType)) throw illegal(valueType, \"type\");\n        skip(\">\");\n        var name = next();\n        /* istanbul ignore if */ if (!nameRe.test(name)) throw illegal(name, \"name\");\n        skip(\"=\");\n        var field = new MapField(applyCase(name), parseId(next()), keyType, valueType);\n        ifBlock(field, function parseMapField_block(token) {\n            /* istanbul ignore else */ if (token === \"option\") {\n                parseOption(field, token);\n                skip(\";\");\n            } else throw illegal(token);\n        }, function parseMapField_line() {\n            parseInlineOptions(field);\n        });\n        parent.add(field);\n    }\n    function parseOneOf(parent, token) {\n        /* istanbul ignore if */ if (!nameRe.test(token = next())) throw illegal(token, \"name\");\n        var oneof = new OneOf(applyCase(token));\n        ifBlock(oneof, function parseOneOf_block(token) {\n            if (token === \"option\") {\n                parseOption(oneof, token);\n                skip(\";\");\n            } else {\n                push(token);\n                parseField(oneof, \"optional\");\n            }\n        });\n        parent.add(oneof);\n    }\n    function parseEnum(parent, token) {\n        /* istanbul ignore if */ if (!nameRe.test(token = next())) throw illegal(token, \"name\");\n        var enm = new Enum(token);\n        ifBlock(enm, function parseEnum_block(token) {\n            switch(token){\n                case \"option\":\n                    parseOption(enm, token);\n                    skip(\";\");\n                    break;\n                case \"reserved\":\n                    readRanges(enm.reserved || (enm.reserved = []), true);\n                    if (enm.reserved === undefined) enm.reserved = [];\n                    break;\n                default:\n                    parseEnumValue(enm, token);\n            }\n        });\n        parent.add(enm);\n        if (parent === ptr) {\n            topLevelObjects.push(enm);\n        }\n    }\n    function parseEnumValue(parent, token) {\n        /* istanbul ignore if */ if (!nameRe.test(token)) throw illegal(token, \"name\");\n        skip(\"=\");\n        var value = parseId(next(), true), dummy = {\n            options: undefined\n        };\n        dummy.getOption = function(name) {\n            return this.options[name];\n        };\n        dummy.setOption = function(name, value) {\n            ReflectionObject.prototype.setOption.call(dummy, name, value);\n        };\n        dummy.setParsedOption = function() {\n            return undefined;\n        };\n        ifBlock(dummy, function parseEnumValue_block(token) {\n            /* istanbul ignore else */ if (token === \"option\") {\n                parseOption(dummy, token); // skip\n                skip(\";\");\n            } else throw illegal(token);\n        }, function parseEnumValue_line() {\n            parseInlineOptions(dummy); // skip\n        });\n        parent.add(token, value, dummy.comment, dummy.parsedOptions || dummy.options);\n    }\n    function parseOption(parent, token) {\n        var option;\n        var propName;\n        var isOption = true;\n        if (token === \"option\") {\n            token = next();\n        }\n        while(token !== \"=\"){\n            if (token === \"(\") {\n                var parensValue = next();\n                skip(\")\");\n                token = \"(\" + parensValue + \")\";\n            }\n            if (isOption) {\n                isOption = false;\n                if (token.includes(\".\") && !token.includes(\"(\")) {\n                    var tokens = token.split(\".\");\n                    option = tokens[0] + \".\";\n                    token = tokens[1];\n                    continue;\n                }\n                option = token;\n            } else {\n                propName = propName ? propName += token : token;\n            }\n            token = next();\n        }\n        var name = propName ? option.concat(propName) : option;\n        var optionValue = parseOptionValue(parent, name);\n        propName = propName && propName[0] === \".\" ? propName.slice(1) : propName;\n        option = option && option[option.length - 1] === \".\" ? option.slice(0, -1) : option;\n        setParsedOption(parent, option, optionValue, propName);\n    }\n    function parseOptionValue(parent, name) {\n        // { a: \"foo\" b { c: \"bar\" } }\n        if (skip(\"{\", true)) {\n            var objectResult = {};\n            while(!skip(\"}\", true)){\n                /* istanbul ignore if */ if (!nameRe.test(token = next())) {\n                    throw illegal(token, \"name\");\n                }\n                if (token === null) {\n                    throw illegal(token, \"end of input\");\n                }\n                var value;\n                var propName = token;\n                skip(\":\", true);\n                if (peek() === \"{\") {\n                    // option (my_option) = {\n                    //     repeated_value: [ \"foo\", \"bar\" ]\n                    // };\n                    value = parseOptionValue(parent, name + \".\" + token);\n                } else if (peek() === \"[\") {\n                    value = [];\n                    var lastValue;\n                    if (skip(\"[\", true)) {\n                        do {\n                            lastValue = readValue(true);\n                            value.push(lastValue);\n                        }while (skip(\",\", true));\n                        skip(\"]\");\n                        if (typeof lastValue !== \"undefined\") {\n                            setOption(parent, name + \".\" + token, lastValue);\n                        }\n                    }\n                } else {\n                    value = readValue(true);\n                    setOption(parent, name + \".\" + token, value);\n                }\n                var prevValue = objectResult[propName];\n                if (prevValue) value = [].concat(prevValue).concat(value);\n                objectResult[propName] = value;\n                // Semicolons and commas can be optional\n                skip(\",\", true);\n                skip(\";\", true);\n            }\n            return objectResult;\n        }\n        var simpleValue = readValue(true);\n        setOption(parent, name, simpleValue);\n        return simpleValue;\n    // Does not enforce a delimiter to be universal\n    }\n    function setOption(parent, name, value) {\n        if (ptr === parent && /^features\\./.test(name)) {\n            topLevelOptions[name] = value;\n            return;\n        }\n        if (parent.setOption) parent.setOption(name, value);\n    }\n    function setParsedOption(parent, name, value, propName) {\n        if (parent.setParsedOption) parent.setParsedOption(name, value, propName);\n    }\n    function parseInlineOptions(parent) {\n        if (skip(\"[\", true)) {\n            do {\n                parseOption(parent, \"option\");\n            }while (skip(\",\", true));\n            skip(\"]\");\n        }\n        return parent;\n    }\n    function parseService(parent, token) {\n        /* istanbul ignore if */ if (!nameRe.test(token = next())) throw illegal(token, \"service name\");\n        var service = new Service(token);\n        ifBlock(service, function parseService_block(token) {\n            if (parseCommon(service, token)) {\n                return;\n            }\n            /* istanbul ignore else */ if (token === \"rpc\") parseMethod(service, token);\n            else throw illegal(token);\n        });\n        parent.add(service);\n        if (parent === ptr) {\n            topLevelObjects.push(service);\n        }\n    }\n    function parseMethod(parent, token) {\n        // Get the comment of the preceding line now (if one exists) in case the\n        // method is defined across multiple lines.\n        var commentText = cmnt();\n        var type = token;\n        /* istanbul ignore if */ if (!nameRe.test(token = next())) throw illegal(token, \"name\");\n        var name = token, requestType, requestStream, responseType, responseStream;\n        skip(\"(\");\n        if (skip(\"stream\", true)) requestStream = true;\n        /* istanbul ignore if */ if (!typeRefRe.test(token = next())) throw illegal(token);\n        requestType = token;\n        skip(\")\");\n        skip(\"returns\");\n        skip(\"(\");\n        if (skip(\"stream\", true)) responseStream = true;\n        /* istanbul ignore if */ if (!typeRefRe.test(token = next())) throw illegal(token);\n        responseType = token;\n        skip(\")\");\n        var method = new Method(name, type, requestType, responseType, requestStream, responseStream);\n        method.comment = commentText;\n        ifBlock(method, function parseMethod_block(token) {\n            /* istanbul ignore else */ if (token === \"option\") {\n                parseOption(method, token);\n                skip(\";\");\n            } else throw illegal(token);\n        });\n        parent.add(method);\n    }\n    function parseExtension(parent, token) {\n        /* istanbul ignore if */ if (!typeRefRe.test(token = next())) throw illegal(token, \"reference\");\n        var reference = token;\n        ifBlock(null, function parseExtension_block(token) {\n            switch(token){\n                case \"required\":\n                case \"repeated\":\n                    parseField(parent, token, reference);\n                    break;\n                case \"optional\":\n                    /* istanbul ignore if */ if (edition === \"proto3\") {\n                        parseField(parent, \"proto3_optional\", reference);\n                    } else {\n                        parseField(parent, \"optional\", reference);\n                    }\n                    break;\n                default:\n                    /* istanbul ignore if */ if (edition === \"proto2\" || !typeRefRe.test(token)) throw illegal(token);\n                    push(token);\n                    parseField(parent, \"optional\", reference);\n                    break;\n            }\n        });\n    }\n    var token;\n    while((token = next()) !== null){\n        switch(token){\n            case \"package\":\n                /* istanbul ignore if */ if (!head) throw illegal(token);\n                parsePackage();\n                break;\n            case \"import\":\n                /* istanbul ignore if */ if (!head) throw illegal(token);\n                parseImport();\n                break;\n            case \"syntax\":\n                /* istanbul ignore if */ if (!head) throw illegal(token);\n                parseSyntax();\n                break;\n            case \"edition\":\n                /* istanbul ignore if */ if (!head) throw illegal(token);\n                parseEdition();\n                break;\n            case \"option\":\n                parseOption(ptr, token);\n                skip(\";\", true);\n                break;\n            default:\n                /* istanbul ignore else */ if (parseCommon(ptr, token)) {\n                    head = false;\n                    continue;\n                }\n                /* istanbul ignore next */ throw illegal(token);\n        }\n    }\n    resolveFileFeatures();\n    parse.filename = null;\n    return {\n        \"package\": pkg,\n        \"imports\": imports,\n        weakImports: weakImports,\n        root: root\n    };\n} /**\n * Parses the given .proto source and returns an object with the parsed contents.\n * @name parse\n * @function\n * @param {string} source Source contents\n * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\n * @returns {IParserResult} Parser result\n * @property {string} filename=null Currently processing file name for error reporting, if known\n * @property {IParseOptions} defaults Default {@link IParseOptions}\n * @variation 2\n */ \n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protobufjs/src/parse.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/protobufjs/src/reader.js":
/*!***********************************************!*\
  !*** ./node_modules/protobufjs/src/reader.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = Reader;\nvar util = __webpack_require__(/*! ./util/minimal */ \"(ssr)/./node_modules/protobufjs/src/util/minimal.js\");\nvar BufferReader; // cyclic\nvar LongBits = util.LongBits, utf8 = util.utf8;\n/* istanbul ignore next */ function indexOutOfRange(reader, writeLength) {\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\n}\n/**\n * Constructs a new reader instance using the specified buffer.\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n * @param {Uint8Array} buffer Buffer to read from\n */ function Reader(buffer) {\n    /**\n     * Read buffer.\n     * @type {Uint8Array}\n     */ this.buf = buffer;\n    /**\n     * Read buffer position.\n     * @type {number}\n     */ this.pos = 0;\n    /**\n     * Read buffer length.\n     * @type {number}\n     */ this.len = buffer.length;\n}\nvar create_array = typeof Uint8Array !== \"undefined\" ? function create_typed_array(buffer) {\n    if (buffer instanceof Uint8Array || Array.isArray(buffer)) return new Reader(buffer);\n    throw Error(\"illegal buffer\");\n} : function create_array(buffer) {\n    if (Array.isArray(buffer)) return new Reader(buffer);\n    throw Error(\"illegal buffer\");\n};\nvar create = function create() {\n    return util.Buffer ? function create_buffer_setup(buffer) {\n        return (Reader.create = function create_buffer(buffer) {\n            return util.Buffer.isBuffer(buffer) ? new BufferReader(buffer) : create_array(buffer);\n        })(buffer);\n    } : create_array;\n};\n/**\n * Creates a new reader using the specified buffer.\n * @function\n * @param {Uint8Array|Buffer} buffer Buffer to read from\n * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\n * @throws {Error} If `buffer` is not a valid buffer\n */ Reader.create = create();\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\n/**\n * Reads a varint as an unsigned 32 bit value.\n * @function\n * @returns {number} Value read\n */ Reader.prototype.uint32 = function read_uint32_setup() {\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\n    return function read_uint32() {\n        value = (this.buf[this.pos] & 127) >>> 0;\n        if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 7) >>> 0;\n        if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0;\n        if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0;\n        if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 15) << 28) >>> 0;\n        if (this.buf[this.pos++] < 128) return value;\n        /* istanbul ignore if */ if ((this.pos += 5) > this.len) {\n            this.pos = this.len;\n            throw indexOutOfRange(this, 10);\n        }\n        return value;\n    };\n}();\n/**\n * Reads a varint as a signed 32 bit value.\n * @returns {number} Value read\n */ Reader.prototype.int32 = function read_int32() {\n    return this.uint32() | 0;\n};\n/**\n * Reads a zig-zag encoded varint as a signed 32 bit value.\n * @returns {number} Value read\n */ Reader.prototype.sint32 = function read_sint32() {\n    var value = this.uint32();\n    return value >>> 1 ^ -(value & 1) | 0;\n};\n/* eslint-disable no-invalid-this */ function readLongVarint() {\n    // tends to deopt with local vars for octet etc.\n    var bits = new LongBits(0, 0);\n    var i = 0;\n    if (this.len - this.pos > 4) {\n        for(; i < 4; ++i){\n            // 1st..4th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128) return bits;\n        }\n        // 5th\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >> 4) >>> 0;\n        if (this.buf[this.pos++] < 128) return bits;\n        i = 0;\n    } else {\n        for(; i < 3; ++i){\n            /* istanbul ignore if */ if (this.pos >= this.len) throw indexOutOfRange(this);\n            // 1st..3th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128) return bits;\n        }\n        // 4th\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\n        return bits;\n    }\n    if (this.len - this.pos > 4) {\n        for(; i < 5; ++i){\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128) return bits;\n        }\n    } else {\n        for(; i < 5; ++i){\n            /* istanbul ignore if */ if (this.pos >= this.len) throw indexOutOfRange(this);\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128) return bits;\n        }\n    }\n    /* istanbul ignore next */ throw Error(\"invalid varint encoding\");\n}\n/* eslint-enable no-invalid-this */ /**\n * Reads a varint as a signed 64 bit value.\n * @name Reader#int64\n * @function\n * @returns {Long} Value read\n */ /**\n * Reads a varint as an unsigned 64 bit value.\n * @name Reader#uint64\n * @function\n * @returns {Long} Value read\n */ /**\n * Reads a zig-zag encoded varint as a signed 64 bit value.\n * @name Reader#sint64\n * @function\n * @returns {Long} Value read\n */ /**\n * Reads a varint as a boolean.\n * @returns {boolean} Value read\n */ Reader.prototype.bool = function read_bool() {\n    return this.uint32() !== 0;\n};\nfunction readFixed32_end(buf, end) {\n    return (buf[end - 4] | buf[end - 3] << 8 | buf[end - 2] << 16 | buf[end - 1] << 24) >>> 0;\n}\n/**\n * Reads fixed 32 bits as an unsigned 32 bit integer.\n * @returns {number} Value read\n */ Reader.prototype.fixed32 = function read_fixed32() {\n    /* istanbul ignore if */ if (this.pos + 4 > this.len) throw indexOutOfRange(this, 4);\n    return readFixed32_end(this.buf, this.pos += 4);\n};\n/**\n * Reads fixed 32 bits as a signed 32 bit integer.\n * @returns {number} Value read\n */ Reader.prototype.sfixed32 = function read_sfixed32() {\n    /* istanbul ignore if */ if (this.pos + 4 > this.len) throw indexOutOfRange(this, 4);\n    return readFixed32_end(this.buf, this.pos += 4) | 0;\n};\n/* eslint-disable no-invalid-this */ function readFixed64() {\n    /* istanbul ignore if */ if (this.pos + 8 > this.len) throw indexOutOfRange(this, 8);\n    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\n}\n/* eslint-enable no-invalid-this */ /**\n * Reads fixed 64 bits.\n * @name Reader#fixed64\n * @function\n * @returns {Long} Value read\n */ /**\n * Reads zig-zag encoded fixed 64 bits.\n * @name Reader#sfixed64\n * @function\n * @returns {Long} Value read\n */ /**\n * Reads a float (32 bit) as a number.\n * @function\n * @returns {number} Value read\n */ Reader.prototype.float = function read_float() {\n    /* istanbul ignore if */ if (this.pos + 4 > this.len) throw indexOutOfRange(this, 4);\n    var value = util.float.readFloatLE(this.buf, this.pos);\n    this.pos += 4;\n    return value;\n};\n/**\n * Reads a double (64 bit float) as a number.\n * @function\n * @returns {number} Value read\n */ Reader.prototype.double = function read_double() {\n    /* istanbul ignore if */ if (this.pos + 8 > this.len) throw indexOutOfRange(this, 4);\n    var value = util.float.readDoubleLE(this.buf, this.pos);\n    this.pos += 8;\n    return value;\n};\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @returns {Uint8Array} Value read\n */ Reader.prototype.bytes = function read_bytes() {\n    var length = this.uint32(), start = this.pos, end = this.pos + length;\n    /* istanbul ignore if */ if (end > this.len) throw indexOutOfRange(this, length);\n    this.pos += length;\n    if (Array.isArray(this.buf)) return this.buf.slice(start, end);\n    if (start === end) {\n        var nativeBuffer = util.Buffer;\n        return nativeBuffer ? nativeBuffer.alloc(0) : new this.buf.constructor(0);\n    }\n    return this._slice.call(this.buf, start, end);\n};\n/**\n * Reads a string preceeded by its byte length as a varint.\n * @returns {string} Value read\n */ Reader.prototype.string = function read_string() {\n    var bytes = this.bytes();\n    return utf8.read(bytes, 0, bytes.length);\n};\n/**\n * Skips the specified number of bytes if specified, otherwise skips a varint.\n * @param {number} [length] Length if known, otherwise a varint is assumed\n * @returns {Reader} `this`\n */ Reader.prototype.skip = function skip(length) {\n    if (typeof length === \"number\") {\n        /* istanbul ignore if */ if (this.pos + length > this.len) throw indexOutOfRange(this, length);\n        this.pos += length;\n    } else {\n        do {\n            /* istanbul ignore if */ if (this.pos >= this.len) throw indexOutOfRange(this);\n        }while (this.buf[this.pos++] & 128);\n    }\n    return this;\n};\n/**\n * Skips the next element of the specified wire type.\n * @param {number} wireType Wire type received\n * @returns {Reader} `this`\n */ Reader.prototype.skipType = function(wireType) {\n    switch(wireType){\n        case 0:\n            this.skip();\n            break;\n        case 1:\n            this.skip(8);\n            break;\n        case 2:\n            this.skip(this.uint32());\n            break;\n        case 3:\n            while((wireType = this.uint32() & 7) !== 4){\n                this.skipType(wireType);\n            }\n            break;\n        case 5:\n            this.skip(4);\n            break;\n        /* istanbul ignore next */ default:\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\n    }\n    return this;\n};\nReader._configure = function(BufferReader_) {\n    BufferReader = BufferReader_;\n    Reader.create = create();\n    BufferReader._configure();\n    var fn = util.Long ? \"toLong\" : /* istanbul ignore next */ \"toNumber\";\n    util.merge(Reader.prototype, {\n        int64: function read_int64() {\n            return readLongVarint.call(this)[fn](false);\n        },\n        uint64: function read_uint64() {\n            return readLongVarint.call(this)[fn](true);\n        },\n        sint64: function read_sint64() {\n            return readLongVarint.call(this).zzDecode()[fn](false);\n        },\n        fixed64: function read_fixed64() {\n            return readFixed64.call(this)[fn](true);\n        },\n        sfixed64: function read_sfixed64() {\n            return readFixed64.call(this)[fn](false);\n        }\n    });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protobufjs/src/reader.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/protobufjs/src/reader_buffer.js":
/*!******************************************************!*\
  !*** ./node_modules/protobufjs/src/reader_buffer.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = BufferReader;\n// extends Reader\nvar Reader = __webpack_require__(/*! ./reader */ \"(ssr)/./node_modules/protobufjs/src/reader.js\");\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\nvar util = __webpack_require__(/*! ./util/minimal */ \"(ssr)/./node_modules/protobufjs/src/util/minimal.js\");\n/**\n * Constructs a new buffer reader instance.\n * @classdesc Wire format reader using node buffers.\n * @extends Reader\n * @constructor\n * @param {Buffer} buffer Buffer to read from\n */ function BufferReader(buffer) {\n    Reader.call(this, buffer);\n/**\n     * Read buffer.\n     * @name BufferReader#buf\n     * @type {Buffer}\n     */ }\nBufferReader._configure = function() {\n    /* istanbul ignore else */ if (util.Buffer) BufferReader.prototype._slice = util.Buffer.prototype.slice;\n};\n/**\n * @override\n */ BufferReader.prototype.string = function read_string_buffer() {\n    var len = this.uint32(); // modifies pos\n    return this.buf.utf8Slice ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len)) : this.buf.toString(\"utf-8\", this.pos, this.pos = Math.min(this.pos + len, this.len));\n};\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @name BufferReader#bytes\n * @function\n * @returns {Buffer} Value read\n */ BufferReader._configure();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcHJvdG9idWZqcy9zcmMvcmVhZGVyX2J1ZmZlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSxPQUFPQyxPQUFPLEdBQUdDO0FBRWpCLGlCQUFpQjtBQUNqQixJQUFJQyxTQUFTQyxtQkFBT0EsQ0FBQywrREFBVTtBQUM5QkYsQ0FBQUEsYUFBYUcsU0FBUyxHQUFHQyxPQUFPQyxNQUFNLENBQUNKLE9BQU9FLFNBQVMsR0FBR0csV0FBVyxHQUFHTjtBQUV6RSxJQUFJTyxPQUFPTCxtQkFBT0EsQ0FBQywyRUFBZ0I7QUFFbkM7Ozs7OztDQU1DLEdBQ0QsU0FBU0YsYUFBYVEsTUFBTTtJQUN4QlAsT0FBT1EsSUFBSSxDQUFDLElBQUksRUFBRUQ7QUFFbEI7Ozs7S0FJQyxHQUNMO0FBRUFSLGFBQWFVLFVBQVUsR0FBRztJQUN0Qix3QkFBd0IsR0FDeEIsSUFBSUgsS0FBS0ksTUFBTSxFQUNYWCxhQUFhRyxTQUFTLENBQUNTLE1BQU0sR0FBR0wsS0FBS0ksTUFBTSxDQUFDUixTQUFTLENBQUNVLEtBQUs7QUFDbkU7QUFHQTs7Q0FFQyxHQUNEYixhQUFhRyxTQUFTLENBQUNXLE1BQU0sR0FBRyxTQUFTQztJQUNyQyxJQUFJQyxNQUFNLElBQUksQ0FBQ0MsTUFBTSxJQUFJLGVBQWU7SUFDeEMsT0FBTyxJQUFJLENBQUNDLEdBQUcsQ0FBQ0MsU0FBUyxHQUNuQixJQUFJLENBQUNELEdBQUcsQ0FBQ0MsU0FBUyxDQUFDLElBQUksQ0FBQ0MsR0FBRyxFQUFFLElBQUksQ0FBQ0EsR0FBRyxHQUFHQyxLQUFLQyxHQUFHLENBQUMsSUFBSSxDQUFDRixHQUFHLEdBQUdKLEtBQUssSUFBSSxDQUFDQSxHQUFHLEtBQ3pFLElBQUksQ0FBQ0UsR0FBRyxDQUFDSyxRQUFRLENBQUMsU0FBUyxJQUFJLENBQUNILEdBQUcsRUFBRSxJQUFJLENBQUNBLEdBQUcsR0FBR0MsS0FBS0MsR0FBRyxDQUFDLElBQUksQ0FBQ0YsR0FBRyxHQUFHSixLQUFLLElBQUksQ0FBQ0EsR0FBRztBQUMzRjtBQUVBOzs7OztDQUtDLEdBRURoQixhQUFhVSxVQUFVIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdW5pY29ybi1jbGFzc2VzLy4vbm9kZV9tb2R1bGVzL3Byb3RvYnVmanMvc3JjL3JlYWRlcl9idWZmZXIuanM/NTA4NyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbm1vZHVsZS5leHBvcnRzID0gQnVmZmVyUmVhZGVyO1xuXG4vLyBleHRlbmRzIFJlYWRlclxudmFyIFJlYWRlciA9IHJlcXVpcmUoXCIuL3JlYWRlclwiKTtcbihCdWZmZXJSZWFkZXIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShSZWFkZXIucHJvdG90eXBlKSkuY29uc3RydWN0b3IgPSBCdWZmZXJSZWFkZXI7XG5cbnZhciB1dGlsID0gcmVxdWlyZShcIi4vdXRpbC9taW5pbWFsXCIpO1xuXG4vKipcbiAqIENvbnN0cnVjdHMgYSBuZXcgYnVmZmVyIHJlYWRlciBpbnN0YW5jZS5cbiAqIEBjbGFzc2Rlc2MgV2lyZSBmb3JtYXQgcmVhZGVyIHVzaW5nIG5vZGUgYnVmZmVycy5cbiAqIEBleHRlbmRzIFJlYWRlclxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0J1ZmZlcn0gYnVmZmVyIEJ1ZmZlciB0byByZWFkIGZyb21cbiAqL1xuZnVuY3Rpb24gQnVmZmVyUmVhZGVyKGJ1ZmZlcikge1xuICAgIFJlYWRlci5jYWxsKHRoaXMsIGJ1ZmZlcik7XG5cbiAgICAvKipcbiAgICAgKiBSZWFkIGJ1ZmZlci5cbiAgICAgKiBAbmFtZSBCdWZmZXJSZWFkZXIjYnVmXG4gICAgICogQHR5cGUge0J1ZmZlcn1cbiAgICAgKi9cbn1cblxuQnVmZmVyUmVhZGVyLl9jb25maWd1cmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICBpZiAodXRpbC5CdWZmZXIpXG4gICAgICAgIEJ1ZmZlclJlYWRlci5wcm90b3R5cGUuX3NsaWNlID0gdXRpbC5CdWZmZXIucHJvdG90eXBlLnNsaWNlO1xufTtcblxuXG4vKipcbiAqIEBvdmVycmlkZVxuICovXG5CdWZmZXJSZWFkZXIucHJvdG90eXBlLnN0cmluZyA9IGZ1bmN0aW9uIHJlYWRfc3RyaW5nX2J1ZmZlcigpIHtcbiAgICB2YXIgbGVuID0gdGhpcy51aW50MzIoKTsgLy8gbW9kaWZpZXMgcG9zXG4gICAgcmV0dXJuIHRoaXMuYnVmLnV0ZjhTbGljZVxuICAgICAgICA/IHRoaXMuYnVmLnV0ZjhTbGljZSh0aGlzLnBvcywgdGhpcy5wb3MgPSBNYXRoLm1pbih0aGlzLnBvcyArIGxlbiwgdGhpcy5sZW4pKVxuICAgICAgICA6IHRoaXMuYnVmLnRvU3RyaW5nKFwidXRmLThcIiwgdGhpcy5wb3MsIHRoaXMucG9zID0gTWF0aC5taW4odGhpcy5wb3MgKyBsZW4sIHRoaXMubGVuKSk7XG59O1xuXG4vKipcbiAqIFJlYWRzIGEgc2VxdWVuY2Ugb2YgYnl0ZXMgcHJlY2VlZGVkIGJ5IGl0cyBsZW5ndGggYXMgYSB2YXJpbnQuXG4gKiBAbmFtZSBCdWZmZXJSZWFkZXIjYnl0ZXNcbiAqIEBmdW5jdGlvblxuICogQHJldHVybnMge0J1ZmZlcn0gVmFsdWUgcmVhZFxuICovXG5cbkJ1ZmZlclJlYWRlci5fY29uZmlndXJlKCk7XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsIkJ1ZmZlclJlYWRlciIsIlJlYWRlciIsInJlcXVpcmUiLCJwcm90b3R5cGUiLCJPYmplY3QiLCJjcmVhdGUiLCJjb25zdHJ1Y3RvciIsInV0aWwiLCJidWZmZXIiLCJjYWxsIiwiX2NvbmZpZ3VyZSIsIkJ1ZmZlciIsIl9zbGljZSIsInNsaWNlIiwic3RyaW5nIiwicmVhZF9zdHJpbmdfYnVmZmVyIiwibGVuIiwidWludDMyIiwiYnVmIiwidXRmOFNsaWNlIiwicG9zIiwiTWF0aCIsIm1pbiIsInRvU3RyaW5nIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protobufjs/src/reader_buffer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/protobufjs/src/root.js":
/*!*********************************************!*\
  !*** ./node_modules/protobufjs/src/root.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = Root;\n// extends Namespace\nvar Namespace = __webpack_require__(/*! ./namespace */ \"(ssr)/./node_modules/protobufjs/src/namespace.js\");\n((Root.prototype = Object.create(Namespace.prototype)).constructor = Root).className = \"Root\";\nvar Field = __webpack_require__(/*! ./field */ \"(ssr)/./node_modules/protobufjs/src/field.js\"), Enum = __webpack_require__(/*! ./enum */ \"(ssr)/./node_modules/protobufjs/src/enum.js\"), OneOf = __webpack_require__(/*! ./oneof */ \"(ssr)/./node_modules/protobufjs/src/oneof.js\"), util = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/protobufjs/src/util.js\");\nvar Type, parse, common; // \"\n/**\n * Constructs a new root namespace instance.\n * @classdesc Root namespace wrapping all types, enums, services, sub-namespaces etc. that belong together.\n * @extends NamespaceBase\n * @constructor\n * @param {Object.<string,*>} [options] Top level options\n */ function Root(options) {\n    Namespace.call(this, \"\", options);\n    /**\n     * Deferred extension fields.\n     * @type {Field[]}\n     */ this.deferred = [];\n    /**\n     * Resolved file names of loaded files.\n     * @type {string[]}\n     */ this.files = [];\n    /**\n     * Edition, defaults to proto2 if unspecified.\n     * @type {string}\n     * @private\n     */ this._edition = \"proto2\";\n    /**\n     * Global lookup cache of fully qualified names.\n     * @type {Object.<string,ReflectionObject>}\n     * @private\n     */ this._fullyQualifiedObjects = {};\n}\n/**\n * Loads a namespace descriptor into a root namespace.\n * @param {INamespace} json Namespace descriptor\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted\n * @returns {Root} Root namespace\n */ Root.fromJSON = function fromJSON(json, root) {\n    if (!root) root = new Root();\n    if (json.options) root.setOptions(json.options);\n    return root.addJSON(json.nested).resolveAll();\n};\n/**\n * Resolves the path of an imported file, relative to the importing origin.\n * This method exists so you can override it with your own logic in case your imports are scattered over multiple directories.\n * @function\n * @param {string} origin The file name of the importing file\n * @param {string} target The file name being imported\n * @returns {string|null} Resolved path to `target` or `null` to skip the file\n */ Root.prototype.resolvePath = util.path.resolve;\n/**\n * Fetch content from file path or url\n * This method exists so you can override it with your own logic.\n * @function\n * @param {string} path File path or url\n * @param {FetchCallback} callback Callback function\n * @returns {undefined}\n */ Root.prototype.fetch = util.fetch;\n// A symbol-like function to safely signal synchronous loading\n/* istanbul ignore next */ function SYNC() {} // eslint-disable-line no-empty-function\n/**\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\n * @param {string|string[]} filename Names of one or multiple files to load\n * @param {IParseOptions} options Parse options\n * @param {LoadCallback} callback Callback function\n * @returns {undefined}\n */ Root.prototype.load = function load(filename, options, callback) {\n    if (typeof options === \"function\") {\n        callback = options;\n        options = undefined;\n    }\n    var self = this;\n    if (!callback) {\n        return util.asPromise(load, self, filename, options);\n    }\n    var sync = callback === SYNC; // undocumented\n    // Finishes loading by calling the callback (exactly once)\n    function finish(err, root) {\n        /* istanbul ignore if */ if (!callback) {\n            return;\n        }\n        if (sync) {\n            throw err;\n        }\n        if (root) {\n            root.resolveAll();\n        }\n        var cb = callback;\n        callback = null;\n        cb(err, root);\n    }\n    // Bundled definition existence checking\n    function getBundledFileName(filename) {\n        var idx = filename.lastIndexOf(\"google/protobuf/\");\n        if (idx > -1) {\n            var altname = filename.substring(idx);\n            if (altname in common) return altname;\n        }\n        return null;\n    }\n    // Processes a single file\n    function process(filename, source) {\n        try {\n            if (util.isString(source) && source.charAt(0) === \"{\") source = JSON.parse(source);\n            if (!util.isString(source)) self.setOptions(source.options).addJSON(source.nested);\n            else {\n                parse.filename = filename;\n                var parsed = parse(source, self, options), resolved, i = 0;\n                if (parsed.imports) {\n                    for(; i < parsed.imports.length; ++i)if (resolved = getBundledFileName(parsed.imports[i]) || self.resolvePath(filename, parsed.imports[i])) fetch(resolved);\n                }\n                if (parsed.weakImports) {\n                    for(i = 0; i < parsed.weakImports.length; ++i)if (resolved = getBundledFileName(parsed.weakImports[i]) || self.resolvePath(filename, parsed.weakImports[i])) fetch(resolved, true);\n                }\n            }\n        } catch (err) {\n            finish(err);\n        }\n        if (!sync && !queued) {\n            finish(null, self); // only once anyway\n        }\n    }\n    // Fetches a single file\n    function fetch(filename, weak) {\n        filename = getBundledFileName(filename) || filename;\n        // Skip if already loaded / attempted\n        if (self.files.indexOf(filename) > -1) {\n            return;\n        }\n        self.files.push(filename);\n        // Shortcut bundled definitions\n        if (filename in common) {\n            if (sync) {\n                process(filename, common[filename]);\n            } else {\n                ++queued;\n                setTimeout(function() {\n                    --queued;\n                    process(filename, common[filename]);\n                });\n            }\n            return;\n        }\n        // Otherwise fetch from disk or network\n        if (sync) {\n            var source;\n            try {\n                source = util.fs.readFileSync(filename).toString(\"utf8\");\n            } catch (err) {\n                if (!weak) finish(err);\n                return;\n            }\n            process(filename, source);\n        } else {\n            ++queued;\n            self.fetch(filename, function(err, source) {\n                --queued;\n                /* istanbul ignore if */ if (!callback) {\n                    return; // terminated meanwhile\n                }\n                if (err) {\n                    /* istanbul ignore else */ if (!weak) finish(err);\n                    else if (!queued) finish(null, self);\n                    return;\n                }\n                process(filename, source);\n            });\n        }\n    }\n    var queued = 0;\n    // Assembling the root namespace doesn't require working type\n    // references anymore, so we can load everything in parallel\n    if (util.isString(filename)) {\n        filename = [\n            filename\n        ];\n    }\n    for(var i = 0, resolved; i < filename.length; ++i)if (resolved = self.resolvePath(\"\", filename[i])) fetch(resolved);\n    if (sync) {\n        self.resolveAll();\n        return self;\n    }\n    if (!queued) {\n        finish(null, self);\n    }\n    return self;\n};\n// function load(filename:string, options:IParseOptions, callback:LoadCallback):undefined\n/**\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\n * @function Root#load\n * @param {string|string[]} filename Names of one or multiple files to load\n * @param {LoadCallback} callback Callback function\n * @returns {undefined}\n * @variation 2\n */ // function load(filename:string, callback:LoadCallback):undefined\n/**\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and returns a promise.\n * @function Root#load\n * @param {string|string[]} filename Names of one or multiple files to load\n * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\n * @returns {Promise<Root>} Promise\n * @variation 3\n */ // function load(filename:string, [options:IParseOptions]):Promise<Root>\n/**\n * Synchronously loads one or multiple .proto or preprocessed .json files into this root namespace (node only).\n * @function Root#loadSync\n * @param {string|string[]} filename Names of one or multiple files to load\n * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\n * @returns {Root} Root namespace\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\n */ Root.prototype.loadSync = function loadSync(filename, options) {\n    if (!util.isNode) throw Error(\"not supported\");\n    return this.load(filename, options, SYNC);\n};\n/**\n * @override\n */ Root.prototype.resolveAll = function resolveAll() {\n    if (!this._needsRecursiveResolve) return this;\n    if (this.deferred.length) throw Error(\"unresolvable extensions: \" + this.deferred.map(function(field) {\n        return \"'extend \" + field.extend + \"' in \" + field.parent.fullName;\n    }).join(\", \"));\n    return Namespace.prototype.resolveAll.call(this);\n};\n// only uppercased (and thus conflict-free) children are exposed, see below\nvar exposeRe = /^[A-Z]/;\n/**\n * Handles a deferred declaring extension field by creating a sister field to represent it within its extended type.\n * @param {Root} root Root instance\n * @param {Field} field Declaring extension field witin the declaring type\n * @returns {boolean} `true` if successfully added to the extended type, `false` otherwise\n * @inner\n * @ignore\n */ function tryHandleExtension(root, field) {\n    var extendedType = field.parent.lookup(field.extend);\n    if (extendedType) {\n        var sisterField = new Field(field.fullName, field.id, field.type, field.rule, undefined, field.options);\n        //do not allow to extend same field twice to prevent the error\n        if (extendedType.get(sisterField.name)) {\n            return true;\n        }\n        sisterField.declaringField = field;\n        field.extensionField = sisterField;\n        extendedType.add(sisterField);\n        return true;\n    }\n    return false;\n}\n/**\n * Called when any object is added to this root or its sub-namespaces.\n * @param {ReflectionObject} object Object added\n * @returns {undefined}\n * @private\n */ Root.prototype._handleAdd = function _handleAdd(object) {\n    if (object instanceof Field) {\n        if (/* an extension field (implies not part of a oneof) */ object.extend !== undefined && /* not already handled */ !object.extensionField) {\n            if (!tryHandleExtension(this, object)) this.deferred.push(object);\n        }\n    } else if (object instanceof Enum) {\n        if (exposeRe.test(object.name)) object.parent[object.name] = object.values; // expose enum values as property of its parent\n    } else if (!(object instanceof OneOf)) /* everything else is a namespace */ {\n        if (object instanceof Type) for(var i = 0; i < this.deferred.length;)if (tryHandleExtension(this, this.deferred[i])) this.deferred.splice(i, 1);\n        else ++i;\n        for(var j = 0; j < /* initializes */ object.nestedArray.length; ++j)this._handleAdd(object._nestedArray[j]);\n        if (exposeRe.test(object.name)) object.parent[object.name] = object; // expose namespace as property of its parent\n    }\n    if (object instanceof Type || object instanceof Enum || object instanceof Field) {\n        // Only store types and enums for quick lookup during resolve.\n        this._fullyQualifiedObjects[object.fullName] = object;\n    }\n// The above also adds uppercased (and thus conflict-free) nested types, services and enums as\n// properties of namespaces just like static code does. This allows using a .d.ts generated for\n// a static module with reflection-based solutions where the condition is met.\n};\n/**\n * Called when any object is removed from this root or its sub-namespaces.\n * @param {ReflectionObject} object Object removed\n * @returns {undefined}\n * @private\n */ Root.prototype._handleRemove = function _handleRemove(object) {\n    if (object instanceof Field) {\n        if (/* an extension field */ object.extend !== undefined) {\n            if (/* already handled */ object.extensionField) {\n                object.extensionField.parent.remove(object.extensionField);\n                object.extensionField = null;\n            } else {\n                var index = this.deferred.indexOf(object);\n                /* istanbul ignore else */ if (index > -1) this.deferred.splice(index, 1);\n            }\n        }\n    } else if (object instanceof Enum) {\n        if (exposeRe.test(object.name)) delete object.parent[object.name]; // unexpose enum values\n    } else if (object instanceof Namespace) {\n        for(var i = 0; i < /* initializes */ object.nestedArray.length; ++i)this._handleRemove(object._nestedArray[i]);\n        if (exposeRe.test(object.name)) delete object.parent[object.name]; // unexpose namespaces\n    }\n    delete this._fullyQualifiedObjects[object.fullName];\n};\n// Sets up cyclic dependencies (called in index-light)\nRoot._configure = function(Type_, parse_, common_) {\n    Type = Type_;\n    parse = parse_;\n    common = common_;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protobufjs/src/root.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/protobufjs/src/roots.js":
/*!**********************************************!*\
  !*** ./node_modules/protobufjs/src/roots.js ***!
  \**********************************************/
/***/ ((module) => {

eval("\nmodule.exports = {}; /**\n * Named roots.\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\n * Can also be used manually to make roots available across modules.\n * @name roots\n * @type {Object.<string,Root>}\n * @example\n * // pbjs -r myroot -o compiled.js ...\n *\n * // in another module:\n * require(\"./compiled.js\");\n *\n * // in any subsequent module:\n * var root = protobuf.roots[\"myroot\"];\n */ \n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcHJvdG9idWZqcy9zcmMvcm9vdHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsT0FBT0MsT0FBTyxHQUFHLENBQUMsR0FFbEI7Ozs7Ozs7Ozs7Ozs7O0NBY0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91bmljb3JuLWNsYXNzZXMvLi9ub2RlX21vZHVsZXMvcHJvdG9idWZqcy9zcmMvcm9vdHMuanM/MWY5MyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbm1vZHVsZS5leHBvcnRzID0ge307XG5cbi8qKlxuICogTmFtZWQgcm9vdHMuXG4gKiBUaGlzIGlzIHdoZXJlIHBianMgc3RvcmVzIGdlbmVyYXRlZCBzdHJ1Y3R1cmVzICh0aGUgb3B0aW9uIGAtciwgLS1yb290YCBzcGVjaWZpZXMgYSBuYW1lKS5cbiAqIENhbiBhbHNvIGJlIHVzZWQgbWFudWFsbHkgdG8gbWFrZSByb290cyBhdmFpbGFibGUgYWNyb3NzIG1vZHVsZXMuXG4gKiBAbmFtZSByb290c1xuICogQHR5cGUge09iamVjdC48c3RyaW5nLFJvb3Q+fVxuICogQGV4YW1wbGVcbiAqIC8vIHBianMgLXIgbXlyb290IC1vIGNvbXBpbGVkLmpzIC4uLlxuICpcbiAqIC8vIGluIGFub3RoZXIgbW9kdWxlOlxuICogcmVxdWlyZShcIi4vY29tcGlsZWQuanNcIik7XG4gKlxuICogLy8gaW4gYW55IHN1YnNlcXVlbnQgbW9kdWxlOlxuICogdmFyIHJvb3QgPSBwcm90b2J1Zi5yb290c1tcIm15cm9vdFwiXTtcbiAqL1xuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protobufjs/src/roots.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/protobufjs/src/rpc.js":
/*!********************************************!*\
  !*** ./node_modules/protobufjs/src/rpc.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Streaming RPC helpers.\n * @namespace\n */ var rpc = exports;\n/**\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\n * @typedef RPCImpl\n * @type {function}\n * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called\n * @param {Uint8Array} requestData Request data\n * @param {RPCImplCallback} callback Callback function\n * @returns {undefined}\n * @example\n * function rpcImpl(method, requestData, callback) {\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\n *         throw Error(\"no such method\");\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\n *         callback(err, responseData);\n *     });\n * }\n */ /**\n * Node-style callback as used by {@link RPCImpl}.\n * @typedef RPCImplCallback\n * @type {function}\n * @param {Error|null} error Error, if any, otherwise `null`\n * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error\n * @returns {undefined}\n */ rpc.Service = __webpack_require__(/*! ./rpc/service */ \"(ssr)/./node_modules/protobufjs/src/rpc/service.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcHJvdG9idWZqcy9zcmMvcnBjLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBRWI7OztDQUdDLEdBQ0QsSUFBSUEsTUFBTUM7QUFFVjs7Ozs7Ozs7Ozs7Ozs7OztDQWdCQyxHQUVEOzs7Ozs7O0NBT0MsR0FFREQsSUFBSUUsT0FBTyxHQUFHQyxtQkFBT0EsQ0FBQyx5RUFBZSIsInNvdXJjZXMiOlsid2VicGFjazovL3VuaWNvcm4tY2xhc3Nlcy8uL25vZGVfbW9kdWxlcy9wcm90b2J1ZmpzL3NyYy9ycGMuanM/NGNjZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBTdHJlYW1pbmcgUlBDIGhlbHBlcnMuXG4gKiBAbmFtZXNwYWNlXG4gKi9cbnZhciBycGMgPSBleHBvcnRzO1xuXG4vKipcbiAqIFJQQyBpbXBsZW1lbnRhdGlvbiBwYXNzZWQgdG8ge0BsaW5rIFNlcnZpY2UjY3JlYXRlfSBwZXJmb3JtaW5nIGEgc2VydmljZSByZXF1ZXN0IG9uIG5ldHdvcmsgbGV2ZWwsIGkuZS4gYnkgdXRpbGl6aW5nIGh0dHAgcmVxdWVzdHMgb3Igd2Vic29ja2V0cy5cbiAqIEB0eXBlZGVmIFJQQ0ltcGxcbiAqIEB0eXBlIHtmdW5jdGlvbn1cbiAqIEBwYXJhbSB7TWV0aG9kfHJwYy5TZXJ2aWNlTWV0aG9kPE1lc3NhZ2U8e30+LE1lc3NhZ2U8e30+Pn0gbWV0aG9kIFJlZmxlY3RlZCBvciBzdGF0aWMgbWV0aG9kIGJlaW5nIGNhbGxlZFxuICogQHBhcmFtIHtVaW50OEFycmF5fSByZXF1ZXN0RGF0YSBSZXF1ZXN0IGRhdGFcbiAqIEBwYXJhbSB7UlBDSW1wbENhbGxiYWNrfSBjYWxsYmFjayBDYWxsYmFjayBmdW5jdGlvblxuICogQHJldHVybnMge3VuZGVmaW5lZH1cbiAqIEBleGFtcGxlXG4gKiBmdW5jdGlvbiBycGNJbXBsKG1ldGhvZCwgcmVxdWVzdERhdGEsIGNhbGxiYWNrKSB7XG4gKiAgICAgaWYgKHByb3RvYnVmLnV0aWwubGNGaXJzdChtZXRob2QubmFtZSkgIT09IFwibXlNZXRob2RcIikgLy8gY29tcGF0aWJsZSB3aXRoIHN0YXRpYyBjb2RlXG4gKiAgICAgICAgIHRocm93IEVycm9yKFwibm8gc3VjaCBtZXRob2RcIik7XG4gKiAgICAgYXN5bmNocm9ub3VzbHlPYnRhaW5BUmVzcG9uc2UocmVxdWVzdERhdGEsIGZ1bmN0aW9uKGVyciwgcmVzcG9uc2VEYXRhKSB7XG4gKiAgICAgICAgIGNhbGxiYWNrKGVyciwgcmVzcG9uc2VEYXRhKTtcbiAqICAgICB9KTtcbiAqIH1cbiAqL1xuXG4vKipcbiAqIE5vZGUtc3R5bGUgY2FsbGJhY2sgYXMgdXNlZCBieSB7QGxpbmsgUlBDSW1wbH0uXG4gKiBAdHlwZWRlZiBSUENJbXBsQ2FsbGJhY2tcbiAqIEB0eXBlIHtmdW5jdGlvbn1cbiAqIEBwYXJhbSB7RXJyb3J8bnVsbH0gZXJyb3IgRXJyb3IsIGlmIGFueSwgb3RoZXJ3aXNlIGBudWxsYFxuICogQHBhcmFtIHtVaW50OEFycmF5fG51bGx9IFtyZXNwb25zZV0gUmVzcG9uc2UgZGF0YSBvciBgbnVsbGAgdG8gc2lnbmFsIGVuZCBvZiBzdHJlYW0sIGlmIHRoZXJlIGhhc24ndCBiZWVuIGFuIGVycm9yXG4gKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICovXG5cbnJwYy5TZXJ2aWNlID0gcmVxdWlyZShcIi4vcnBjL3NlcnZpY2VcIik7XG4iXSwibmFtZXMiOlsicnBjIiwiZXhwb3J0cyIsIlNlcnZpY2UiLCJyZXF1aXJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protobufjs/src/rpc.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/protobufjs/src/rpc/service.js":
/*!****************************************************!*\
  !*** ./node_modules/protobufjs/src/rpc/service.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = Service;\nvar util = __webpack_require__(/*! ../util/minimal */ \"(ssr)/./node_modules/protobufjs/src/util/minimal.js\");\n// Extends EventEmitter\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\n/**\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\n *\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\n * @typedef rpc.ServiceMethodCallback\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {Error|null} error Error, if any\n * @param {TRes} [response] Response message\n * @returns {undefined}\n */ /**\n * A service method part of a {@link rpc.Service} as created by {@link Service.create}.\n * @typedef rpc.ServiceMethod\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message\n * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`\n */ /**\n * Constructs a new RPC service instance.\n * @classdesc An RPC service as returned by {@link Service#create}.\n * @exports rpc.Service\n * @extends util.EventEmitter\n * @constructor\n * @param {RPCImpl} rpcImpl RPC implementation\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n */ function Service(rpcImpl, requestDelimited, responseDelimited) {\n    if (typeof rpcImpl !== \"function\") throw TypeError(\"rpcImpl must be a function\");\n    util.EventEmitter.call(this);\n    /**\n     * RPC implementation. Becomes `null` once the service is ended.\n     * @type {RPCImpl|null}\n     */ this.rpcImpl = rpcImpl;\n    /**\n     * Whether requests are length-delimited.\n     * @type {boolean}\n     */ this.requestDelimited = Boolean(requestDelimited);\n    /**\n     * Whether responses are length-delimited.\n     * @type {boolean}\n     */ this.responseDelimited = Boolean(responseDelimited);\n}\n/**\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\n * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method\n * @param {Constructor<TReq>} requestCtor Request constructor\n * @param {Constructor<TRes>} responseCtor Response constructor\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback\n * @returns {undefined}\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n */ Service.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\n    if (!request) throw TypeError(\"request must be specified\");\n    var self = this;\n    if (!callback) return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\n    if (!self.rpcImpl) {\n        setTimeout(function() {\n            callback(Error(\"already ended\"));\n        }, 0);\n        return undefined;\n    }\n    try {\n        return self.rpcImpl(method, requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(), function rpcCallback(err, response) {\n            if (err) {\n                self.emit(\"error\", err, method);\n                return callback(err);\n            }\n            if (response === null) {\n                self.end(/* endedByRPC */ true);\n                return undefined;\n            }\n            if (!(response instanceof responseCtor)) {\n                try {\n                    response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\n                } catch (err) {\n                    self.emit(\"error\", err, method);\n                    return callback(err);\n                }\n            }\n            self.emit(\"data\", response, method);\n            return callback(null, response);\n        });\n    } catch (err) {\n        self.emit(\"error\", err, method);\n        setTimeout(function() {\n            callback(err);\n        }, 0);\n        return undefined;\n    }\n};\n/**\n * Ends this service and emits the `end` event.\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\n * @returns {rpc.Service} `this`\n */ Service.prototype.end = function end(endedByRPC) {\n    if (this.rpcImpl) {\n        if (!endedByRPC) this.rpcImpl(null, null, null);\n        this.rpcImpl = null;\n        this.emit(\"end\").off();\n    }\n    return this;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protobufjs/src/rpc/service.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/protobufjs/src/service.js":
/*!************************************************!*\
  !*** ./node_modules/protobufjs/src/service.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = Service;\n// extends Namespace\nvar Namespace = __webpack_require__(/*! ./namespace */ \"(ssr)/./node_modules/protobufjs/src/namespace.js\");\n((Service.prototype = Object.create(Namespace.prototype)).constructor = Service).className = \"Service\";\nvar Method = __webpack_require__(/*! ./method */ \"(ssr)/./node_modules/protobufjs/src/method.js\"), util = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/protobufjs/src/util.js\"), rpc = __webpack_require__(/*! ./rpc */ \"(ssr)/./node_modules/protobufjs/src/rpc.js\");\n/**\n * Constructs a new service instance.\n * @classdesc Reflected service.\n * @extends NamespaceBase\n * @constructor\n * @param {string} name Service name\n * @param {Object.<string,*>} [options] Service options\n * @throws {TypeError} If arguments are invalid\n */ function Service(name, options) {\n    Namespace.call(this, name, options);\n    /**\n     * Service methods.\n     * @type {Object.<string,Method>}\n     */ this.methods = {}; // toJSON, marker\n    /**\n     * Cached methods as an array.\n     * @type {Method[]|null}\n     * @private\n     */ this._methodsArray = null;\n}\n/**\n * Service descriptor.\n * @interface IService\n * @extends INamespace\n * @property {Object.<string,IMethod>} methods Method descriptors\n */ /**\n * Constructs a service from a service descriptor.\n * @param {string} name Service name\n * @param {IService} json Service descriptor\n * @returns {Service} Created service\n * @throws {TypeError} If arguments are invalid\n */ Service.fromJSON = function fromJSON(name, json) {\n    var service = new Service(name, json.options);\n    /* istanbul ignore else */ if (json.methods) for(var names = Object.keys(json.methods), i = 0; i < names.length; ++i)service.add(Method.fromJSON(names[i], json.methods[names[i]]));\n    if (json.nested) service.addJSON(json.nested);\n    if (json.edition) service._edition = json.edition;\n    service.comment = json.comment;\n    service._defaultEdition = \"proto3\"; // For backwards-compatibility.\n    return service;\n};\n/**\n * Converts this service to a service descriptor.\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {IService} Service descriptor\n */ Service.prototype.toJSON = function toJSON(toJSONOptions) {\n    var inherited = Namespace.prototype.toJSON.call(this, toJSONOptions);\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n    return util.toObject([\n        \"edition\",\n        this._editionToJSON(),\n        \"options\",\n        inherited && inherited.options || undefined,\n        \"methods\",\n        Namespace.arrayToJSON(this.methodsArray, toJSONOptions) || /* istanbul ignore next */ {},\n        \"nested\",\n        inherited && inherited.nested || undefined,\n        \"comment\",\n        keepComments ? this.comment : undefined\n    ]);\n};\n/**\n * Methods of this service as an array for iteration.\n * @name Service#methodsArray\n * @type {Method[]}\n * @readonly\n */ Object.defineProperty(Service.prototype, \"methodsArray\", {\n    get: function() {\n        return this._methodsArray || (this._methodsArray = util.toArray(this.methods));\n    }\n});\nfunction clearCache(service) {\n    service._methodsArray = null;\n    return service;\n}\n/**\n * @override\n */ Service.prototype.get = function get(name) {\n    return this.methods[name] || Namespace.prototype.get.call(this, name);\n};\n/**\n * @override\n */ Service.prototype.resolveAll = function resolveAll() {\n    if (!this._needsRecursiveResolve) return this;\n    Namespace.prototype.resolve.call(this);\n    var methods = this.methodsArray;\n    for(var i = 0; i < methods.length; ++i)methods[i].resolve();\n    return this;\n};\n/**\n * @override\n */ Service.prototype._resolveFeaturesRecursive = function _resolveFeaturesRecursive(edition) {\n    if (!this._needsRecursiveFeatureResolution) return this;\n    edition = this._edition || edition;\n    Namespace.prototype._resolveFeaturesRecursive.call(this, edition);\n    this.methodsArray.forEach((method)=>{\n        method._resolveFeaturesRecursive(edition);\n    });\n    return this;\n};\n/**\n * @override\n */ Service.prototype.add = function add(object) {\n    /* istanbul ignore if */ if (this.get(object.name)) throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\n    if (object instanceof Method) {\n        this.methods[object.name] = object;\n        object.parent = this;\n        return clearCache(this);\n    }\n    return Namespace.prototype.add.call(this, object);\n};\n/**\n * @override\n */ Service.prototype.remove = function remove(object) {\n    if (object instanceof Method) {\n        /* istanbul ignore if */ if (this.methods[object.name] !== object) throw Error(object + \" is not a member of \" + this);\n        delete this.methods[object.name];\n        object.parent = null;\n        return clearCache(this);\n    }\n    return Namespace.prototype.remove.call(this, object);\n};\n/**\n * Creates a runtime service using the specified rpc implementation.\n * @param {RPCImpl} rpcImpl RPC implementation\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n * @returns {rpc.Service} RPC service. Useful where requests and/or responses are streamed.\n */ Service.prototype.create = function create(rpcImpl, requestDelimited, responseDelimited) {\n    var rpcService = new rpc.Service(rpcImpl, requestDelimited, responseDelimited);\n    for(var i = 0, method; i < /* initializes */ this.methodsArray.length; ++i){\n        var methodName = util.lcFirst((method = this._methodsArray[i]).resolve().name).replace(/[^$\\w_]/g, \"\");\n        rpcService[methodName] = util.codegen([\n            \"r\",\n            \"c\"\n        ], util.isReserved(methodName) ? methodName + \"_\" : methodName)(\"return this.rpcCall(m,q,s,r,c)\")({\n            m: method,\n            q: method.resolvedRequestType.ctor,\n            s: method.resolvedResponseType.ctor\n        });\n    }\n    return rpcService;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protobufjs/src/service.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/protobufjs/src/tokenize.js":
/*!*************************************************!*\
  !*** ./node_modules/protobufjs/src/tokenize.js ***!
  \*************************************************/
/***/ ((module) => {

eval("\nmodule.exports = tokenize;\nvar delimRe = /[\\s{}=;:[\\],'\"()<>]/g, stringDoubleRe = /(?:\"([^\"\\\\]*(?:\\\\.[^\"\\\\]*)*)\")/g, stringSingleRe = /(?:'([^'\\\\]*(?:\\\\.[^'\\\\]*)*)')/g;\nvar setCommentRe = /^ *[*/]+ */, setCommentAltRe = /^\\s*\\*?\\/*/, setCommentSplitRe = /\\n/g, whitespaceRe = /\\s/, unescapeRe = /\\\\(.?)/g;\nvar unescapeMap = {\n    \"0\": \"\\x00\",\n    \"r\": \"\\r\",\n    \"n\": \"\\n\",\n    \"t\": \"\t\"\n};\n/**\n * Unescapes a string.\n * @param {string} str String to unescape\n * @returns {string} Unescaped string\n * @property {Object.<string,string>} map Special characters map\n * @memberof tokenize\n */ function unescape(str) {\n    return str.replace(unescapeRe, function($0, $1) {\n        switch($1){\n            case \"\\\\\":\n            case \"\":\n                return $1;\n            default:\n                return unescapeMap[$1] || \"\";\n        }\n    });\n}\ntokenize.unescape = unescape;\n/**\n * Gets the next token and advances.\n * @typedef TokenizerHandleNext\n * @type {function}\n * @returns {string|null} Next token or `null` on eof\n */ /**\n * Peeks for the next token.\n * @typedef TokenizerHandlePeek\n * @type {function}\n * @returns {string|null} Next token or `null` on eof\n */ /**\n * Pushes a token back to the stack.\n * @typedef TokenizerHandlePush\n * @type {function}\n * @param {string} token Token\n * @returns {undefined}\n */ /**\n * Skips the next token.\n * @typedef TokenizerHandleSkip\n * @type {function}\n * @param {string} expected Expected token\n * @param {boolean} [optional=false] If optional\n * @returns {boolean} Whether the token matched\n * @throws {Error} If the token didn't match and is not optional\n */ /**\n * Gets the comment on the previous line or, alternatively, the line comment on the specified line.\n * @typedef TokenizerHandleCmnt\n * @type {function}\n * @param {number} [line] Line number\n * @returns {string|null} Comment text or `null` if none\n */ /**\n * Handle object returned from {@link tokenize}.\n * @interface ITokenizerHandle\n * @property {TokenizerHandleNext} next Gets the next token and advances (`null` on eof)\n * @property {TokenizerHandlePeek} peek Peeks for the next token (`null` on eof)\n * @property {TokenizerHandlePush} push Pushes a token back to the stack\n * @property {TokenizerHandleSkip} skip Skips a token, returns its presence and advances or, if non-optional and not present, throws\n * @property {TokenizerHandleCmnt} cmnt Gets the comment on the previous line or the line comment on the specified line, if any\n * @property {number} line Current line number\n */ /**\n * Tokenizes the given .proto source and returns an object with useful utility functions.\n * @param {string} source Source contents\n * @param {boolean} alternateCommentMode Whether we should activate alternate comment parsing mode.\n * @returns {ITokenizerHandle} Tokenizer handle\n */ function tokenize(source, alternateCommentMode) {\n    /* eslint-disable callback-return */ source = source.toString();\n    var offset = 0, length = source.length, line = 1, lastCommentLine = 0, comments = {};\n    var stack = [];\n    var stringDelim = null;\n    /* istanbul ignore next */ /**\n     * Creates an error for illegal syntax.\n     * @param {string} subject Subject\n     * @returns {Error} Error created\n     * @inner\n     */ function illegal(subject) {\n        return Error(\"illegal \" + subject + \" (line \" + line + \")\");\n    }\n    /**\n     * Reads a string till its end.\n     * @returns {string} String read\n     * @inner\n     */ function readString() {\n        var re = stringDelim === \"'\" ? stringSingleRe : stringDoubleRe;\n        re.lastIndex = offset - 1;\n        var match = re.exec(source);\n        if (!match) throw illegal(\"string\");\n        offset = re.lastIndex;\n        push(stringDelim);\n        stringDelim = null;\n        return unescape(match[1]);\n    }\n    /**\n     * Gets the character at `pos` within the source.\n     * @param {number} pos Position\n     * @returns {string} Character\n     * @inner\n     */ function charAt(pos) {\n        return source.charAt(pos);\n    }\n    /**\n     * Sets the current comment text.\n     * @param {number} start Start offset\n     * @param {number} end End offset\n     * @param {boolean} isLeading set if a leading comment\n     * @returns {undefined}\n     * @inner\n     */ function setComment(start, end, isLeading) {\n        var comment = {\n            type: source.charAt(start++),\n            lineEmpty: false,\n            leading: isLeading\n        };\n        var lookback;\n        if (alternateCommentMode) {\n            lookback = 2; // alternate comment parsing: \"//\" or \"/*\"\n        } else {\n            lookback = 3; // \"///\" or \"/**\"\n        }\n        var commentOffset = start - lookback, c;\n        do {\n            if (--commentOffset < 0 || (c = source.charAt(commentOffset)) === \"\\n\") {\n                comment.lineEmpty = true;\n                break;\n            }\n        }while (c === \" \" || c === \"\t\");\n        var lines = source.substring(start, end).split(setCommentSplitRe);\n        for(var i = 0; i < lines.length; ++i)lines[i] = lines[i].replace(alternateCommentMode ? setCommentAltRe : setCommentRe, \"\").trim();\n        comment.text = lines.join(\"\\n\").trim();\n        comments[line] = comment;\n        lastCommentLine = line;\n    }\n    function isDoubleSlashCommentLine(startOffset) {\n        var endOffset = findEndOfLine(startOffset);\n        // see if remaining line matches comment pattern\n        var lineText = source.substring(startOffset, endOffset);\n        var isComment = /^\\s*\\/\\//.test(lineText);\n        return isComment;\n    }\n    function findEndOfLine(cursor) {\n        // find end of cursor's line\n        var endOffset = cursor;\n        while(endOffset < length && charAt(endOffset) !== \"\\n\"){\n            endOffset++;\n        }\n        return endOffset;\n    }\n    /**\n     * Obtains the next token.\n     * @returns {string|null} Next token or `null` on eof\n     * @inner\n     */ function next() {\n        if (stack.length > 0) return stack.shift();\n        if (stringDelim) return readString();\n        var repeat, prev, curr, start, isDoc, isLeadingComment = offset === 0;\n        do {\n            if (offset === length) return null;\n            repeat = false;\n            while(whitespaceRe.test(curr = charAt(offset))){\n                if (curr === \"\\n\") {\n                    isLeadingComment = true;\n                    ++line;\n                }\n                if (++offset === length) return null;\n            }\n            if (charAt(offset) === \"/\") {\n                if (++offset === length) {\n                    throw illegal(\"comment\");\n                }\n                if (charAt(offset) === \"/\") {\n                    if (!alternateCommentMode) {\n                        // check for triple-slash comment\n                        isDoc = charAt(start = offset + 1) === \"/\";\n                        while(charAt(++offset) !== \"\\n\"){\n                            if (offset === length) {\n                                return null;\n                            }\n                        }\n                        ++offset;\n                        if (isDoc) {\n                            setComment(start, offset - 1, isLeadingComment);\n                            // Trailing comment cannot not be multi-line,\n                            // so leading comment state should be reset to handle potential next comments\n                            isLeadingComment = true;\n                        }\n                        ++line;\n                        repeat = true;\n                    } else {\n                        // check for double-slash comments, consolidating consecutive lines\n                        start = offset;\n                        isDoc = false;\n                        if (isDoubleSlashCommentLine(offset - 1)) {\n                            isDoc = true;\n                            do {\n                                offset = findEndOfLine(offset);\n                                if (offset === length) {\n                                    break;\n                                }\n                                offset++;\n                                if (!isLeadingComment) {\n                                    break;\n                                }\n                            }while (isDoubleSlashCommentLine(offset));\n                        } else {\n                            offset = Math.min(length, findEndOfLine(offset) + 1);\n                        }\n                        if (isDoc) {\n                            setComment(start, offset, isLeadingComment);\n                            isLeadingComment = true;\n                        }\n                        line++;\n                        repeat = true;\n                    }\n                } else if ((curr = charAt(offset)) === \"*\") {\n                    // check for /** (regular comment mode) or /* (alternate comment mode)\n                    start = offset + 1;\n                    isDoc = alternateCommentMode || charAt(start) === \"*\";\n                    do {\n                        if (curr === \"\\n\") {\n                            ++line;\n                        }\n                        if (++offset === length) {\n                            throw illegal(\"comment\");\n                        }\n                        prev = curr;\n                        curr = charAt(offset);\n                    }while (prev !== \"*\" || curr !== \"/\");\n                    ++offset;\n                    if (isDoc) {\n                        setComment(start, offset - 2, isLeadingComment);\n                        isLeadingComment = true;\n                    }\n                    repeat = true;\n                } else {\n                    return \"/\";\n                }\n            }\n        }while (repeat);\n        // offset !== length if we got here\n        var end = offset;\n        delimRe.lastIndex = 0;\n        var delim = delimRe.test(charAt(end++));\n        if (!delim) while(end < length && !delimRe.test(charAt(end)))++end;\n        var token = source.substring(offset, offset = end);\n        if (token === '\"' || token === \"'\") stringDelim = token;\n        return token;\n    }\n    /**\n     * Pushes a token back to the stack.\n     * @param {string} token Token\n     * @returns {undefined}\n     * @inner\n     */ function push(token) {\n        stack.push(token);\n    }\n    /**\n     * Peeks for the next token.\n     * @returns {string|null} Token or `null` on eof\n     * @inner\n     */ function peek() {\n        if (!stack.length) {\n            var token = next();\n            if (token === null) return null;\n            push(token);\n        }\n        return stack[0];\n    }\n    /**\n     * Skips a token.\n     * @param {string} expected Expected token\n     * @param {boolean} [optional=false] Whether the token is optional\n     * @returns {boolean} `true` when skipped, `false` if not\n     * @throws {Error} When a required token is not present\n     * @inner\n     */ function skip(expected, optional) {\n        var actual = peek(), equals = actual === expected;\n        if (equals) {\n            next();\n            return true;\n        }\n        if (!optional) throw illegal(\"token '\" + actual + \"', '\" + expected + \"' expected\");\n        return false;\n    }\n    /**\n     * Gets a comment.\n     * @param {number} [trailingLine] Line number if looking for a trailing comment\n     * @returns {string|null} Comment text\n     * @inner\n     */ function cmnt(trailingLine) {\n        var ret = null;\n        var comment;\n        if (trailingLine === undefined) {\n            comment = comments[line - 1];\n            delete comments[line - 1];\n            if (comment && (alternateCommentMode || comment.type === \"*\" || comment.lineEmpty)) {\n                ret = comment.leading ? comment.text : null;\n            }\n        } else {\n            /* istanbul ignore else */ if (lastCommentLine < trailingLine) {\n                peek();\n            }\n            comment = comments[trailingLine];\n            delete comments[trailingLine];\n            if (comment && !comment.lineEmpty && (alternateCommentMode || comment.type === \"/\")) {\n                ret = comment.leading ? null : comment.text;\n            }\n        }\n        return ret;\n    }\n    return Object.defineProperty({\n        next: next,\n        peek: peek,\n        push: push,\n        skip: skip,\n        cmnt: cmnt\n    }, \"line\", {\n        get: function() {\n            return line;\n        }\n    });\n/* eslint-enable callback-return */ }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protobufjs/src/tokenize.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/protobufjs/src/type.js":
/*!*********************************************!*\
  !*** ./node_modules/protobufjs/src/type.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = Type;\n// extends Namespace\nvar Namespace = __webpack_require__(/*! ./namespace */ \"(ssr)/./node_modules/protobufjs/src/namespace.js\");\n((Type.prototype = Object.create(Namespace.prototype)).constructor = Type).className = \"Type\";\nvar Enum = __webpack_require__(/*! ./enum */ \"(ssr)/./node_modules/protobufjs/src/enum.js\"), OneOf = __webpack_require__(/*! ./oneof */ \"(ssr)/./node_modules/protobufjs/src/oneof.js\"), Field = __webpack_require__(/*! ./field */ \"(ssr)/./node_modules/protobufjs/src/field.js\"), MapField = __webpack_require__(/*! ./mapfield */ \"(ssr)/./node_modules/protobufjs/src/mapfield.js\"), Service = __webpack_require__(/*! ./service */ \"(ssr)/./node_modules/protobufjs/src/service.js\"), Message = __webpack_require__(/*! ./message */ \"(ssr)/./node_modules/protobufjs/src/message.js\"), Reader = __webpack_require__(/*! ./reader */ \"(ssr)/./node_modules/protobufjs/src/reader.js\"), Writer = __webpack_require__(/*! ./writer */ \"(ssr)/./node_modules/protobufjs/src/writer.js\"), util = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/protobufjs/src/util.js\"), encoder = __webpack_require__(/*! ./encoder */ \"(ssr)/./node_modules/protobufjs/src/encoder.js\"), decoder = __webpack_require__(/*! ./decoder */ \"(ssr)/./node_modules/protobufjs/src/decoder.js\"), verifier = __webpack_require__(/*! ./verifier */ \"(ssr)/./node_modules/protobufjs/src/verifier.js\"), converter = __webpack_require__(/*! ./converter */ \"(ssr)/./node_modules/protobufjs/src/converter.js\"), wrappers = __webpack_require__(/*! ./wrappers */ \"(ssr)/./node_modules/protobufjs/src/wrappers.js\");\n/**\n * Constructs a new reflected message type instance.\n * @classdesc Reflected message type.\n * @extends NamespaceBase\n * @constructor\n * @param {string} name Message name\n * @param {Object.<string,*>} [options] Declared options\n */ function Type(name, options) {\n    Namespace.call(this, name, options);\n    /**\n     * Message fields.\n     * @type {Object.<string,Field>}\n     */ this.fields = {}; // toJSON, marker\n    /**\n     * Oneofs declared within this namespace, if any.\n     * @type {Object.<string,OneOf>}\n     */ this.oneofs = undefined; // toJSON\n    /**\n     * Extension ranges, if any.\n     * @type {number[][]}\n     */ this.extensions = undefined; // toJSON\n    /**\n     * Reserved ranges, if any.\n     * @type {Array.<number[]|string>}\n     */ this.reserved = undefined; // toJSON\n    /*?\n     * Whether this type is a legacy group.\n     * @type {boolean|undefined}\n     */ this.group = undefined; // toJSON\n    /**\n     * Cached fields by id.\n     * @type {Object.<number,Field>|null}\n     * @private\n     */ this._fieldsById = null;\n    /**\n     * Cached fields as an array.\n     * @type {Field[]|null}\n     * @private\n     */ this._fieldsArray = null;\n    /**\n     * Cached oneofs as an array.\n     * @type {OneOf[]|null}\n     * @private\n     */ this._oneofsArray = null;\n    /**\n     * Cached constructor.\n     * @type {Constructor<{}>}\n     * @private\n     */ this._ctor = null;\n}\nObject.defineProperties(Type.prototype, {\n    /**\n     * Message fields by id.\n     * @name Type#fieldsById\n     * @type {Object.<number,Field>}\n     * @readonly\n     */ fieldsById: {\n        get: function() {\n            /* istanbul ignore if */ if (this._fieldsById) return this._fieldsById;\n            this._fieldsById = {};\n            for(var names = Object.keys(this.fields), i = 0; i < names.length; ++i){\n                var field = this.fields[names[i]], id = field.id;\n                /* istanbul ignore if */ if (this._fieldsById[id]) throw Error(\"duplicate id \" + id + \" in \" + this);\n                this._fieldsById[id] = field;\n            }\n            return this._fieldsById;\n        }\n    },\n    /**\n     * Fields of this message as an array for iteration.\n     * @name Type#fieldsArray\n     * @type {Field[]}\n     * @readonly\n     */ fieldsArray: {\n        get: function() {\n            return this._fieldsArray || (this._fieldsArray = util.toArray(this.fields));\n        }\n    },\n    /**\n     * Oneofs of this message as an array for iteration.\n     * @name Type#oneofsArray\n     * @type {OneOf[]}\n     * @readonly\n     */ oneofsArray: {\n        get: function() {\n            return this._oneofsArray || (this._oneofsArray = util.toArray(this.oneofs));\n        }\n    },\n    /**\n     * The registered constructor, if any registered, otherwise a generic constructor.\n     * Assigning a function replaces the internal constructor. If the function does not extend {@link Message} yet, its prototype will be setup accordingly and static methods will be populated. If it already extends {@link Message}, it will just replace the internal constructor.\n     * @name Type#ctor\n     * @type {Constructor<{}>}\n     */ ctor: {\n        get: function() {\n            return this._ctor || (this.ctor = Type.generateConstructor(this)());\n        },\n        set: function(ctor) {\n            // Ensure proper prototype\n            var prototype = ctor.prototype;\n            if (!(prototype instanceof Message)) {\n                (ctor.prototype = new Message()).constructor = ctor;\n                util.merge(ctor.prototype, prototype);\n            }\n            // Classes and messages reference their reflected type\n            ctor.$type = ctor.prototype.$type = this;\n            // Mix in static methods\n            util.merge(ctor, Message, true);\n            this._ctor = ctor;\n            // Messages have non-enumerable default values on their prototype\n            var i = 0;\n            for(; i < /* initializes */ this.fieldsArray.length; ++i)this._fieldsArray[i].resolve(); // ensures a proper value\n            // Messages have non-enumerable getters and setters for each virtual oneof field\n            var ctorProperties = {};\n            for(i = 0; i < /* initializes */ this.oneofsArray.length; ++i)ctorProperties[this._oneofsArray[i].resolve().name] = {\n                get: util.oneOfGetter(this._oneofsArray[i].oneof),\n                set: util.oneOfSetter(this._oneofsArray[i].oneof)\n            };\n            if (i) Object.defineProperties(ctor.prototype, ctorProperties);\n        }\n    }\n});\n/**\n * Generates a constructor function for the specified type.\n * @param {Type} mtype Message type\n * @returns {Codegen} Codegen instance\n */ Type.generateConstructor = function generateConstructor(mtype) {\n    /* eslint-disable no-unexpected-multiline */ var gen = util.codegen([\n        \"p\"\n    ], mtype.name);\n    // explicitly initialize mutable object/array fields so that these aren't just inherited from the prototype\n    for(var i = 0, field; i < mtype.fieldsArray.length; ++i)if ((field = mtype._fieldsArray[i]).map) gen(\"this%s={}\", util.safeProp(field.name));\n    else if (field.repeated) gen(\"this%s=[]\", util.safeProp(field.name));\n    return gen(\"if(p)for(var ks=Object.keys(p),i=0;i<ks.length;++i)if(p[ks[i]]!=null)\") // omit undefined or null\n    (\"this[ks[i]]=p[ks[i]]\");\n/* eslint-enable no-unexpected-multiline */ };\nfunction clearCache(type) {\n    type._fieldsById = type._fieldsArray = type._oneofsArray = null;\n    delete type.encode;\n    delete type.decode;\n    delete type.verify;\n    return type;\n}\n/**\n * Message type descriptor.\n * @interface IType\n * @extends INamespace\n * @property {Object.<string,IOneOf>} [oneofs] Oneof descriptors\n * @property {Object.<string,IField>} fields Field descriptors\n * @property {number[][]} [extensions] Extension ranges\n * @property {Array.<number[]|string>} [reserved] Reserved ranges\n * @property {boolean} [group=false] Whether a legacy group or not\n */ /**\n * Creates a message type from a message type descriptor.\n * @param {string} name Message name\n * @param {IType} json Message type descriptor\n * @returns {Type} Created message type\n */ Type.fromJSON = function fromJSON(name, json) {\n    var type = new Type(name, json.options);\n    type.extensions = json.extensions;\n    type.reserved = json.reserved;\n    var names = Object.keys(json.fields), i = 0;\n    for(; i < names.length; ++i)type.add((typeof json.fields[names[i]].keyType !== \"undefined\" ? MapField.fromJSON : Field.fromJSON)(names[i], json.fields[names[i]]));\n    if (json.oneofs) for(names = Object.keys(json.oneofs), i = 0; i < names.length; ++i)type.add(OneOf.fromJSON(names[i], json.oneofs[names[i]]));\n    if (json.nested) for(names = Object.keys(json.nested), i = 0; i < names.length; ++i){\n        var nested = json.nested[names[i]];\n        type.add((nested.id !== undefined ? Field.fromJSON : nested.fields !== undefined ? Type.fromJSON : nested.values !== undefined ? Enum.fromJSON : nested.methods !== undefined ? Service.fromJSON : Namespace.fromJSON)(names[i], nested));\n    }\n    if (json.extensions && json.extensions.length) type.extensions = json.extensions;\n    if (json.reserved && json.reserved.length) type.reserved = json.reserved;\n    if (json.group) type.group = true;\n    if (json.comment) type.comment = json.comment;\n    if (json.edition) type._edition = json.edition;\n    type._defaultEdition = \"proto3\"; // For backwards-compatibility.\n    return type;\n};\n/**\n * Converts this message type to a message type descriptor.\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {IType} Message type descriptor\n */ Type.prototype.toJSON = function toJSON(toJSONOptions) {\n    var inherited = Namespace.prototype.toJSON.call(this, toJSONOptions);\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n    return util.toObject([\n        \"edition\",\n        this._editionToJSON(),\n        \"options\",\n        inherited && inherited.options || undefined,\n        \"oneofs\",\n        Namespace.arrayToJSON(this.oneofsArray, toJSONOptions),\n        \"fields\",\n        Namespace.arrayToJSON(this.fieldsArray.filter(function(obj) {\n            return !obj.declaringField;\n        }), toJSONOptions) || {},\n        \"extensions\",\n        this.extensions && this.extensions.length ? this.extensions : undefined,\n        \"reserved\",\n        this.reserved && this.reserved.length ? this.reserved : undefined,\n        \"group\",\n        this.group || undefined,\n        \"nested\",\n        inherited && inherited.nested || undefined,\n        \"comment\",\n        keepComments ? this.comment : undefined\n    ]);\n};\n/**\n * @override\n */ Type.prototype.resolveAll = function resolveAll() {\n    if (!this._needsRecursiveResolve) return this;\n    Namespace.prototype.resolveAll.call(this);\n    var oneofs = this.oneofsArray;\n    i = 0;\n    while(i < oneofs.length)oneofs[i++].resolve();\n    var fields = this.fieldsArray, i = 0;\n    while(i < fields.length)fields[i++].resolve();\n    return this;\n};\n/**\n * @override\n */ Type.prototype._resolveFeaturesRecursive = function _resolveFeaturesRecursive(edition) {\n    if (!this._needsRecursiveFeatureResolution) return this;\n    edition = this._edition || edition;\n    Namespace.prototype._resolveFeaturesRecursive.call(this, edition);\n    this.oneofsArray.forEach((oneof)=>{\n        oneof._resolveFeatures(edition);\n    });\n    this.fieldsArray.forEach((field)=>{\n        field._resolveFeatures(edition);\n    });\n    return this;\n};\n/**\n * @override\n */ Type.prototype.get = function get(name) {\n    return this.fields[name] || this.oneofs && this.oneofs[name] || this.nested && this.nested[name] || null;\n};\n/**\n * Adds a nested object to this type.\n * @param {ReflectionObject} object Nested object to add\n * @returns {Type} `this`\n * @throws {TypeError} If arguments are invalid\n * @throws {Error} If there is already a nested object with this name or, if a field, when there is already a field with this id\n */ Type.prototype.add = function add(object) {\n    if (this.get(object.name)) throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\n    if (object instanceof Field && object.extend === undefined) {\n        // NOTE: Extension fields aren't actual fields on the declaring type, but nested objects.\n        // The root object takes care of adding distinct sister-fields to the respective extended\n        // type instead.\n        // avoids calling the getter if not absolutely necessary because it's called quite frequently\n        if (this._fieldsById ? /* istanbul ignore next */ this._fieldsById[object.id] : this.fieldsById[object.id]) throw Error(\"duplicate id \" + object.id + \" in \" + this);\n        if (this.isReservedId(object.id)) throw Error(\"id \" + object.id + \" is reserved in \" + this);\n        if (this.isReservedName(object.name)) throw Error(\"name '\" + object.name + \"' is reserved in \" + this);\n        if (object.parent) object.parent.remove(object);\n        this.fields[object.name] = object;\n        object.message = this;\n        object.onAdd(this);\n        return clearCache(this);\n    }\n    if (object instanceof OneOf) {\n        if (!this.oneofs) this.oneofs = {};\n        this.oneofs[object.name] = object;\n        object.onAdd(this);\n        return clearCache(this);\n    }\n    return Namespace.prototype.add.call(this, object);\n};\n/**\n * Removes a nested object from this type.\n * @param {ReflectionObject} object Nested object to remove\n * @returns {Type} `this`\n * @throws {TypeError} If arguments are invalid\n * @throws {Error} If `object` is not a member of this type\n */ Type.prototype.remove = function remove(object) {\n    if (object instanceof Field && object.extend === undefined) {\n        // See Type#add for the reason why extension fields are excluded here.\n        /* istanbul ignore if */ if (!this.fields || this.fields[object.name] !== object) throw Error(object + \" is not a member of \" + this);\n        delete this.fields[object.name];\n        object.parent = null;\n        object.onRemove(this);\n        return clearCache(this);\n    }\n    if (object instanceof OneOf) {\n        /* istanbul ignore if */ if (!this.oneofs || this.oneofs[object.name] !== object) throw Error(object + \" is not a member of \" + this);\n        delete this.oneofs[object.name];\n        object.parent = null;\n        object.onRemove(this);\n        return clearCache(this);\n    }\n    return Namespace.prototype.remove.call(this, object);\n};\n/**\n * Tests if the specified id is reserved.\n * @param {number} id Id to test\n * @returns {boolean} `true` if reserved, otherwise `false`\n */ Type.prototype.isReservedId = function isReservedId(id) {\n    return Namespace.isReservedId(this.reserved, id);\n};\n/**\n * Tests if the specified name is reserved.\n * @param {string} name Name to test\n * @returns {boolean} `true` if reserved, otherwise `false`\n */ Type.prototype.isReservedName = function isReservedName(name) {\n    return Namespace.isReservedName(this.reserved, name);\n};\n/**\n * Creates a new message of this type using the specified properties.\n * @param {Object.<string,*>} [properties] Properties to set\n * @returns {Message<{}>} Message instance\n */ Type.prototype.create = function create(properties) {\n    return new this.ctor(properties);\n};\n/**\n * Sets up {@link Type#encode|encode}, {@link Type#decode|decode} and {@link Type#verify|verify}.\n * @returns {Type} `this`\n */ Type.prototype.setup = function setup() {\n    // Sets up everything at once so that the prototype chain does not have to be re-evaluated\n    // multiple times (V8, soft-deopt prototype-check).\n    var fullName = this.fullName, types = [];\n    for(var i = 0; i < /* initializes */ this.fieldsArray.length; ++i)types.push(this._fieldsArray[i].resolve().resolvedType);\n    // Replace setup methods with type-specific generated functions\n    this.encode = encoder(this)({\n        Writer: Writer,\n        types: types,\n        util: util\n    });\n    this.decode = decoder(this)({\n        Reader: Reader,\n        types: types,\n        util: util\n    });\n    this.verify = verifier(this)({\n        types: types,\n        util: util\n    });\n    this.fromObject = converter.fromObject(this)({\n        types: types,\n        util: util\n    });\n    this.toObject = converter.toObject(this)({\n        types: types,\n        util: util\n    });\n    // Inject custom wrappers for common types\n    var wrapper = wrappers[fullName];\n    if (wrapper) {\n        var originalThis = Object.create(this);\n        // if (wrapper.fromObject) {\n        originalThis.fromObject = this.fromObject;\n        this.fromObject = wrapper.fromObject.bind(originalThis);\n        // }\n        // if (wrapper.toObject) {\n        originalThis.toObject = this.toObject;\n        this.toObject = wrapper.toObject.bind(originalThis);\n    // }\n    }\n    return this;\n};\n/**\n * Encodes a message of this type. Does not implicitly {@link Type#verify|verify} messages.\n * @param {Message<{}>|Object.<string,*>} message Message instance or plain object\n * @param {Writer} [writer] Writer to encode to\n * @returns {Writer} writer\n */ Type.prototype.encode = function encode_setup(message, writer) {\n    return this.setup().encode(message, writer); // overrides this method\n};\n/**\n * Encodes a message of this type preceeded by its byte length as a varint. Does not implicitly {@link Type#verify|verify} messages.\n * @param {Message<{}>|Object.<string,*>} message Message instance or plain object\n * @param {Writer} [writer] Writer to encode to\n * @returns {Writer} writer\n */ Type.prototype.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer && writer.len ? writer.fork() : writer).ldelim();\n};\n/**\n * Decodes a message of this type.\n * @param {Reader|Uint8Array} reader Reader or buffer to decode from\n * @param {number} [length] Length of the message, if known beforehand\n * @returns {Message<{}>} Decoded message\n * @throws {Error} If the payload is not a reader or valid buffer\n * @throws {util.ProtocolError<{}>} If required fields are missing\n */ Type.prototype.decode = function decode_setup(reader, length) {\n    return this.setup().decode(reader, length); // overrides this method\n};\n/**\n * Decodes a message of this type preceeded by its byte length as a varint.\n * @param {Reader|Uint8Array} reader Reader or buffer to decode from\n * @returns {Message<{}>} Decoded message\n * @throws {Error} If the payload is not a reader or valid buffer\n * @throws {util.ProtocolError} If required fields are missing\n */ Type.prototype.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof Reader)) reader = Reader.create(reader);\n    return this.decode(reader, reader.uint32());\n};\n/**\n * Verifies that field values are valid and that required fields are present.\n * @param {Object.<string,*>} message Plain object to verify\n * @returns {null|string} `null` if valid, otherwise the reason why it is not\n */ Type.prototype.verify = function verify_setup(message) {\n    return this.setup().verify(message); // overrides this method\n};\n/**\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\n * @param {Object.<string,*>} object Plain object to convert\n * @returns {Message<{}>} Message instance\n */ Type.prototype.fromObject = function fromObject(object) {\n    return this.setup().fromObject(object);\n};\n/**\n * Conversion options as used by {@link Type#toObject} and {@link Message.toObject}.\n * @interface IConversionOptions\n * @property {Function} [longs] Long conversion type.\n * Valid values are `String` and `Number` (the global types).\n * Defaults to copy the present value, which is a possibly unsafe number without and a {@link Long} with a long library.\n * @property {Function} [enums] Enum value conversion type.\n * Only valid value is `String` (the global type).\n * Defaults to copy the present value, which is the numeric id.\n * @property {Function} [bytes] Bytes value conversion type.\n * Valid values are `Array` and (a base64 encoded) `String` (the global types).\n * Defaults to copy the present value, which usually is a Buffer under node and an Uint8Array in the browser.\n * @property {boolean} [defaults=false] Also sets default values on the resulting object\n * @property {boolean} [arrays=false] Sets empty arrays for missing repeated fields even if `defaults=false`\n * @property {boolean} [objects=false] Sets empty objects for missing map fields even if `defaults=false`\n * @property {boolean} [oneofs=false] Includes virtual oneof properties set to the present field's name, if any\n * @property {boolean} [json=false] Performs additional JSON compatibility conversions, i.e. NaN and Infinity to strings\n */ /**\n * Creates a plain object from a message of this type. Also converts values to other types if specified.\n * @param {Message<{}>} message Message instance\n * @param {IConversionOptions} [options] Conversion options\n * @returns {Object.<string,*>} Plain object\n */ Type.prototype.toObject = function toObject(message, options) {\n    return this.setup().toObject(message, options);\n};\n/**\n * Decorator function as returned by {@link Type.d} (TypeScript).\n * @typedef TypeDecorator\n * @type {function}\n * @param {Constructor<T>} target Target constructor\n * @returns {undefined}\n * @template T extends Message<T>\n */ /**\n * Type decorator (TypeScript).\n * @param {string} [typeName] Type name, defaults to the constructor's name\n * @returns {TypeDecorator<T>} Decorator function\n * @template T extends Message<T>\n */ Type.d = function decorateType(typeName) {\n    return function typeDecorator(target) {\n        util.decorateType(target, typeName);\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protobufjs/src/type.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/protobufjs/src/types.js":
/*!**********************************************!*\
  !*** ./node_modules/protobufjs/src/types.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Common type constants.\n * @namespace\n */ var types = exports;\nvar util = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/protobufjs/src/util.js\");\nvar s = [\n    \"double\",\n    \"float\",\n    \"int32\",\n    \"uint32\",\n    \"sint32\",\n    \"fixed32\",\n    \"sfixed32\",\n    \"int64\",\n    \"uint64\",\n    \"sint64\",\n    \"fixed64\",\n    \"sfixed64\",\n    \"bool\",\n    \"string\",\n    \"bytes\" // 14\n];\nfunction bake(values, offset) {\n    var i = 0, o = {};\n    offset |= 0;\n    while(i < values.length)o[s[i + offset]] = values[i++];\n    return o;\n}\n/**\n * Basic type wire types.\n * @type {Object.<string,number>}\n * @const\n * @property {number} double=1 Fixed64 wire type\n * @property {number} float=5 Fixed32 wire type\n * @property {number} int32=0 Varint wire type\n * @property {number} uint32=0 Varint wire type\n * @property {number} sint32=0 Varint wire type\n * @property {number} fixed32=5 Fixed32 wire type\n * @property {number} sfixed32=5 Fixed32 wire type\n * @property {number} int64=0 Varint wire type\n * @property {number} uint64=0 Varint wire type\n * @property {number} sint64=0 Varint wire type\n * @property {number} fixed64=1 Fixed64 wire type\n * @property {number} sfixed64=1 Fixed64 wire type\n * @property {number} bool=0 Varint wire type\n * @property {number} string=2 Ldelim wire type\n * @property {number} bytes=2 Ldelim wire type\n */ types.basic = bake([\n    /* double   */ 1,\n    /* float    */ 5,\n    /* int32    */ 0,\n    /* uint32   */ 0,\n    /* sint32   */ 0,\n    /* fixed32  */ 5,\n    /* sfixed32 */ 5,\n    /* int64    */ 0,\n    /* uint64   */ 0,\n    /* sint64   */ 0,\n    /* fixed64  */ 1,\n    /* sfixed64 */ 1,\n    /* bool     */ 0,\n    /* string   */ 2,\n    /* bytes    */ 2\n]);\n/**\n * Basic type defaults.\n * @type {Object.<string,*>}\n * @const\n * @property {number} double=0 Double default\n * @property {number} float=0 Float default\n * @property {number} int32=0 Int32 default\n * @property {number} uint32=0 Uint32 default\n * @property {number} sint32=0 Sint32 default\n * @property {number} fixed32=0 Fixed32 default\n * @property {number} sfixed32=0 Sfixed32 default\n * @property {number} int64=0 Int64 default\n * @property {number} uint64=0 Uint64 default\n * @property {number} sint64=0 Sint32 default\n * @property {number} fixed64=0 Fixed64 default\n * @property {number} sfixed64=0 Sfixed64 default\n * @property {boolean} bool=false Bool default\n * @property {string} string=\"\" String default\n * @property {Array.<number>} bytes=Array(0) Bytes default\n * @property {null} message=null Message default\n */ types.defaults = bake([\n    /* double   */ 0,\n    /* float    */ 0,\n    /* int32    */ 0,\n    /* uint32   */ 0,\n    /* sint32   */ 0,\n    /* fixed32  */ 0,\n    /* sfixed32 */ 0,\n    /* int64    */ 0,\n    /* uint64   */ 0,\n    /* sint64   */ 0,\n    /* fixed64  */ 0,\n    /* sfixed64 */ 0,\n    /* bool     */ false,\n    /* string   */ \"\",\n    /* bytes    */ util.emptyArray,\n    /* message  */ null\n]);\n/**\n * Basic long type wire types.\n * @type {Object.<string,number>}\n * @const\n * @property {number} int64=0 Varint wire type\n * @property {number} uint64=0 Varint wire type\n * @property {number} sint64=0 Varint wire type\n * @property {number} fixed64=1 Fixed64 wire type\n * @property {number} sfixed64=1 Fixed64 wire type\n */ types.long = bake([\n    /* int64    */ 0,\n    /* uint64   */ 0,\n    /* sint64   */ 0,\n    /* fixed64  */ 1,\n    /* sfixed64 */ 1\n], 7);\n/**\n * Allowed types for map keys with their associated wire type.\n * @type {Object.<string,number>}\n * @const\n * @property {number} int32=0 Varint wire type\n * @property {number} uint32=0 Varint wire type\n * @property {number} sint32=0 Varint wire type\n * @property {number} fixed32=5 Fixed32 wire type\n * @property {number} sfixed32=5 Fixed32 wire type\n * @property {number} int64=0 Varint wire type\n * @property {number} uint64=0 Varint wire type\n * @property {number} sint64=0 Varint wire type\n * @property {number} fixed64=1 Fixed64 wire type\n * @property {number} sfixed64=1 Fixed64 wire type\n * @property {number} bool=0 Varint wire type\n * @property {number} string=2 Ldelim wire type\n */ types.mapKey = bake([\n    /* int32    */ 0,\n    /* uint32   */ 0,\n    /* sint32   */ 0,\n    /* fixed32  */ 5,\n    /* sfixed32 */ 5,\n    /* int64    */ 0,\n    /* uint64   */ 0,\n    /* sint64   */ 0,\n    /* fixed64  */ 1,\n    /* sfixed64 */ 1,\n    /* bool     */ 0,\n    /* string   */ 2\n], 2);\n/**\n * Allowed types for packed repeated fields with their associated wire type.\n * @type {Object.<string,number>}\n * @const\n * @property {number} double=1 Fixed64 wire type\n * @property {number} float=5 Fixed32 wire type\n * @property {number} int32=0 Varint wire type\n * @property {number} uint32=0 Varint wire type\n * @property {number} sint32=0 Varint wire type\n * @property {number} fixed32=5 Fixed32 wire type\n * @property {number} sfixed32=5 Fixed32 wire type\n * @property {number} int64=0 Varint wire type\n * @property {number} uint64=0 Varint wire type\n * @property {number} sint64=0 Varint wire type\n * @property {number} fixed64=1 Fixed64 wire type\n * @property {number} sfixed64=1 Fixed64 wire type\n * @property {number} bool=0 Varint wire type\n */ types.packed = bake([\n    /* double   */ 1,\n    /* float    */ 5,\n    /* int32    */ 0,\n    /* uint32   */ 0,\n    /* sint32   */ 0,\n    /* fixed32  */ 5,\n    /* sfixed32 */ 5,\n    /* int64    */ 0,\n    /* uint64   */ 0,\n    /* sint64   */ 0,\n    /* fixed64  */ 1,\n    /* sfixed64 */ 1,\n    /* bool     */ 0\n]);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protobufjs/src/types.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/protobufjs/src/util.js":
/*!*********************************************!*\
  !*** ./node_modules/protobufjs/src/util.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n/**\n * Various utility functions.\n * @namespace\n */ var util = module.exports = __webpack_require__(/*! ./util/minimal */ \"(ssr)/./node_modules/protobufjs/src/util/minimal.js\");\nvar roots = __webpack_require__(/*! ./roots */ \"(ssr)/./node_modules/protobufjs/src/roots.js\");\nvar Type, Enum;\nutil.codegen = __webpack_require__(/*! @protobufjs/codegen */ \"(ssr)/./node_modules/@protobufjs/codegen/index.js\");\nutil.fetch = __webpack_require__(/*! @protobufjs/fetch */ \"(ssr)/./node_modules/@protobufjs/fetch/index.js\");\nutil.path = __webpack_require__(/*! @protobufjs/path */ \"(ssr)/./node_modules/@protobufjs/path/index.js\");\n/**\n * Node's fs module if available.\n * @type {Object.<string,*>}\n */ util.fs = util.inquire(\"fs\");\n/**\n * Converts an object's values to an array.\n * @param {Object.<string,*>} object Object to convert\n * @returns {Array.<*>} Converted array\n */ util.toArray = function toArray(object) {\n    if (object) {\n        var keys = Object.keys(object), array = new Array(keys.length), index = 0;\n        while(index < keys.length)array[index] = object[keys[index++]];\n        return array;\n    }\n    return [];\n};\n/**\n * Converts an array of keys immediately followed by their respective value to an object, omitting undefined values.\n * @param {Array.<*>} array Array to convert\n * @returns {Object.<string,*>} Converted object\n */ util.toObject = function toObject(array) {\n    var object = {}, index = 0;\n    while(index < array.length){\n        var key = array[index++], val = array[index++];\n        if (val !== undefined) object[key] = val;\n    }\n    return object;\n};\nvar safePropBackslashRe = /\\\\/g, safePropQuoteRe = /\"/g;\n/**\n * Tests whether the specified name is a reserved word in JS.\n * @param {string} name Name to test\n * @returns {boolean} `true` if reserved, otherwise `false`\n */ util.isReserved = function isReserved(name) {\n    return /^(?:do|if|in|for|let|new|try|var|case|else|enum|eval|false|null|this|true|void|with|break|catch|class|const|super|throw|while|yield|delete|export|import|public|return|static|switch|typeof|default|extends|finally|package|private|continue|debugger|function|arguments|interface|protected|implements|instanceof)$/.test(name);\n};\n/**\n * Returns a safe property accessor for the specified property name.\n * @param {string} prop Property name\n * @returns {string} Safe accessor\n */ util.safeProp = function safeProp(prop) {\n    if (!/^[$\\w_]+$/.test(prop) || util.isReserved(prop)) return '[\"' + prop.replace(safePropBackslashRe, \"\\\\\\\\\").replace(safePropQuoteRe, '\\\\\"') + '\"]';\n    return \".\" + prop;\n};\n/**\n * Converts the first character of a string to upper case.\n * @param {string} str String to convert\n * @returns {string} Converted string\n */ util.ucFirst = function ucFirst(str) {\n    return str.charAt(0).toUpperCase() + str.substring(1);\n};\nvar camelCaseRe = /_([a-z])/g;\n/**\n * Converts a string to camel case.\n * @param {string} str String to convert\n * @returns {string} Converted string\n */ util.camelCase = function camelCase(str) {\n    return str.substring(0, 1) + str.substring(1).replace(camelCaseRe, function($0, $1) {\n        return $1.toUpperCase();\n    });\n};\n/**\n * Compares reflected fields by id.\n * @param {Field} a First field\n * @param {Field} b Second field\n * @returns {number} Comparison value\n */ util.compareFieldsById = function compareFieldsById(a, b) {\n    return a.id - b.id;\n};\n/**\n * Decorator helper for types (TypeScript).\n * @param {Constructor<T>} ctor Constructor function\n * @param {string} [typeName] Type name, defaults to the constructor's name\n * @returns {Type} Reflected type\n * @template T extends Message<T>\n * @property {Root} root Decorators root\n */ util.decorateType = function decorateType(ctor, typeName) {\n    /* istanbul ignore if */ if (ctor.$type) {\n        if (typeName && ctor.$type.name !== typeName) {\n            util.decorateRoot.remove(ctor.$type);\n            ctor.$type.name = typeName;\n            util.decorateRoot.add(ctor.$type);\n        }\n        return ctor.$type;\n    }\n    /* istanbul ignore next */ if (!Type) Type = __webpack_require__(/*! ./type */ \"(ssr)/./node_modules/protobufjs/src/type.js\");\n    var type = new Type(typeName || ctor.name);\n    util.decorateRoot.add(type);\n    type.ctor = ctor; // sets up .encode, .decode etc.\n    Object.defineProperty(ctor, \"$type\", {\n        value: type,\n        enumerable: false\n    });\n    Object.defineProperty(ctor.prototype, \"$type\", {\n        value: type,\n        enumerable: false\n    });\n    return type;\n};\nvar decorateEnumIndex = 0;\n/**\n * Decorator helper for enums (TypeScript).\n * @param {Object} object Enum object\n * @returns {Enum} Reflected enum\n */ util.decorateEnum = function decorateEnum(object) {\n    /* istanbul ignore if */ if (object.$type) return object.$type;\n    /* istanbul ignore next */ if (!Enum) Enum = __webpack_require__(/*! ./enum */ \"(ssr)/./node_modules/protobufjs/src/enum.js\");\n    var enm = new Enum(\"Enum\" + decorateEnumIndex++, object);\n    util.decorateRoot.add(enm);\n    Object.defineProperty(object, \"$type\", {\n        value: enm,\n        enumerable: false\n    });\n    return enm;\n};\n/**\n * Sets the value of a property by property path. If a value already exists, it is turned to an array\n * @param {Object.<string,*>} dst Destination object\n * @param {string} path dot '.' delimited path of the property to set\n * @param {Object} value the value to set\n * @param {boolean|undefined} [ifNotSet] Sets the option only if it isn't currently set\n * @returns {Object.<string,*>} Destination object\n */ util.setProperty = function setProperty(dst, path, value, ifNotSet) {\n    function setProp(dst, path, value) {\n        var part = path.shift();\n        if (part === \"__proto__\" || part === \"prototype\") {\n            return dst;\n        }\n        if (path.length > 0) {\n            dst[part] = setProp(dst[part] || {}, path, value);\n        } else {\n            var prevValue = dst[part];\n            if (prevValue && ifNotSet) return dst;\n            if (prevValue) value = [].concat(prevValue).concat(value);\n            dst[part] = value;\n        }\n        return dst;\n    }\n    if (typeof dst !== \"object\") throw TypeError(\"dst must be an object\");\n    if (!path) throw TypeError(\"path must be specified\");\n    path = path.split(\".\");\n    return setProp(dst, path, value);\n};\n/**\n * Decorator root (TypeScript).\n * @name util.decorateRoot\n * @type {Root}\n * @readonly\n */ Object.defineProperty(util, \"decorateRoot\", {\n    get: function() {\n        return roots[\"decorated\"] || (roots[\"decorated\"] = new (__webpack_require__(/*! ./root */ \"(ssr)/./node_modules/protobufjs/src/root.js\"))());\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protobufjs/src/util.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/protobufjs/src/util/longbits.js":
/*!******************************************************!*\
  !*** ./node_modules/protobufjs/src/util/longbits.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = LongBits;\nvar util = __webpack_require__(/*! ../util/minimal */ \"(ssr)/./node_modules/protobufjs/src/util/minimal.js\");\n/**\n * Constructs new long bits.\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\n * @memberof util\n * @constructor\n * @param {number} lo Low 32 bits, unsigned\n * @param {number} hi High 32 bits, unsigned\n */ function LongBits(lo, hi) {\n    // note that the casts below are theoretically unnecessary as of today, but older statically\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\n    /**\n     * Low bits.\n     * @type {number}\n     */ this.lo = lo >>> 0;\n    /**\n     * High bits.\n     * @type {number}\n     */ this.hi = hi >>> 0;\n}\n/**\n * Zero bits.\n * @memberof util.LongBits\n * @type {util.LongBits}\n */ var zero = LongBits.zero = new LongBits(0, 0);\nzero.toNumber = function() {\n    return 0;\n};\nzero.zzEncode = zero.zzDecode = function() {\n    return this;\n};\nzero.length = function() {\n    return 1;\n};\n/**\n * Zero hash.\n * @memberof util.LongBits\n * @type {string}\n */ var zeroHash = LongBits.zeroHash = \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\";\n/**\n * Constructs new long bits from the specified number.\n * @param {number} value Value\n * @returns {util.LongBits} Instance\n */ LongBits.fromNumber = function fromNumber(value) {\n    if (value === 0) return zero;\n    var sign = value < 0;\n    if (sign) value = -value;\n    var lo = value >>> 0, hi = (value - lo) / 4294967296 >>> 0;\n    if (sign) {\n        hi = ~hi >>> 0;\n        lo = ~lo >>> 0;\n        if (++lo > 4294967295) {\n            lo = 0;\n            if (++hi > 4294967295) hi = 0;\n        }\n    }\n    return new LongBits(lo, hi);\n};\n/**\n * Constructs new long bits from a number, long or string.\n * @param {Long|number|string} value Value\n * @returns {util.LongBits} Instance\n */ LongBits.from = function from(value) {\n    if (typeof value === \"number\") return LongBits.fromNumber(value);\n    if (util.isString(value)) {\n        /* istanbul ignore else */ if (util.Long) value = util.Long.fromString(value);\n        else return LongBits.fromNumber(parseInt(value, 10));\n    }\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\n};\n/**\n * Converts this long bits to a possibly unsafe JavaScript number.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {number} Possibly unsafe number\n */ LongBits.prototype.toNumber = function toNumber(unsigned) {\n    if (!unsigned && this.hi >>> 31) {\n        var lo = ~this.lo + 1 >>> 0, hi = ~this.hi >>> 0;\n        if (!lo) hi = hi + 1 >>> 0;\n        return -(lo + hi * 4294967296);\n    }\n    return this.lo + this.hi * 4294967296;\n};\n/**\n * Converts this long bits to a long.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long} Long\n */ LongBits.prototype.toLong = function toLong(unsigned) {\n    return util.Long ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned)) : {\n        low: this.lo | 0,\n        high: this.hi | 0,\n        unsigned: Boolean(unsigned)\n    };\n};\nvar charCodeAt = String.prototype.charCodeAt;\n/**\n * Constructs new long bits from the specified 8 characters long hash.\n * @param {string} hash Hash\n * @returns {util.LongBits} Bits\n */ LongBits.fromHash = function fromHash(hash) {\n    if (hash === zeroHash) return zero;\n    return new LongBits((charCodeAt.call(hash, 0) | charCodeAt.call(hash, 1) << 8 | charCodeAt.call(hash, 2) << 16 | charCodeAt.call(hash, 3) << 24) >>> 0, (charCodeAt.call(hash, 4) | charCodeAt.call(hash, 5) << 8 | charCodeAt.call(hash, 6) << 16 | charCodeAt.call(hash, 7) << 24) >>> 0);\n};\n/**\n * Converts this long bits to a 8 characters long hash.\n * @returns {string} Hash\n */ LongBits.prototype.toHash = function toHash() {\n    return String.fromCharCode(this.lo & 255, this.lo >>> 8 & 255, this.lo >>> 16 & 255, this.lo >>> 24, this.hi & 255, this.hi >>> 8 & 255, this.hi >>> 16 & 255, this.hi >>> 24);\n};\n/**\n * Zig-zag encodes this long bits.\n * @returns {util.LongBits} `this`\n */ LongBits.prototype.zzEncode = function zzEncode() {\n    var mask = this.hi >> 31;\n    this.hi = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\n    this.lo = (this.lo << 1 ^ mask) >>> 0;\n    return this;\n};\n/**\n * Zig-zag decodes this long bits.\n * @returns {util.LongBits} `this`\n */ LongBits.prototype.zzDecode = function zzDecode() {\n    var mask = -(this.lo & 1);\n    this.lo = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\n    this.hi = (this.hi >>> 1 ^ mask) >>> 0;\n    return this;\n};\n/**\n * Calculates the length of this longbits when encoded as a varint.\n * @returns {number} Length\n */ LongBits.prototype.length = function length() {\n    var part0 = this.lo, part1 = (this.lo >>> 28 | this.hi << 4) >>> 0, part2 = this.hi >>> 24;\n    return part2 === 0 ? part1 === 0 ? part0 < 16384 ? part0 < 128 ? 1 : 2 : part0 < 2097152 ? 3 : 4 : part1 < 16384 ? part1 < 128 ? 5 : 6 : part1 < 2097152 ? 7 : 8 : part2 < 128 ? 9 : 10;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protobufjs/src/util/longbits.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/protobufjs/src/util/minimal.js":
/*!*****************************************************!*\
  !*** ./node_modules/protobufjs/src/util/minimal.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar util = exports;\n// used to return a Promise where callback is omitted\nutil.asPromise = __webpack_require__(/*! @protobufjs/aspromise */ \"(ssr)/./node_modules/@protobufjs/aspromise/index.js\");\n// converts to / from base64 encoded strings\nutil.base64 = __webpack_require__(/*! @protobufjs/base64 */ \"(ssr)/./node_modules/@protobufjs/base64/index.js\");\n// base class of rpc.Service\nutil.EventEmitter = __webpack_require__(/*! @protobufjs/eventemitter */ \"(ssr)/./node_modules/@protobufjs/eventemitter/index.js\");\n// float handling accross browsers\nutil.float = __webpack_require__(/*! @protobufjs/float */ \"(ssr)/./node_modules/@protobufjs/float/index.js\");\n// requires modules optionally and hides the call from bundlers\nutil.inquire = __webpack_require__(/*! @protobufjs/inquire */ \"(ssr)/./node_modules/@protobufjs/inquire/index.js\");\n// converts to / from utf8 encoded strings\nutil.utf8 = __webpack_require__(/*! @protobufjs/utf8 */ \"(ssr)/./node_modules/@protobufjs/utf8/index.js\");\n// provides a node-like buffer pool in the browser\nutil.pool = __webpack_require__(/*! @protobufjs/pool */ \"(ssr)/./node_modules/@protobufjs/pool/index.js\");\n// utility to work with the low and high bits of a 64 bit value\nutil.LongBits = __webpack_require__(/*! ./longbits */ \"(ssr)/./node_modules/protobufjs/src/util/longbits.js\");\n/**\n * Whether running within node or not.\n * @memberof util\n * @type {boolean}\n */ util.isNode = Boolean(typeof global !== \"undefined\" && global && global.process && global.process.versions && global.process.versions.node);\n/**\n * Global object reference.\n * @memberof util\n * @type {Object}\n */ util.global = util.isNode && global ||  false && 0 || typeof self !== \"undefined\" && self || this; // eslint-disable-line no-invalid-this\n/**\n * An immuable empty array.\n * @memberof util\n * @type {Array.<*>}\n * @const\n */ util.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\n/**\n * An immutable empty object.\n * @type {Object}\n * @const\n */ util.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\n/**\n * Tests if the specified value is an integer.\n * @function\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is an integer\n */ util.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\n};\n/**\n * Tests if the specified value is a string.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a string\n */ util.isString = function isString(value) {\n    return typeof value === \"string\" || value instanceof String;\n};\n/**\n * Tests if the specified value is a non-null object.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a non-null object\n */ util.isObject = function isObject(value) {\n    return value && typeof value === \"object\";\n};\n/**\n * Checks if a property on a message is considered to be present.\n * This is an alias of {@link util.isSet}.\n * @function\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */ util.isset = /**\n * Checks if a property on a message is considered to be present.\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */ util.isSet = function isSet(obj, prop) {\n    var value = obj[prop];\n    if (value != null && obj.hasOwnProperty(prop)) return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\n    return false;\n};\n/**\n * Any compatible Buffer instance.\n * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\n * @interface Buffer\n * @extends Uint8Array\n */ /**\n * Node's Buffer class if available.\n * @type {Constructor<Buffer>}\n */ util.Buffer = function() {\n    try {\n        var Buffer = util.inquire(\"buffer\").Buffer;\n        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\n        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\n    } catch (e) {\n        /* istanbul ignore next */ return null;\n    }\n}();\n// Internal alias of or polyfull for Buffer.from.\nutil._Buffer_from = null;\n// Internal alias of or polyfill for Buffer.allocUnsafe.\nutil._Buffer_allocUnsafe = null;\n/**\n * Creates a new buffer of whatever type supported by the environment.\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\n * @returns {Uint8Array|Buffer} Buffer\n */ util.newBuffer = function newBuffer(sizeOrArray) {\n    /* istanbul ignore next */ return typeof sizeOrArray === \"number\" ? util.Buffer ? util._Buffer_allocUnsafe(sizeOrArray) : new util.Array(sizeOrArray) : util.Buffer ? util._Buffer_from(sizeOrArray) : typeof Uint8Array === \"undefined\" ? sizeOrArray : new Uint8Array(sizeOrArray);\n};\n/**\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\n * @type {Constructor<Uint8Array>}\n */ util.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */  : Array;\n/**\n * Any compatible Long instance.\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\n * @interface Long\n * @property {number} low Low bits\n * @property {number} high High bits\n * @property {boolean} unsigned Whether unsigned or not\n */ /**\n * Long.js's Long class if available.\n * @type {Constructor<Long>}\n */ util.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long || /* istanbul ignore next */ util.global.Long || util.inquire(\"long\");\n/**\n * Regular expression used to verify 2 bit (`bool`) map keys.\n * @type {RegExp}\n * @const\n */ util.key2Re = /^true|false|0|1$/;\n/**\n * Regular expression used to verify 32 bit (`int32` etc.) map keys.\n * @type {RegExp}\n * @const\n */ util.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\n/**\n * Regular expression used to verify 64 bit (`int64` etc.) map keys.\n * @type {RegExp}\n * @const\n */ util.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\n/**\n * Converts a number or long to an 8 characters long hash string.\n * @param {Long|number} value Value to convert\n * @returns {string} Hash\n */ util.longToHash = function longToHash(value) {\n    return value ? util.LongBits.from(value).toHash() : util.LongBits.zeroHash;\n};\n/**\n * Converts an 8 characters long hash string to a long or number.\n * @param {string} hash Hash\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long|number} Original value\n */ util.longFromHash = function longFromHash(hash, unsigned) {\n    var bits = util.LongBits.fromHash(hash);\n    if (util.Long) return util.Long.fromBits(bits.lo, bits.hi, unsigned);\n    return bits.toNumber(Boolean(unsigned));\n};\n/**\n * Merges the properties of the source object into the destination object.\n * @memberof util\n * @param {Object.<string,*>} dst Destination object\n * @param {Object.<string,*>} src Source object\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\n * @returns {Object.<string,*>} Destination object\n */ function merge(dst, src, ifNotSet) {\n    for(var keys = Object.keys(src), i = 0; i < keys.length; ++i)if (dst[keys[i]] === undefined || !ifNotSet) dst[keys[i]] = src[keys[i]];\n    return dst;\n}\nutil.merge = merge;\n/**\n * Converts the first character of a string to lower case.\n * @param {string} str String to convert\n * @returns {string} Converted string\n */ util.lcFirst = function lcFirst(str) {\n    return str.charAt(0).toLowerCase() + str.substring(1);\n};\n/**\n * Creates a custom error constructor.\n * @memberof util\n * @param {string} name Error name\n * @returns {Constructor<Error>} Custom error constructor\n */ function newError(name) {\n    function CustomError(message, properties) {\n        if (!(this instanceof CustomError)) return new CustomError(message, properties);\n        // Error.call(this, message);\n        // ^ just returns a new error instance because the ctor can be called as a function\n        Object.defineProperty(this, \"message\", {\n            get: function() {\n                return message;\n            }\n        });\n        /* istanbul ignore next */ if (Error.captureStackTrace) Error.captureStackTrace(this, CustomError);\n        else Object.defineProperty(this, \"stack\", {\n            value: new Error().stack || \"\"\n        });\n        if (properties) merge(this, properties);\n    }\n    CustomError.prototype = Object.create(Error.prototype, {\n        constructor: {\n            value: CustomError,\n            writable: true,\n            enumerable: false,\n            configurable: true\n        },\n        name: {\n            get: function get() {\n                return name;\n            },\n            set: undefined,\n            enumerable: false,\n            // configurable: false would accurately preserve the behavior of\n            // the original, but I'm guessing that was not intentional.\n            // For an actual error subclass, this property would\n            // be configurable.\n            configurable: true\n        },\n        toString: {\n            value: function value() {\n                return this.name + \": \" + this.message;\n            },\n            writable: true,\n            enumerable: false,\n            configurable: true\n        }\n    });\n    return CustomError;\n}\nutil.newError = newError;\n/**\n * Constructs a new protocol error.\n * @classdesc Error subclass indicating a protocol specifc error.\n * @memberof util\n * @extends Error\n * @template T extends Message<T>\n * @constructor\n * @param {string} message Error message\n * @param {Object.<string,*>} [properties] Additional properties\n * @example\n * try {\n *     MyMessage.decode(someBuffer); // throws if required fields are missing\n * } catch (e) {\n *     if (e instanceof ProtocolError && e.instance)\n *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\n * }\n */ util.ProtocolError = newError(\"ProtocolError\");\n/**\n * So far decoded message instance.\n * @name util.ProtocolError#instance\n * @type {Message<T>}\n */ /**\n * A OneOf getter as returned by {@link util.oneOfGetter}.\n * @typedef OneOfGetter\n * @type {function}\n * @returns {string|undefined} Set field name, if any\n */ /**\n * Builds a getter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfGetter} Unbound getter\n */ util.oneOfGetter = function getOneOf(fieldNames) {\n    var fieldMap = {};\n    for(var i = 0; i < fieldNames.length; ++i)fieldMap[fieldNames[i]] = 1;\n    /**\n     * @returns {string|undefined} Set field name, if any\n     * @this Object\n     * @ignore\n     */ return function() {\n        for(var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null) return keys[i];\n    };\n};\n/**\n * A OneOf setter as returned by {@link util.oneOfSetter}.\n * @typedef OneOfSetter\n * @type {function}\n * @param {string|undefined} value Field name\n * @returns {undefined}\n */ /**\n * Builds a setter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfSetter} Unbound setter\n */ util.oneOfSetter = function setOneOf(fieldNames) {\n    /**\n     * @param {string} name Field name\n     * @returns {undefined}\n     * @this Object\n     * @ignore\n     */ return function(name) {\n        for(var i = 0; i < fieldNames.length; ++i)if (fieldNames[i] !== name) delete this[fieldNames[i]];\n    };\n};\n/**\n * Default conversion options used for {@link Message#toJSON} implementations.\n *\n * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\n *\n * - Longs become strings\n * - Enums become string keys\n * - Bytes become base64 encoded strings\n * - (Sub-)Messages become plain objects\n * - Maps become plain objects with all string keys\n * - Repeated fields become arrays\n * - NaN and Infinity for float and double fields become strings\n *\n * @type {IConversionOptions}\n * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\n */ util.toJSONOptions = {\n    longs: String,\n    enums: String,\n    bytes: String,\n    json: true\n};\n// Sets up buffer utility according to the environment (called in index-minimal)\nutil._configure = function() {\n    var Buffer = util.Buffer;\n    /* istanbul ignore if */ if (!Buffer) {\n        util._Buffer_from = util._Buffer_allocUnsafe = null;\n        return;\n    }\n    // because node 4.x buffers are incompatible & immutable\n    // see: https://github.com/dcodeIO/protobuf.js/pull/665\n    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from || /* istanbul ignore next */ function Buffer_from(value, encoding) {\n        return new Buffer(value, encoding);\n    };\n    util._Buffer_allocUnsafe = Buffer.allocUnsafe || /* istanbul ignore next */ function Buffer_allocUnsafe(size) {\n        return new Buffer(size);\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protobufjs/src/util/minimal.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/protobufjs/src/verifier.js":
/*!*************************************************!*\
  !*** ./node_modules/protobufjs/src/verifier.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = verifier;\nvar Enum = __webpack_require__(/*! ./enum */ \"(ssr)/./node_modules/protobufjs/src/enum.js\"), util = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/protobufjs/src/util.js\");\nfunction invalid(field, expected) {\n    return field.name + \": \" + expected + (field.repeated && expected !== \"array\" ? \"[]\" : field.map && expected !== \"object\" ? \"{k:\" + field.keyType + \"}\" : \"\") + \" expected\";\n}\n/**\n * Generates a partial value verifier.\n * @param {Codegen} gen Codegen instance\n * @param {Field} field Reflected field\n * @param {number} fieldIndex Field index\n * @param {string} ref Variable reference\n * @returns {Codegen} Codegen instance\n * @ignore\n */ function genVerifyValue(gen, field, fieldIndex, ref) {\n    /* eslint-disable no-unexpected-multiline */ if (field.resolvedType) {\n        if (field.resolvedType instanceof Enum) {\n            gen(\"switch(%s){\", ref)(\"default:\")(\"return%j\", invalid(field, \"enum value\"));\n            for(var keys = Object.keys(field.resolvedType.values), j = 0; j < keys.length; ++j)gen(\"case %i:\", field.resolvedType.values[keys[j]]);\n            gen(\"break\")(\"}\");\n        } else {\n            gen(\"{\")(\"var e=types[%i].verify(%s);\", fieldIndex, ref)(\"if(e)\")(\"return%j+e\", field.name + \".\")(\"}\");\n        }\n    } else {\n        switch(field.type){\n            case \"int32\":\n            case \"uint32\":\n            case \"sint32\":\n            case \"fixed32\":\n            case \"sfixed32\":\n                gen(\"if(!util.isInteger(%s))\", ref)(\"return%j\", invalid(field, \"integer\"));\n                break;\n            case \"int64\":\n            case \"uint64\":\n            case \"sint64\":\n            case \"fixed64\":\n            case \"sfixed64\":\n                gen(\"if(!util.isInteger(%s)&&!(%s&&util.isInteger(%s.low)&&util.isInteger(%s.high)))\", ref, ref, ref, ref)(\"return%j\", invalid(field, \"integer|Long\"));\n                break;\n            case \"float\":\n            case \"double\":\n                gen('if(typeof %s!==\"number\")', ref)(\"return%j\", invalid(field, \"number\"));\n                break;\n            case \"bool\":\n                gen('if(typeof %s!==\"boolean\")', ref)(\"return%j\", invalid(field, \"boolean\"));\n                break;\n            case \"string\":\n                gen(\"if(!util.isString(%s))\", ref)(\"return%j\", invalid(field, \"string\"));\n                break;\n            case \"bytes\":\n                gen('if(!(%s&&typeof %s.length===\"number\"||util.isString(%s)))', ref, ref, ref)(\"return%j\", invalid(field, \"buffer\"));\n                break;\n        }\n    }\n    return gen;\n/* eslint-enable no-unexpected-multiline */ }\n/**\n * Generates a partial key verifier.\n * @param {Codegen} gen Codegen instance\n * @param {Field} field Reflected field\n * @param {string} ref Variable reference\n * @returns {Codegen} Codegen instance\n * @ignore\n */ function genVerifyKey(gen, field, ref) {\n    /* eslint-disable no-unexpected-multiline */ switch(field.keyType){\n        case \"int32\":\n        case \"uint32\":\n        case \"sint32\":\n        case \"fixed32\":\n        case \"sfixed32\":\n            gen(\"if(!util.key32Re.test(%s))\", ref)(\"return%j\", invalid(field, \"integer key\"));\n            break;\n        case \"int64\":\n        case \"uint64\":\n        case \"sint64\":\n        case \"fixed64\":\n        case \"sfixed64\":\n            gen(\"if(!util.key64Re.test(%s))\", ref) // see comment above: x is ok, d is not\n            (\"return%j\", invalid(field, \"integer|Long key\"));\n            break;\n        case \"bool\":\n            gen(\"if(!util.key2Re.test(%s))\", ref)(\"return%j\", invalid(field, \"boolean key\"));\n            break;\n    }\n    return gen;\n/* eslint-enable no-unexpected-multiline */ }\n/**\n * Generates a verifier specific to the specified message type.\n * @param {Type} mtype Message type\n * @returns {Codegen} Codegen instance\n */ function verifier(mtype) {\n    /* eslint-disable no-unexpected-multiline */ var gen = util.codegen([\n        \"m\"\n    ], mtype.name + \"$verify\")('if(typeof m!==\"object\"||m===null)')(\"return%j\", \"object expected\");\n    var oneofs = mtype.oneofsArray, seenFirstField = {};\n    if (oneofs.length) gen(\"var p={}\");\n    for(var i = 0; i < /* initializes */ mtype.fieldsArray.length; ++i){\n        var field = mtype._fieldsArray[i].resolve(), ref = \"m\" + util.safeProp(field.name);\n        if (field.optional) gen(\"if(%s!=null&&m.hasOwnProperty(%j)){\", ref, field.name); // !== undefined && !== null\n        // map fields\n        if (field.map) {\n            gen(\"if(!util.isObject(%s))\", ref)(\"return%j\", invalid(field, \"object\"))(\"var k=Object.keys(%s)\", ref)(\"for(var i=0;i<k.length;++i){\");\n            genVerifyKey(gen, field, \"k[i]\");\n            genVerifyValue(gen, field, i, ref + \"[k[i]]\")(\"}\");\n        // repeated fields\n        } else if (field.repeated) {\n            gen(\"if(!Array.isArray(%s))\", ref)(\"return%j\", invalid(field, \"array\"))(\"for(var i=0;i<%s.length;++i){\", ref);\n            genVerifyValue(gen, field, i, ref + \"[i]\")(\"}\");\n        // required or present fields\n        } else {\n            if (field.partOf) {\n                var oneofProp = util.safeProp(field.partOf.name);\n                if (seenFirstField[field.partOf.name] === 1) gen(\"if(p%s===1)\", oneofProp)(\"return%j\", field.partOf.name + \": multiple values\");\n                seenFirstField[field.partOf.name] = 1;\n                gen(\"p%s=1\", oneofProp);\n            }\n            genVerifyValue(gen, field, i, ref);\n        }\n        if (field.optional) gen(\"}\");\n    }\n    return gen(\"return null\");\n/* eslint-enable no-unexpected-multiline */ }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protobufjs/src/verifier.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/protobufjs/src/wrappers.js":
/*!*************************************************!*\
  !*** ./node_modules/protobufjs/src/wrappers.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Wrappers for common types.\n * @type {Object.<string,IWrapper>}\n * @const\n */ var wrappers = exports;\nvar Message = __webpack_require__(/*! ./message */ \"(ssr)/./node_modules/protobufjs/src/message.js\");\n/**\n * From object converter part of an {@link IWrapper}.\n * @typedef WrapperFromObjectConverter\n * @type {function}\n * @param {Object.<string,*>} object Plain object\n * @returns {Message<{}>} Message instance\n * @this Type\n */ /**\n * To object converter part of an {@link IWrapper}.\n * @typedef WrapperToObjectConverter\n * @type {function}\n * @param {Message<{}>} message Message instance\n * @param {IConversionOptions} [options] Conversion options\n * @returns {Object.<string,*>} Plain object\n * @this Type\n */ /**\n * Common type wrapper part of {@link wrappers}.\n * @interface IWrapper\n * @property {WrapperFromObjectConverter} [fromObject] From object converter\n * @property {WrapperToObjectConverter} [toObject] To object converter\n */ // Custom wrapper for Any\nwrappers[\".google.protobuf.Any\"] = {\n    fromObject: function(object) {\n        // unwrap value type if mapped\n        if (object && object[\"@type\"]) {\n            // Only use fully qualified type name after the last '/'\n            var name = object[\"@type\"].substring(object[\"@type\"].lastIndexOf(\"/\") + 1);\n            var type = this.lookup(name);\n            /* istanbul ignore else */ if (type) {\n                // type_url does not accept leading \".\"\n                var type_url = object[\"@type\"].charAt(0) === \".\" ? object[\"@type\"].slice(1) : object[\"@type\"];\n                // type_url prefix is optional, but path seperator is required\n                if (type_url.indexOf(\"/\") === -1) {\n                    type_url = \"/\" + type_url;\n                }\n                return this.create({\n                    type_url: type_url,\n                    value: type.encode(type.fromObject(object)).finish()\n                });\n            }\n        }\n        return this.fromObject(object);\n    },\n    toObject: function(message, options) {\n        // Default prefix\n        var googleApi = \"type.googleapis.com/\";\n        var prefix = \"\";\n        var name = \"\";\n        // decode value if requested and unmapped\n        if (options && options.json && message.type_url && message.value) {\n            // Only use fully qualified type name after the last '/'\n            name = message.type_url.substring(message.type_url.lastIndexOf(\"/\") + 1);\n            // Separate the prefix used\n            prefix = message.type_url.substring(0, message.type_url.lastIndexOf(\"/\") + 1);\n            var type = this.lookup(name);\n            /* istanbul ignore else */ if (type) message = type.decode(message.value);\n        }\n        // wrap value if unmapped\n        if (!(message instanceof this.ctor) && message instanceof Message) {\n            var object = message.$type.toObject(message, options);\n            var messageName = message.$type.fullName[0] === \".\" ? message.$type.fullName.slice(1) : message.$type.fullName;\n            // Default to type.googleapis.com prefix if no prefix is used\n            if (prefix === \"\") {\n                prefix = googleApi;\n            }\n            name = prefix + messageName;\n            object[\"@type\"] = name;\n            return object;\n        }\n        return this.toObject(message, options);\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcHJvdG9idWZqcy9zcmMvd3JhcHBlcnMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYjs7OztDQUlDLEdBQ0QsSUFBSUEsV0FBV0M7QUFFZixJQUFJQyxVQUFVQyxtQkFBT0EsQ0FBQyxpRUFBVztBQUVqQzs7Ozs7OztDQU9DLEdBRUQ7Ozs7Ozs7O0NBUUMsR0FFRDs7Ozs7Q0FLQyxHQUVELHlCQUF5QjtBQUN6QkgsUUFBUSxDQUFDLHVCQUF1QixHQUFHO0lBRS9CSSxZQUFZLFNBQVNDLE1BQU07UUFFdkIsOEJBQThCO1FBQzlCLElBQUlBLFVBQVVBLE1BQU0sQ0FBQyxRQUFRLEVBQUU7WUFDMUIsd0RBQXdEO1lBQ3pELElBQUlDLE9BQU9ELE1BQU0sQ0FBQyxRQUFRLENBQUNFLFNBQVMsQ0FBQ0YsTUFBTSxDQUFDLFFBQVEsQ0FBQ0csV0FBVyxDQUFDLE9BQU87WUFDeEUsSUFBSUMsT0FBTyxJQUFJLENBQUNDLE1BQU0sQ0FBQ0o7WUFDdkIsd0JBQXdCLEdBQ3hCLElBQUlHLE1BQU07Z0JBQ04sdUNBQXVDO2dCQUN2QyxJQUFJRSxXQUFXTixNQUFNLENBQUMsUUFBUSxDQUFDTyxNQUFNLENBQUMsT0FBTyxNQUN6Q1AsTUFBTSxDQUFDLFFBQVEsQ0FBQ1EsS0FBSyxDQUFDLEtBQUtSLE1BQU0sQ0FBQyxRQUFRO2dCQUM5Qyw4REFBOEQ7Z0JBQzlELElBQUlNLFNBQVNHLE9BQU8sQ0FBQyxTQUFTLENBQUMsR0FBRztvQkFDOUJILFdBQVcsTUFBTUE7Z0JBQ3JCO2dCQUNBLE9BQU8sSUFBSSxDQUFDSSxNQUFNLENBQUM7b0JBQ2ZKLFVBQVVBO29CQUNWSyxPQUFPUCxLQUFLUSxNQUFNLENBQUNSLEtBQUtMLFVBQVUsQ0FBQ0MsU0FBU2EsTUFBTTtnQkFDdEQ7WUFDSjtRQUNKO1FBRUEsT0FBTyxJQUFJLENBQUNkLFVBQVUsQ0FBQ0M7SUFDM0I7SUFFQWMsVUFBVSxTQUFTQyxPQUFPLEVBQUVDLE9BQU87UUFFL0IsaUJBQWlCO1FBQ2pCLElBQUlDLFlBQVk7UUFDaEIsSUFBSUMsU0FBUztRQUNiLElBQUlqQixPQUFPO1FBRVgseUNBQXlDO1FBQ3pDLElBQUllLFdBQVdBLFFBQVFHLElBQUksSUFBSUosUUFBUVQsUUFBUSxJQUFJUyxRQUFRSixLQUFLLEVBQUU7WUFDOUQsd0RBQXdEO1lBQ3hEVixPQUFPYyxRQUFRVCxRQUFRLENBQUNKLFNBQVMsQ0FBQ2EsUUFBUVQsUUFBUSxDQUFDSCxXQUFXLENBQUMsT0FBTztZQUN0RSwyQkFBMkI7WUFDM0JlLFNBQVNILFFBQVFULFFBQVEsQ0FBQ0osU0FBUyxDQUFDLEdBQUdhLFFBQVFULFFBQVEsQ0FBQ0gsV0FBVyxDQUFDLE9BQU87WUFDM0UsSUFBSUMsT0FBTyxJQUFJLENBQUNDLE1BQU0sQ0FBQ0o7WUFDdkIsd0JBQXdCLEdBQ3hCLElBQUlHLE1BQ0FXLFVBQVVYLEtBQUtnQixNQUFNLENBQUNMLFFBQVFKLEtBQUs7UUFDM0M7UUFFQSx5QkFBeUI7UUFDekIsSUFBSSxDQUFFSSxDQUFBQSxtQkFBbUIsSUFBSSxDQUFDTSxJQUFJLEtBQUtOLG1CQUFtQmxCLFNBQVM7WUFDL0QsSUFBSUcsU0FBU2UsUUFBUU8sS0FBSyxDQUFDUixRQUFRLENBQUNDLFNBQVNDO1lBQzdDLElBQUlPLGNBQWNSLFFBQVFPLEtBQUssQ0FBQ0UsUUFBUSxDQUFDLEVBQUUsS0FBSyxNQUM1Q1QsUUFBUU8sS0FBSyxDQUFDRSxRQUFRLENBQUNoQixLQUFLLENBQUMsS0FBS08sUUFBUU8sS0FBSyxDQUFDRSxRQUFRO1lBQzVELDZEQUE2RDtZQUM3RCxJQUFJTixXQUFXLElBQUk7Z0JBQ2ZBLFNBQVNEO1lBQ2I7WUFDQWhCLE9BQU9pQixTQUFTSztZQUNoQnZCLE1BQU0sQ0FBQyxRQUFRLEdBQUdDO1lBQ2xCLE9BQU9EO1FBQ1g7UUFFQSxPQUFPLElBQUksQ0FBQ2MsUUFBUSxDQUFDQyxTQUFTQztJQUNsQztBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdW5pY29ybi1jbGFzc2VzLy4vbm9kZV9tb2R1bGVzL3Byb3RvYnVmanMvc3JjL3dyYXBwZXJzLmpzPzNlZjUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogV3JhcHBlcnMgZm9yIGNvbW1vbiB0eXBlcy5cbiAqIEB0eXBlIHtPYmplY3QuPHN0cmluZyxJV3JhcHBlcj59XG4gKiBAY29uc3RcbiAqL1xudmFyIHdyYXBwZXJzID0gZXhwb3J0cztcblxudmFyIE1lc3NhZ2UgPSByZXF1aXJlKFwiLi9tZXNzYWdlXCIpO1xuXG4vKipcbiAqIEZyb20gb2JqZWN0IGNvbnZlcnRlciBwYXJ0IG9mIGFuIHtAbGluayBJV3JhcHBlcn0uXG4gKiBAdHlwZWRlZiBXcmFwcGVyRnJvbU9iamVjdENvbnZlcnRlclxuICogQHR5cGUge2Z1bmN0aW9ufVxuICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywqPn0gb2JqZWN0IFBsYWluIG9iamVjdFxuICogQHJldHVybnMge01lc3NhZ2U8e30+fSBNZXNzYWdlIGluc3RhbmNlXG4gKiBAdGhpcyBUeXBlXG4gKi9cblxuLyoqXG4gKiBUbyBvYmplY3QgY29udmVydGVyIHBhcnQgb2YgYW4ge0BsaW5rIElXcmFwcGVyfS5cbiAqIEB0eXBlZGVmIFdyYXBwZXJUb09iamVjdENvbnZlcnRlclxuICogQHR5cGUge2Z1bmN0aW9ufVxuICogQHBhcmFtIHtNZXNzYWdlPHt9Pn0gbWVzc2FnZSBNZXNzYWdlIGluc3RhbmNlXG4gKiBAcGFyYW0ge0lDb252ZXJzaW9uT3B0aW9uc30gW29wdGlvbnNdIENvbnZlcnNpb24gb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdC48c3RyaW5nLCo+fSBQbGFpbiBvYmplY3RcbiAqIEB0aGlzIFR5cGVcbiAqL1xuXG4vKipcbiAqIENvbW1vbiB0eXBlIHdyYXBwZXIgcGFydCBvZiB7QGxpbmsgd3JhcHBlcnN9LlxuICogQGludGVyZmFjZSBJV3JhcHBlclxuICogQHByb3BlcnR5IHtXcmFwcGVyRnJvbU9iamVjdENvbnZlcnRlcn0gW2Zyb21PYmplY3RdIEZyb20gb2JqZWN0IGNvbnZlcnRlclxuICogQHByb3BlcnR5IHtXcmFwcGVyVG9PYmplY3RDb252ZXJ0ZXJ9IFt0b09iamVjdF0gVG8gb2JqZWN0IGNvbnZlcnRlclxuICovXG5cbi8vIEN1c3RvbSB3cmFwcGVyIGZvciBBbnlcbndyYXBwZXJzW1wiLmdvb2dsZS5wcm90b2J1Zi5BbnlcIl0gPSB7XG5cbiAgICBmcm9tT2JqZWN0OiBmdW5jdGlvbihvYmplY3QpIHtcblxuICAgICAgICAvLyB1bndyYXAgdmFsdWUgdHlwZSBpZiBtYXBwZWRcbiAgICAgICAgaWYgKG9iamVjdCAmJiBvYmplY3RbXCJAdHlwZVwiXSkge1xuICAgICAgICAgICAgIC8vIE9ubHkgdXNlIGZ1bGx5IHF1YWxpZmllZCB0eXBlIG5hbWUgYWZ0ZXIgdGhlIGxhc3QgJy8nXG4gICAgICAgICAgICB2YXIgbmFtZSA9IG9iamVjdFtcIkB0eXBlXCJdLnN1YnN0cmluZyhvYmplY3RbXCJAdHlwZVwiXS5sYXN0SW5kZXhPZihcIi9cIikgKyAxKTtcbiAgICAgICAgICAgIHZhciB0eXBlID0gdGhpcy5sb29rdXAobmFtZSk7XG4gICAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgICAgICAgICAgaWYgKHR5cGUpIHtcbiAgICAgICAgICAgICAgICAvLyB0eXBlX3VybCBkb2VzIG5vdCBhY2NlcHQgbGVhZGluZyBcIi5cIlxuICAgICAgICAgICAgICAgIHZhciB0eXBlX3VybCA9IG9iamVjdFtcIkB0eXBlXCJdLmNoYXJBdCgwKSA9PT0gXCIuXCIgP1xuICAgICAgICAgICAgICAgICAgICBvYmplY3RbXCJAdHlwZVwiXS5zbGljZSgxKSA6IG9iamVjdFtcIkB0eXBlXCJdO1xuICAgICAgICAgICAgICAgIC8vIHR5cGVfdXJsIHByZWZpeCBpcyBvcHRpb25hbCwgYnV0IHBhdGggc2VwZXJhdG9yIGlzIHJlcXVpcmVkXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVfdXJsLmluZGV4T2YoXCIvXCIpID09PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICB0eXBlX3VybCA9IFwiL1wiICsgdHlwZV91cmw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZSh7XG4gICAgICAgICAgICAgICAgICAgIHR5cGVfdXJsOiB0eXBlX3VybCxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHR5cGUuZW5jb2RlKHR5cGUuZnJvbU9iamVjdChvYmplY3QpKS5maW5pc2goKVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuZnJvbU9iamVjdChvYmplY3QpO1xuICAgIH0sXG5cbiAgICB0b09iamVjdDogZnVuY3Rpb24obWVzc2FnZSwgb3B0aW9ucykge1xuXG4gICAgICAgIC8vIERlZmF1bHQgcHJlZml4XG4gICAgICAgIHZhciBnb29nbGVBcGkgPSBcInR5cGUuZ29vZ2xlYXBpcy5jb20vXCI7XG4gICAgICAgIHZhciBwcmVmaXggPSBcIlwiO1xuICAgICAgICB2YXIgbmFtZSA9IFwiXCI7XG5cbiAgICAgICAgLy8gZGVjb2RlIHZhbHVlIGlmIHJlcXVlc3RlZCBhbmQgdW5tYXBwZWRcbiAgICAgICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5qc29uICYmIG1lc3NhZ2UudHlwZV91cmwgJiYgbWVzc2FnZS52YWx1ZSkge1xuICAgICAgICAgICAgLy8gT25seSB1c2UgZnVsbHkgcXVhbGlmaWVkIHR5cGUgbmFtZSBhZnRlciB0aGUgbGFzdCAnLydcbiAgICAgICAgICAgIG5hbWUgPSBtZXNzYWdlLnR5cGVfdXJsLnN1YnN0cmluZyhtZXNzYWdlLnR5cGVfdXJsLmxhc3RJbmRleE9mKFwiL1wiKSArIDEpO1xuICAgICAgICAgICAgLy8gU2VwYXJhdGUgdGhlIHByZWZpeCB1c2VkXG4gICAgICAgICAgICBwcmVmaXggPSBtZXNzYWdlLnR5cGVfdXJsLnN1YnN0cmluZygwLCBtZXNzYWdlLnR5cGVfdXJsLmxhc3RJbmRleE9mKFwiL1wiKSArIDEpO1xuICAgICAgICAgICAgdmFyIHR5cGUgPSB0aGlzLmxvb2t1cChuYW1lKTtcbiAgICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgICAgICAgICBpZiAodHlwZSlcbiAgICAgICAgICAgICAgICBtZXNzYWdlID0gdHlwZS5kZWNvZGUobWVzc2FnZS52YWx1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyB3cmFwIHZhbHVlIGlmIHVubWFwcGVkXG4gICAgICAgIGlmICghKG1lc3NhZ2UgaW5zdGFuY2VvZiB0aGlzLmN0b3IpICYmIG1lc3NhZ2UgaW5zdGFuY2VvZiBNZXNzYWdlKSB7XG4gICAgICAgICAgICB2YXIgb2JqZWN0ID0gbWVzc2FnZS4kdHlwZS50b09iamVjdChtZXNzYWdlLCBvcHRpb25zKTtcbiAgICAgICAgICAgIHZhciBtZXNzYWdlTmFtZSA9IG1lc3NhZ2UuJHR5cGUuZnVsbE5hbWVbMF0gPT09IFwiLlwiID9cbiAgICAgICAgICAgICAgICBtZXNzYWdlLiR0eXBlLmZ1bGxOYW1lLnNsaWNlKDEpIDogbWVzc2FnZS4kdHlwZS5mdWxsTmFtZTtcbiAgICAgICAgICAgIC8vIERlZmF1bHQgdG8gdHlwZS5nb29nbGVhcGlzLmNvbSBwcmVmaXggaWYgbm8gcHJlZml4IGlzIHVzZWRcbiAgICAgICAgICAgIGlmIChwcmVmaXggPT09IFwiXCIpIHtcbiAgICAgICAgICAgICAgICBwcmVmaXggPSBnb29nbGVBcGk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBuYW1lID0gcHJlZml4ICsgbWVzc2FnZU5hbWU7XG4gICAgICAgICAgICBvYmplY3RbXCJAdHlwZVwiXSA9IG5hbWU7XG4gICAgICAgICAgICByZXR1cm4gb2JqZWN0O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMudG9PYmplY3QobWVzc2FnZSwgb3B0aW9ucyk7XG4gICAgfVxufTtcbiJdLCJuYW1lcyI6WyJ3cmFwcGVycyIsImV4cG9ydHMiLCJNZXNzYWdlIiwicmVxdWlyZSIsImZyb21PYmplY3QiLCJvYmplY3QiLCJuYW1lIiwic3Vic3RyaW5nIiwibGFzdEluZGV4T2YiLCJ0eXBlIiwibG9va3VwIiwidHlwZV91cmwiLCJjaGFyQXQiLCJzbGljZSIsImluZGV4T2YiLCJjcmVhdGUiLCJ2YWx1ZSIsImVuY29kZSIsImZpbmlzaCIsInRvT2JqZWN0IiwibWVzc2FnZSIsIm9wdGlvbnMiLCJnb29nbGVBcGkiLCJwcmVmaXgiLCJqc29uIiwiZGVjb2RlIiwiY3RvciIsIiR0eXBlIiwibWVzc2FnZU5hbWUiLCJmdWxsTmFtZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protobufjs/src/wrappers.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/protobufjs/src/writer.js":
/*!***********************************************!*\
  !*** ./node_modules/protobufjs/src/writer.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = Writer;\nvar util = __webpack_require__(/*! ./util/minimal */ \"(ssr)/./node_modules/protobufjs/src/util/minimal.js\");\nvar BufferWriter; // cyclic\nvar LongBits = util.LongBits, base64 = util.base64, utf8 = util.utf8;\n/**\n * Constructs a new writer operation instance.\n * @classdesc Scheduled writer operation.\n * @constructor\n * @param {function(*, Uint8Array, number)} fn Function to call\n * @param {number} len Value byte length\n * @param {*} val Value to write\n * @ignore\n */ function Op(fn, len, val) {\n    /**\n     * Function to call.\n     * @type {function(Uint8Array, number, *)}\n     */ this.fn = fn;\n    /**\n     * Value byte length.\n     * @type {number}\n     */ this.len = len;\n    /**\n     * Next operation.\n     * @type {Writer.Op|undefined}\n     */ this.next = undefined;\n    /**\n     * Value to write.\n     * @type {*}\n     */ this.val = val; // type varies\n}\n/* istanbul ignore next */ function noop() {} // eslint-disable-line no-empty-function\n/**\n * Constructs a new writer state instance.\n * @classdesc Copied writer state.\n * @memberof Writer\n * @constructor\n * @param {Writer} writer Writer to copy state from\n * @ignore\n */ function State(writer) {\n    /**\n     * Current head.\n     * @type {Writer.Op}\n     */ this.head = writer.head;\n    /**\n     * Current tail.\n     * @type {Writer.Op}\n     */ this.tail = writer.tail;\n    /**\n     * Current buffer length.\n     * @type {number}\n     */ this.len = writer.len;\n    /**\n     * Next state.\n     * @type {State|null}\n     */ this.next = writer.states;\n}\n/**\n * Constructs a new writer instance.\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n */ function Writer() {\n    /**\n     * Current length.\n     * @type {number}\n     */ this.len = 0;\n    /**\n     * Operations head.\n     * @type {Object}\n     */ this.head = new Op(noop, 0, 0);\n    /**\n     * Operations tail\n     * @type {Object}\n     */ this.tail = this.head;\n    /**\n     * Linked forked states.\n     * @type {Object|null}\n     */ this.states = null;\n// When a value is written, the writer calculates its byte length and puts it into a linked\n// list of operations to perform when finish() is called. This both allows us to allocate\n// buffers of the exact required size and reduces the amount of work we have to do compared\n// to first calculating over objects and then encoding over objects. In our case, the encoding\n// part is just a linked list walk calling operations with already prepared values.\n}\nvar create = function create() {\n    return util.Buffer ? function create_buffer_setup() {\n        return (Writer.create = function create_buffer() {\n            return new BufferWriter();\n        })();\n    } : function create_array() {\n        return new Writer();\n    };\n};\n/**\n * Creates a new writer.\n * @function\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\n */ Writer.create = create();\n/**\n * Allocates a buffer of the specified size.\n * @param {number} size Buffer size\n * @returns {Uint8Array} Buffer\n */ Writer.alloc = function alloc(size) {\n    return new util.Array(size);\n};\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\n/* istanbul ignore else */ if (util.Array !== Array) Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\n/**\n * Pushes a new operation to the queue.\n * @param {function(Uint8Array, number, *)} fn Function to call\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @returns {Writer} `this`\n * @private\n */ Writer.prototype._push = function push(fn, len, val) {\n    this.tail = this.tail.next = new Op(fn, len, val);\n    this.len += len;\n    return this;\n};\nfunction writeByte(val, buf, pos) {\n    buf[pos] = val & 255;\n}\nfunction writeVarint32(val, buf, pos) {\n    while(val > 127){\n        buf[pos++] = val & 127 | 128;\n        val >>>= 7;\n    }\n    buf[pos] = val;\n}\n/**\n * Constructs a new varint writer operation instance.\n * @classdesc Scheduled varint writer operation.\n * @extends Op\n * @constructor\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @ignore\n */ function VarintOp(len, val) {\n    this.len = len;\n    this.next = undefined;\n    this.val = val;\n}\nVarintOp.prototype = Object.create(Op.prototype);\nVarintOp.prototype.fn = writeVarint32;\n/**\n * Writes an unsigned 32 bit value as a varint.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */ Writer.prototype.uint32 = function write_uint32(value) {\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\n    this.len += (this.tail = this.tail.next = new VarintOp((value = value >>> 0) < 128 ? 1 : value < 16384 ? 2 : value < 2097152 ? 3 : value < 268435456 ? 4 : 5, value)).len;\n    return this;\n};\n/**\n * Writes a signed 32 bit value as a varint.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */ Writer.prototype.int32 = function write_int32(value) {\n    return value < 0 ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\n     : this.uint32(value);\n};\n/**\n * Writes a 32 bit value as a varint, zig-zag encoded.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */ Writer.prototype.sint32 = function write_sint32(value) {\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\n};\nfunction writeVarint64(val, buf, pos) {\n    while(val.hi){\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\n        val.hi >>>= 7;\n    }\n    while(val.lo > 127){\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = val.lo >>> 7;\n    }\n    buf[pos++] = val.lo;\n}\n/**\n * Writes an unsigned 64 bit value as a varint.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */ Writer.prototype.uint64 = function write_uint64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeVarint64, bits.length(), bits);\n};\n/**\n * Writes a signed 64 bit value as a varint.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */ Writer.prototype.int64 = Writer.prototype.uint64;\n/**\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */ Writer.prototype.sint64 = function write_sint64(value) {\n    var bits = LongBits.from(value).zzEncode();\n    return this._push(writeVarint64, bits.length(), bits);\n};\n/**\n * Writes a boolish value as a varint.\n * @param {boolean} value Value to write\n * @returns {Writer} `this`\n */ Writer.prototype.bool = function write_bool(value) {\n    return this._push(writeByte, 1, value ? 1 : 0);\n};\nfunction writeFixed32(val, buf, pos) {\n    buf[pos] = val & 255;\n    buf[pos + 1] = val >>> 8 & 255;\n    buf[pos + 2] = val >>> 16 & 255;\n    buf[pos + 3] = val >>> 24;\n}\n/**\n * Writes an unsigned 32 bit value as fixed 32 bits.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */ Writer.prototype.fixed32 = function write_fixed32(value) {\n    return this._push(writeFixed32, 4, value >>> 0);\n};\n/**\n * Writes a signed 32 bit value as fixed 32 bits.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */ Writer.prototype.sfixed32 = Writer.prototype.fixed32;\n/**\n * Writes an unsigned 64 bit value as fixed 64 bits.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */ Writer.prototype.fixed64 = function write_fixed64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\n};\n/**\n * Writes a signed 64 bit value as fixed 64 bits.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */ Writer.prototype.sfixed64 = Writer.prototype.fixed64;\n/**\n * Writes a float (32 bit).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */ Writer.prototype.float = function write_float(value) {\n    return this._push(util.float.writeFloatLE, 4, value);\n};\n/**\n * Writes a double (64 bit float).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */ Writer.prototype.double = function write_double(value) {\n    return this._push(util.float.writeDoubleLE, 8, value);\n};\nvar writeBytes = util.Array.prototype.set ? function writeBytes_set(val, buf, pos) {\n    buf.set(val, pos); // also works for plain array values\n} : function writeBytes_for(val, buf, pos) {\n    for(var i = 0; i < val.length; ++i)buf[pos + i] = val[i];\n};\n/**\n * Writes a sequence of bytes.\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\n * @returns {Writer} `this`\n */ Writer.prototype.bytes = function write_bytes(value) {\n    var len = value.length >>> 0;\n    if (!len) return this._push(writeByte, 1, 0);\n    if (util.isString(value)) {\n        var buf = Writer.alloc(len = base64.length(value));\n        base64.decode(value, buf, 0);\n        value = buf;\n    }\n    return this.uint32(len)._push(writeBytes, len, value);\n};\n/**\n * Writes a string.\n * @param {string} value Value to write\n * @returns {Writer} `this`\n */ Writer.prototype.string = function write_string(value) {\n    var len = utf8.length(value);\n    return len ? this.uint32(len)._push(utf8.write, len, value) : this._push(writeByte, 1, 0);\n};\n/**\n * Forks this writer's state by pushing it to a stack.\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\n * @returns {Writer} `this`\n */ Writer.prototype.fork = function fork() {\n    this.states = new State(this);\n    this.head = this.tail = new Op(noop, 0, 0);\n    this.len = 0;\n    return this;\n};\n/**\n * Resets this instance to the last state.\n * @returns {Writer} `this`\n */ Writer.prototype.reset = function reset() {\n    if (this.states) {\n        this.head = this.states.head;\n        this.tail = this.states.tail;\n        this.len = this.states.len;\n        this.states = this.states.next;\n    } else {\n        this.head = this.tail = new Op(noop, 0, 0);\n        this.len = 0;\n    }\n    return this;\n};\n/**\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\n * @returns {Writer} `this`\n */ Writer.prototype.ldelim = function ldelim() {\n    var head = this.head, tail = this.tail, len = this.len;\n    this.reset().uint32(len);\n    if (len) {\n        this.tail.next = head.next; // skip noop\n        this.tail = tail;\n        this.len += len;\n    }\n    return this;\n};\n/**\n * Finishes the write operation.\n * @returns {Uint8Array} Finished buffer\n */ Writer.prototype.finish = function finish() {\n    var head = this.head.next, buf = this.constructor.alloc(this.len), pos = 0;\n    while(head){\n        head.fn(head.val, buf, pos);\n        pos += head.len;\n        head = head.next;\n    }\n    // this.head = this.tail = null;\n    return buf;\n};\nWriter._configure = function(BufferWriter_) {\n    BufferWriter = BufferWriter_;\n    Writer.create = create();\n    BufferWriter._configure();\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protobufjs/src/writer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/protobufjs/src/writer_buffer.js":
/*!******************************************************!*\
  !*** ./node_modules/protobufjs/src/writer_buffer.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = BufferWriter;\n// extends Writer\nvar Writer = __webpack_require__(/*! ./writer */ \"(ssr)/./node_modules/protobufjs/src/writer.js\");\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\nvar util = __webpack_require__(/*! ./util/minimal */ \"(ssr)/./node_modules/protobufjs/src/util/minimal.js\");\n/**\n * Constructs a new buffer writer instance.\n * @classdesc Wire format writer using node buffers.\n * @extends Writer\n * @constructor\n */ function BufferWriter() {\n    Writer.call(this);\n}\nBufferWriter._configure = function() {\n    /**\n     * Allocates a buffer of the specified size.\n     * @function\n     * @param {number} size Buffer size\n     * @returns {Buffer} Buffer\n     */ BufferWriter.alloc = util._Buffer_allocUnsafe;\n    BufferWriter.writeBytesBuffer = util.Buffer && util.Buffer.prototype instanceof Uint8Array && util.Buffer.prototype.set.name === \"set\" ? function writeBytesBuffer_set(val, buf, pos) {\n        buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\n    // also works for plain array values\n    } : function writeBytesBuffer_copy(val, buf, pos) {\n        if (val.copy) val.copy(buf, pos, 0, val.length);\n        else for(var i = 0; i < val.length;)buf[pos++] = val[i++];\n    };\n};\n/**\n * @override\n */ BufferWriter.prototype.bytes = function write_bytes_buffer(value) {\n    if (util.isString(value)) value = util._Buffer_from(value, \"base64\");\n    var len = value.length >>> 0;\n    this.uint32(len);\n    if (len) this._push(BufferWriter.writeBytesBuffer, len, value);\n    return this;\n};\nfunction writeStringBuffer(val, buf, pos) {\n    if (val.length < 40) util.utf8.write(val, buf, pos);\n    else if (buf.utf8Write) buf.utf8Write(val, pos);\n    else buf.write(val, pos);\n}\n/**\n * @override\n */ BufferWriter.prototype.string = function write_string_buffer(value) {\n    var len = util.Buffer.byteLength(value);\n    this.uint32(len);\n    if (len) this._push(writeStringBuffer, len, value);\n    return this;\n};\n/**\n * Finishes the write operation.\n * @name BufferWriter#finish\n * @function\n * @returns {Buffer} Finished buffer\n */ BufferWriter._configure();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcHJvdG9idWZqcy9zcmMvd3JpdGVyX2J1ZmZlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSxPQUFPQyxPQUFPLEdBQUdDO0FBRWpCLGlCQUFpQjtBQUNqQixJQUFJQyxTQUFTQyxtQkFBT0EsQ0FBQywrREFBVTtBQUM5QkYsQ0FBQUEsYUFBYUcsU0FBUyxHQUFHQyxPQUFPQyxNQUFNLENBQUNKLE9BQU9FLFNBQVMsR0FBR0csV0FBVyxHQUFHTjtBQUV6RSxJQUFJTyxPQUFPTCxtQkFBT0EsQ0FBQywyRUFBZ0I7QUFFbkM7Ozs7O0NBS0MsR0FDRCxTQUFTRjtJQUNMQyxPQUFPTyxJQUFJLENBQUMsSUFBSTtBQUNwQjtBQUVBUixhQUFhUyxVQUFVLEdBQUc7SUFDdEI7Ozs7O0tBS0MsR0FDRFQsYUFBYVUsS0FBSyxHQUFHSCxLQUFLSSxtQkFBbUI7SUFFN0NYLGFBQWFZLGdCQUFnQixHQUFHTCxLQUFLTSxNQUFNLElBQUlOLEtBQUtNLE1BQU0sQ0FBQ1YsU0FBUyxZQUFZVyxjQUFjUCxLQUFLTSxNQUFNLENBQUNWLFNBQVMsQ0FBQ1ksR0FBRyxDQUFDQyxJQUFJLEtBQUssUUFDM0gsU0FBU0MscUJBQXFCQyxHQUFHLEVBQUVDLEdBQUcsRUFBRUMsR0FBRztRQUMzQ0QsSUFBSUosR0FBRyxDQUFDRyxLQUFLRSxNQUFNLHNHQUFzRztJQUN6SCxvQ0FBb0M7SUFDdEMsSUFFRSxTQUFTQyxzQkFBc0JILEdBQUcsRUFBRUMsR0FBRyxFQUFFQyxHQUFHO1FBQzVDLElBQUlGLElBQUlJLElBQUksRUFDVkosSUFBSUksSUFBSSxDQUFDSCxLQUFLQyxLQUFLLEdBQUdGLElBQUlLLE1BQU07YUFDN0IsSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUlOLElBQUlLLE1BQU0sRUFDakNKLEdBQUcsQ0FBQ0MsTUFBTSxHQUFHRixHQUFHLENBQUNNLElBQUk7SUFDekI7QUFDUjtBQUdBOztDQUVDLEdBQ0R4QixhQUFhRyxTQUFTLENBQUNzQixLQUFLLEdBQUcsU0FBU0MsbUJBQW1CQyxLQUFLO0lBQzVELElBQUlwQixLQUFLcUIsUUFBUSxDQUFDRCxRQUNkQSxRQUFRcEIsS0FBS3NCLFlBQVksQ0FBQ0YsT0FBTztJQUNyQyxJQUFJRyxNQUFNSCxNQUFNSixNQUFNLEtBQUs7SUFDM0IsSUFBSSxDQUFDUSxNQUFNLENBQUNEO0lBQ1osSUFBSUEsS0FDQSxJQUFJLENBQUNFLEtBQUssQ0FBQ2hDLGFBQWFZLGdCQUFnQixFQUFFa0IsS0FBS0g7SUFDbkQsT0FBTyxJQUFJO0FBQ2Y7QUFFQSxTQUFTTSxrQkFBa0JmLEdBQUcsRUFBRUMsR0FBRyxFQUFFQyxHQUFHO0lBQ3BDLElBQUlGLElBQUlLLE1BQU0sR0FBRyxJQUNiaEIsS0FBSzJCLElBQUksQ0FBQ0MsS0FBSyxDQUFDakIsS0FBS0MsS0FBS0M7U0FDekIsSUFBSUQsSUFBSWlCLFNBQVMsRUFDbEJqQixJQUFJaUIsU0FBUyxDQUFDbEIsS0FBS0U7U0FFbkJELElBQUlnQixLQUFLLENBQUNqQixLQUFLRTtBQUN2QjtBQUVBOztDQUVDLEdBQ0RwQixhQUFhRyxTQUFTLENBQUNrQyxNQUFNLEdBQUcsU0FBU0Msb0JBQW9CWCxLQUFLO0lBQzlELElBQUlHLE1BQU12QixLQUFLTSxNQUFNLENBQUMwQixVQUFVLENBQUNaO0lBQ2pDLElBQUksQ0FBQ0ksTUFBTSxDQUFDRDtJQUNaLElBQUlBLEtBQ0EsSUFBSSxDQUFDRSxLQUFLLENBQUNDLG1CQUFtQkgsS0FBS0g7SUFDdkMsT0FBTyxJQUFJO0FBQ2Y7QUFHQTs7Ozs7Q0FLQyxHQUVEM0IsYUFBYVMsVUFBVSIsInNvdXJjZXMiOlsid2VicGFjazovL3VuaWNvcm4tY2xhc3Nlcy8uL25vZGVfbW9kdWxlcy9wcm90b2J1ZmpzL3NyYy93cml0ZXJfYnVmZmVyLmpzPzIwZDYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5tb2R1bGUuZXhwb3J0cyA9IEJ1ZmZlcldyaXRlcjtcblxuLy8gZXh0ZW5kcyBXcml0ZXJcbnZhciBXcml0ZXIgPSByZXF1aXJlKFwiLi93cml0ZXJcIik7XG4oQnVmZmVyV3JpdGVyLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoV3JpdGVyLnByb3RvdHlwZSkpLmNvbnN0cnVjdG9yID0gQnVmZmVyV3JpdGVyO1xuXG52YXIgdXRpbCA9IHJlcXVpcmUoXCIuL3V0aWwvbWluaW1hbFwiKTtcblxuLyoqXG4gKiBDb25zdHJ1Y3RzIGEgbmV3IGJ1ZmZlciB3cml0ZXIgaW5zdGFuY2UuXG4gKiBAY2xhc3NkZXNjIFdpcmUgZm9ybWF0IHdyaXRlciB1c2luZyBub2RlIGJ1ZmZlcnMuXG4gKiBAZXh0ZW5kcyBXcml0ZXJcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBCdWZmZXJXcml0ZXIoKSB7XG4gICAgV3JpdGVyLmNhbGwodGhpcyk7XG59XG5cbkJ1ZmZlcldyaXRlci5fY29uZmlndXJlID0gZnVuY3Rpb24gKCkge1xuICAgIC8qKlxuICAgICAqIEFsbG9jYXRlcyBhIGJ1ZmZlciBvZiB0aGUgc3BlY2lmaWVkIHNpemUuXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHNpemUgQnVmZmVyIHNpemVcbiAgICAgKiBAcmV0dXJucyB7QnVmZmVyfSBCdWZmZXJcbiAgICAgKi9cbiAgICBCdWZmZXJXcml0ZXIuYWxsb2MgPSB1dGlsLl9CdWZmZXJfYWxsb2NVbnNhZmU7XG5cbiAgICBCdWZmZXJXcml0ZXIud3JpdGVCeXRlc0J1ZmZlciA9IHV0aWwuQnVmZmVyICYmIHV0aWwuQnVmZmVyLnByb3RvdHlwZSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkgJiYgdXRpbC5CdWZmZXIucHJvdG90eXBlLnNldC5uYW1lID09PSBcInNldFwiXG4gICAgICAgID8gZnVuY3Rpb24gd3JpdGVCeXRlc0J1ZmZlcl9zZXQodmFsLCBidWYsIHBvcykge1xuICAgICAgICAgIGJ1Zi5zZXQodmFsLCBwb3MpOyAvLyBmYXN0ZXIgdGhhbiBjb3B5IChyZXF1aXJlcyBub2RlID49IDQgd2hlcmUgQnVmZmVycyBleHRlbmQgVWludDhBcnJheSBhbmQgc2V0IGlzIHByb3Blcmx5IGluaGVyaXRlZClcbiAgICAgICAgICAvLyBhbHNvIHdvcmtzIGZvciBwbGFpbiBhcnJheSB2YWx1ZXNcbiAgICAgICAgfVxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICA6IGZ1bmN0aW9uIHdyaXRlQnl0ZXNCdWZmZXJfY29weSh2YWwsIGJ1ZiwgcG9zKSB7XG4gICAgICAgICAgaWYgKHZhbC5jb3B5KSAvLyBCdWZmZXIgdmFsdWVzXG4gICAgICAgICAgICB2YWwuY29weShidWYsIHBvcywgMCwgdmFsLmxlbmd0aCk7XG4gICAgICAgICAgZWxzZSBmb3IgKHZhciBpID0gMDsgaSA8IHZhbC5sZW5ndGg7KSAvLyBwbGFpbiBhcnJheSB2YWx1ZXNcbiAgICAgICAgICAgIGJ1Zltwb3MrK10gPSB2YWxbaSsrXTtcbiAgICAgICAgfTtcbn07XG5cblxuLyoqXG4gKiBAb3ZlcnJpZGVcbiAqL1xuQnVmZmVyV3JpdGVyLnByb3RvdHlwZS5ieXRlcyA9IGZ1bmN0aW9uIHdyaXRlX2J5dGVzX2J1ZmZlcih2YWx1ZSkge1xuICAgIGlmICh1dGlsLmlzU3RyaW5nKHZhbHVlKSlcbiAgICAgICAgdmFsdWUgPSB1dGlsLl9CdWZmZXJfZnJvbSh2YWx1ZSwgXCJiYXNlNjRcIik7XG4gICAgdmFyIGxlbiA9IHZhbHVlLmxlbmd0aCA+Pj4gMDtcbiAgICB0aGlzLnVpbnQzMihsZW4pO1xuICAgIGlmIChsZW4pXG4gICAgICAgIHRoaXMuX3B1c2goQnVmZmVyV3JpdGVyLndyaXRlQnl0ZXNCdWZmZXIsIGxlbiwgdmFsdWUpO1xuICAgIHJldHVybiB0aGlzO1xufTtcblxuZnVuY3Rpb24gd3JpdGVTdHJpbmdCdWZmZXIodmFsLCBidWYsIHBvcykge1xuICAgIGlmICh2YWwubGVuZ3RoIDwgNDApIC8vIHBsYWluIGpzIGlzIGZhc3RlciBmb3Igc2hvcnQgc3RyaW5ncyAocHJvYmFibHkgZHVlIHRvIHJlZHVuZGFudCBhc3NlcnRpb25zKVxuICAgICAgICB1dGlsLnV0Zjgud3JpdGUodmFsLCBidWYsIHBvcyk7XG4gICAgZWxzZSBpZiAoYnVmLnV0ZjhXcml0ZSlcbiAgICAgICAgYnVmLnV0ZjhXcml0ZSh2YWwsIHBvcyk7XG4gICAgZWxzZVxuICAgICAgICBidWYud3JpdGUodmFsLCBwb3MpO1xufVxuXG4vKipcbiAqIEBvdmVycmlkZVxuICovXG5CdWZmZXJXcml0ZXIucHJvdG90eXBlLnN0cmluZyA9IGZ1bmN0aW9uIHdyaXRlX3N0cmluZ19idWZmZXIodmFsdWUpIHtcbiAgICB2YXIgbGVuID0gdXRpbC5CdWZmZXIuYnl0ZUxlbmd0aCh2YWx1ZSk7XG4gICAgdGhpcy51aW50MzIobGVuKTtcbiAgICBpZiAobGVuKVxuICAgICAgICB0aGlzLl9wdXNoKHdyaXRlU3RyaW5nQnVmZmVyLCBsZW4sIHZhbHVlKTtcbiAgICByZXR1cm4gdGhpcztcbn07XG5cblxuLyoqXG4gKiBGaW5pc2hlcyB0aGUgd3JpdGUgb3BlcmF0aW9uLlxuICogQG5hbWUgQnVmZmVyV3JpdGVyI2ZpbmlzaFxuICogQGZ1bmN0aW9uXG4gKiBAcmV0dXJucyB7QnVmZmVyfSBGaW5pc2hlZCBidWZmZXJcbiAqL1xuXG5CdWZmZXJXcml0ZXIuX2NvbmZpZ3VyZSgpO1xuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJCdWZmZXJXcml0ZXIiLCJXcml0ZXIiLCJyZXF1aXJlIiwicHJvdG90eXBlIiwiT2JqZWN0IiwiY3JlYXRlIiwiY29uc3RydWN0b3IiLCJ1dGlsIiwiY2FsbCIsIl9jb25maWd1cmUiLCJhbGxvYyIsIl9CdWZmZXJfYWxsb2NVbnNhZmUiLCJ3cml0ZUJ5dGVzQnVmZmVyIiwiQnVmZmVyIiwiVWludDhBcnJheSIsInNldCIsIm5hbWUiLCJ3cml0ZUJ5dGVzQnVmZmVyX3NldCIsInZhbCIsImJ1ZiIsInBvcyIsIndyaXRlQnl0ZXNCdWZmZXJfY29weSIsImNvcHkiLCJsZW5ndGgiLCJpIiwiYnl0ZXMiLCJ3cml0ZV9ieXRlc19idWZmZXIiLCJ2YWx1ZSIsImlzU3RyaW5nIiwiX0J1ZmZlcl9mcm9tIiwibGVuIiwidWludDMyIiwiX3B1c2giLCJ3cml0ZVN0cmluZ0J1ZmZlciIsInV0ZjgiLCJ3cml0ZSIsInV0ZjhXcml0ZSIsInN0cmluZyIsIndyaXRlX3N0cmluZ19idWZmZXIiLCJieXRlTGVuZ3RoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protobufjs/src/writer_buffer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/protobufjs/google/protobuf/api.json":
/*!**********************************************************!*\
  !*** ./node_modules/protobufjs/google/protobuf/api.json ***!
  \**********************************************************/
/***/ ((module) => {

module.exports = JSON.parse('{"nested":{"google":{"nested":{"protobuf":{"nested":{"Api":{"fields":{"name":{"type":"string","id":1},"methods":{"rule":"repeated","type":"Method","id":2},"options":{"rule":"repeated","type":"Option","id":3},"version":{"type":"string","id":4},"sourceContext":{"type":"SourceContext","id":5},"mixins":{"rule":"repeated","type":"Mixin","id":6},"syntax":{"type":"Syntax","id":7}}},"Method":{"fields":{"name":{"type":"string","id":1},"requestTypeUrl":{"type":"string","id":2},"requestStreaming":{"type":"bool","id":3},"responseTypeUrl":{"type":"string","id":4},"responseStreaming":{"type":"bool","id":5},"options":{"rule":"repeated","type":"Option","id":6},"syntax":{"type":"Syntax","id":7}}},"Mixin":{"fields":{"name":{"type":"string","id":1},"root":{"type":"string","id":2}}},"SourceContext":{"fields":{"fileName":{"type":"string","id":1}}},"Option":{"fields":{"name":{"type":"string","id":1},"value":{"type":"Any","id":2}}},"Syntax":{"values":{"SYNTAX_PROTO2":0,"SYNTAX_PROTO3":1}}}}}}}}');

/***/ }),

/***/ "(ssr)/./node_modules/protobufjs/google/protobuf/descriptor.json":
/*!*****************************************************************!*\
  !*** ./node_modules/protobufjs/google/protobuf/descriptor.json ***!
  \*****************************************************************/
/***/ ((module) => {

module.exports = JSON.parse('{"nested":{"google":{"nested":{"protobuf":{"options":{"go_package":"google.golang.org/protobuf/types/descriptorpb","java_package":"com.google.protobuf","java_outer_classname":"DescriptorProtos","csharp_namespace":"Google.Protobuf.Reflection","objc_class_prefix":"GPB","cc_enable_arenas":true,"optimize_for":"SPEED"},"nested":{"FileDescriptorSet":{"edition":"proto2","fields":{"file":{"rule":"repeated","type":"FileDescriptorProto","id":1}},"extensions":[[536000000,536000000]]},"Edition":{"edition":"proto2","values":{"EDITION_UNKNOWN":0,"EDITION_LEGACY":900,"EDITION_PROTO2":998,"EDITION_PROTO3":999,"EDITION_2023":1000,"EDITION_2024":1001,"EDITION_1_TEST_ONLY":1,"EDITION_2_TEST_ONLY":2,"EDITION_99997_TEST_ONLY":99997,"EDITION_99998_TEST_ONLY":99998,"EDITION_99999_TEST_ONLY":99999,"EDITION_MAX":2147483647}},"FileDescriptorProto":{"edition":"proto2","fields":{"name":{"type":"string","id":1},"package":{"type":"string","id":2},"dependency":{"rule":"repeated","type":"string","id":3},"publicDependency":{"rule":"repeated","type":"int32","id":10},"weakDependency":{"rule":"repeated","type":"int32","id":11},"optionDependency":{"rule":"repeated","type":"string","id":15},"messageType":{"rule":"repeated","type":"DescriptorProto","id":4},"enumType":{"rule":"repeated","type":"EnumDescriptorProto","id":5},"service":{"rule":"repeated","type":"ServiceDescriptorProto","id":6},"extension":{"rule":"repeated","type":"FieldDescriptorProto","id":7},"options":{"type":"FileOptions","id":8},"sourceCodeInfo":{"type":"SourceCodeInfo","id":9},"syntax":{"type":"string","id":12},"edition":{"type":"Edition","id":14}}},"DescriptorProto":{"edition":"proto2","fields":{"name":{"type":"string","id":1},"field":{"rule":"repeated","type":"FieldDescriptorProto","id":2},"extension":{"rule":"repeated","type":"FieldDescriptorProto","id":6},"nestedType":{"rule":"repeated","type":"DescriptorProto","id":3},"enumType":{"rule":"repeated","type":"EnumDescriptorProto","id":4},"extensionRange":{"rule":"repeated","type":"ExtensionRange","id":5},"oneofDecl":{"rule":"repeated","type":"OneofDescriptorProto","id":8},"options":{"type":"MessageOptions","id":7},"reservedRange":{"rule":"repeated","type":"ReservedRange","id":9},"reservedName":{"rule":"repeated","type":"string","id":10},"visibility":{"type":"SymbolVisibility","id":11}},"nested":{"ExtensionRange":{"fields":{"start":{"type":"int32","id":1},"end":{"type":"int32","id":2},"options":{"type":"ExtensionRangeOptions","id":3}}},"ReservedRange":{"fields":{"start":{"type":"int32","id":1},"end":{"type":"int32","id":2}}}}},"ExtensionRangeOptions":{"edition":"proto2","fields":{"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999},"declaration":{"rule":"repeated","type":"Declaration","id":2,"options":{"retention":"RETENTION_SOURCE"}},"features":{"type":"FeatureSet","id":50},"verification":{"type":"VerificationState","id":3,"options":{"default":"UNVERIFIED","retention":"RETENTION_SOURCE"}}},"extensions":[[1000,536870911]],"nested":{"Declaration":{"fields":{"number":{"type":"int32","id":1},"fullName":{"type":"string","id":2},"type":{"type":"string","id":3},"reserved":{"type":"bool","id":5},"repeated":{"type":"bool","id":6}},"reserved":[[4,4]]},"VerificationState":{"values":{"DECLARATION":0,"UNVERIFIED":1}}}},"FieldDescriptorProto":{"edition":"proto2","fields":{"name":{"type":"string","id":1},"number":{"type":"int32","id":3},"label":{"type":"Label","id":4},"type":{"type":"Type","id":5},"typeName":{"type":"string","id":6},"extendee":{"type":"string","id":2},"defaultValue":{"type":"string","id":7},"oneofIndex":{"type":"int32","id":9},"jsonName":{"type":"string","id":10},"options":{"type":"FieldOptions","id":8},"proto3Optional":{"type":"bool","id":17}},"nested":{"Type":{"values":{"TYPE_DOUBLE":1,"TYPE_FLOAT":2,"TYPE_INT64":3,"TYPE_UINT64":4,"TYPE_INT32":5,"TYPE_FIXED64":6,"TYPE_FIXED32":7,"TYPE_BOOL":8,"TYPE_STRING":9,"TYPE_GROUP":10,"TYPE_MESSAGE":11,"TYPE_BYTES":12,"TYPE_UINT32":13,"TYPE_ENUM":14,"TYPE_SFIXED32":15,"TYPE_SFIXED64":16,"TYPE_SINT32":17,"TYPE_SINT64":18}},"Label":{"values":{"LABEL_OPTIONAL":1,"LABEL_REPEATED":3,"LABEL_REQUIRED":2}}}},"OneofDescriptorProto":{"edition":"proto2","fields":{"name":{"type":"string","id":1},"options":{"type":"OneofOptions","id":2}}},"EnumDescriptorProto":{"edition":"proto2","fields":{"name":{"type":"string","id":1},"value":{"rule":"repeated","type":"EnumValueDescriptorProto","id":2},"options":{"type":"EnumOptions","id":3},"reservedRange":{"rule":"repeated","type":"EnumReservedRange","id":4},"reservedName":{"rule":"repeated","type":"string","id":5},"visibility":{"type":"SymbolVisibility","id":6}},"nested":{"EnumReservedRange":{"fields":{"start":{"type":"int32","id":1},"end":{"type":"int32","id":2}}}}},"EnumValueDescriptorProto":{"edition":"proto2","fields":{"name":{"type":"string","id":1},"number":{"type":"int32","id":2},"options":{"type":"EnumValueOptions","id":3}}},"ServiceDescriptorProto":{"edition":"proto2","fields":{"name":{"type":"string","id":1},"method":{"rule":"repeated","type":"MethodDescriptorProto","id":2},"options":{"type":"ServiceOptions","id":3}}},"MethodDescriptorProto":{"edition":"proto2","fields":{"name":{"type":"string","id":1},"inputType":{"type":"string","id":2},"outputType":{"type":"string","id":3},"options":{"type":"MethodOptions","id":4},"clientStreaming":{"type":"bool","id":5},"serverStreaming":{"type":"bool","id":6}}},"FileOptions":{"edition":"proto2","fields":{"javaPackage":{"type":"string","id":1},"javaOuterClassname":{"type":"string","id":8},"javaMultipleFiles":{"type":"bool","id":10},"javaGenerateEqualsAndHash":{"type":"bool","id":20,"options":{"deprecated":true}},"javaStringCheckUtf8":{"type":"bool","id":27},"optimizeFor":{"type":"OptimizeMode","id":9,"options":{"default":"SPEED"}},"goPackage":{"type":"string","id":11},"ccGenericServices":{"type":"bool","id":16},"javaGenericServices":{"type":"bool","id":17},"pyGenericServices":{"type":"bool","id":18},"deprecated":{"type":"bool","id":23},"ccEnableArenas":{"type":"bool","id":31,"options":{"default":true}},"objcClassPrefix":{"type":"string","id":36},"csharpNamespace":{"type":"string","id":37},"swiftPrefix":{"type":"string","id":39},"phpClassPrefix":{"type":"string","id":40},"phpNamespace":{"type":"string","id":41},"phpMetadataNamespace":{"type":"string","id":44},"rubyPackage":{"type":"string","id":45},"features":{"type":"FeatureSet","id":50},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]],"reserved":[[42,42],"php_generic_services",[38,38]],"nested":{"OptimizeMode":{"values":{"SPEED":1,"CODE_SIZE":2,"LITE_RUNTIME":3}}}},"MessageOptions":{"edition":"proto2","fields":{"messageSetWireFormat":{"type":"bool","id":1},"noStandardDescriptorAccessor":{"type":"bool","id":2},"deprecated":{"type":"bool","id":3},"mapEntry":{"type":"bool","id":7},"deprecatedLegacyJsonFieldConflicts":{"type":"bool","id":11,"options":{"deprecated":true}},"features":{"type":"FeatureSet","id":12},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]],"reserved":[[4,4],[5,5],[6,6],[8,8],[9,9]]},"FieldOptions":{"edition":"proto2","fields":{"ctype":{"type":"CType","id":1,"options":{"default":"STRING"}},"packed":{"type":"bool","id":2},"jstype":{"type":"JSType","id":6,"options":{"default":"JS_NORMAL"}},"lazy":{"type":"bool","id":5},"unverifiedLazy":{"type":"bool","id":15},"deprecated":{"type":"bool","id":3},"weak":{"type":"bool","id":10,"options":{"deprecated":true}},"debugRedact":{"type":"bool","id":16},"retention":{"type":"OptionRetention","id":17},"targets":{"rule":"repeated","type":"OptionTargetType","id":19},"editionDefaults":{"rule":"repeated","type":"EditionDefault","id":20},"features":{"type":"FeatureSet","id":21},"featureSupport":{"type":"FeatureSupport","id":22},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]],"reserved":[[4,4],[18,18]],"nested":{"CType":{"values":{"STRING":0,"CORD":1,"STRING_PIECE":2}},"JSType":{"values":{"JS_NORMAL":0,"JS_STRING":1,"JS_NUMBER":2}},"OptionRetention":{"values":{"RETENTION_UNKNOWN":0,"RETENTION_RUNTIME":1,"RETENTION_SOURCE":2}},"OptionTargetType":{"values":{"TARGET_TYPE_UNKNOWN":0,"TARGET_TYPE_FILE":1,"TARGET_TYPE_EXTENSION_RANGE":2,"TARGET_TYPE_MESSAGE":3,"TARGET_TYPE_FIELD":4,"TARGET_TYPE_ONEOF":5,"TARGET_TYPE_ENUM":6,"TARGET_TYPE_ENUM_ENTRY":7,"TARGET_TYPE_SERVICE":8,"TARGET_TYPE_METHOD":9}},"EditionDefault":{"fields":{"edition":{"type":"Edition","id":3},"value":{"type":"string","id":2}}},"FeatureSupport":{"fields":{"editionIntroduced":{"type":"Edition","id":1},"editionDeprecated":{"type":"Edition","id":2},"deprecationWarning":{"type":"string","id":3},"editionRemoved":{"type":"Edition","id":4}}}}},"OneofOptions":{"edition":"proto2","fields":{"features":{"type":"FeatureSet","id":1},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]]},"EnumOptions":{"edition":"proto2","fields":{"allowAlias":{"type":"bool","id":2},"deprecated":{"type":"bool","id":3},"deprecatedLegacyJsonFieldConflicts":{"type":"bool","id":6,"options":{"deprecated":true}},"features":{"type":"FeatureSet","id":7},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]],"reserved":[[5,5]]},"EnumValueOptions":{"edition":"proto2","fields":{"deprecated":{"type":"bool","id":1},"features":{"type":"FeatureSet","id":2},"debugRedact":{"type":"bool","id":3},"featureSupport":{"type":"FieldOptions.FeatureSupport","id":4},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]]},"ServiceOptions":{"edition":"proto2","fields":{"features":{"type":"FeatureSet","id":34},"deprecated":{"type":"bool","id":33},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]]},"MethodOptions":{"edition":"proto2","fields":{"deprecated":{"type":"bool","id":33},"idempotencyLevel":{"type":"IdempotencyLevel","id":34,"options":{"default":"IDEMPOTENCY_UNKNOWN"}},"features":{"type":"FeatureSet","id":35},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]],"nested":{"IdempotencyLevel":{"values":{"IDEMPOTENCY_UNKNOWN":0,"NO_SIDE_EFFECTS":1,"IDEMPOTENT":2}}}},"UninterpretedOption":{"edition":"proto2","fields":{"name":{"rule":"repeated","type":"NamePart","id":2},"identifierValue":{"type":"string","id":3},"positiveIntValue":{"type":"uint64","id":4},"negativeIntValue":{"type":"int64","id":5},"doubleValue":{"type":"double","id":6},"stringValue":{"type":"bytes","id":7},"aggregateValue":{"type":"string","id":8}},"nested":{"NamePart":{"fields":{"namePart":{"rule":"required","type":"string","id":1},"isExtension":{"rule":"required","type":"bool","id":2}}}}},"FeatureSet":{"edition":"proto2","fields":{"fieldPresence":{"type":"FieldPresence","id":1,"options":{"retention":"RETENTION_RUNTIME","targets":"TARGET_TYPE_FILE","feature_support.edition_introduced":"EDITION_2023","edition_defaults.edition":"EDITION_2023","edition_defaults.value":"EXPLICIT"}},"enumType":{"type":"EnumType","id":2,"options":{"retention":"RETENTION_RUNTIME","targets":"TARGET_TYPE_FILE","feature_support.edition_introduced":"EDITION_2023","edition_defaults.edition":"EDITION_PROTO3","edition_defaults.value":"OPEN"}},"repeatedFieldEncoding":{"type":"RepeatedFieldEncoding","id":3,"options":{"retention":"RETENTION_RUNTIME","targets":"TARGET_TYPE_FILE","feature_support.edition_introduced":"EDITION_2023","edition_defaults.edition":"EDITION_PROTO3","edition_defaults.value":"PACKED"}},"utf8Validation":{"type":"Utf8Validation","id":4,"options":{"retention":"RETENTION_RUNTIME","targets":"TARGET_TYPE_FILE","feature_support.edition_introduced":"EDITION_2023","edition_defaults.edition":"EDITION_PROTO3","edition_defaults.value":"VERIFY"}},"messageEncoding":{"type":"MessageEncoding","id":5,"options":{"retention":"RETENTION_RUNTIME","targets":"TARGET_TYPE_FILE","feature_support.edition_introduced":"EDITION_2023","edition_defaults.edition":"EDITION_LEGACY","edition_defaults.value":"LENGTH_PREFIXED"}},"jsonFormat":{"type":"JsonFormat","id":6,"options":{"retention":"RETENTION_RUNTIME","targets":"TARGET_TYPE_FILE","feature_support.edition_introduced":"EDITION_2023","edition_defaults.edition":"EDITION_PROTO3","edition_defaults.value":"ALLOW"}},"enforceNamingStyle":{"type":"EnforceNamingStyle","id":7,"options":{"retention":"RETENTION_SOURCE","targets":"TARGET_TYPE_METHOD","feature_support.edition_introduced":"EDITION_2024","edition_defaults.edition":"EDITION_2024","edition_defaults.value":"STYLE2024"}},"defaultSymbolVisibility":{"type":"VisibilityFeature.DefaultSymbolVisibility","id":8,"options":{"retention":"RETENTION_SOURCE","targets":"TARGET_TYPE_FILE","feature_support.edition_introduced":"EDITION_2024","edition_defaults.edition":"EDITION_2024","edition_defaults.value":"EXPORT_TOP_LEVEL"}}},"extensions":[[1000,9994],[9995,9999],[10000,10000]],"reserved":[[999,999]],"nested":{"FieldPresence":{"values":{"FIELD_PRESENCE_UNKNOWN":0,"EXPLICIT":1,"IMPLICIT":2,"LEGACY_REQUIRED":3}},"EnumType":{"values":{"ENUM_TYPE_UNKNOWN":0,"OPEN":1,"CLOSED":2}},"RepeatedFieldEncoding":{"values":{"REPEATED_FIELD_ENCODING_UNKNOWN":0,"PACKED":1,"EXPANDED":2}},"Utf8Validation":{"values":{"UTF8_VALIDATION_UNKNOWN":0,"VERIFY":2,"NONE":3}},"MessageEncoding":{"values":{"MESSAGE_ENCODING_UNKNOWN":0,"LENGTH_PREFIXED":1,"DELIMITED":2}},"JsonFormat":{"values":{"JSON_FORMAT_UNKNOWN":0,"ALLOW":1,"LEGACY_BEST_EFFORT":2}},"EnforceNamingStyle":{"values":{"ENFORCE_NAMING_STYLE_UNKNOWN":0,"STYLE2024":1,"STYLE_LEGACY":2}},"VisibilityFeature":{"fields":{},"reserved":[[1,536870911]],"nested":{"DefaultSymbolVisibility":{"values":{"DEFAULT_SYMBOL_VISIBILITY_UNKNOWN":0,"EXPORT_ALL":1,"EXPORT_TOP_LEVEL":2,"LOCAL_ALL":3,"STRICT":4}}}}}},"FeatureSetDefaults":{"edition":"proto2","fields":{"defaults":{"rule":"repeated","type":"FeatureSetEditionDefault","id":1},"minimumEdition":{"type":"Edition","id":4},"maximumEdition":{"type":"Edition","id":5}},"nested":{"FeatureSetEditionDefault":{"fields":{"edition":{"type":"Edition","id":3},"overridableFeatures":{"type":"FeatureSet","id":4},"fixedFeatures":{"type":"FeatureSet","id":5}},"reserved":[[1,1],[2,2],"features"]}}},"SourceCodeInfo":{"edition":"proto2","fields":{"location":{"rule":"repeated","type":"Location","id":1}},"extensions":[[536000000,536000000]],"nested":{"Location":{"fields":{"path":{"rule":"repeated","type":"int32","id":1,"options":{"packed":true}},"span":{"rule":"repeated","type":"int32","id":2,"options":{"packed":true}},"leadingComments":{"type":"string","id":3},"trailingComments":{"type":"string","id":4},"leadingDetachedComments":{"rule":"repeated","type":"string","id":6}}}}},"GeneratedCodeInfo":{"edition":"proto2","fields":{"annotation":{"rule":"repeated","type":"Annotation","id":1}},"nested":{"Annotation":{"fields":{"path":{"rule":"repeated","type":"int32","id":1,"options":{"packed":true}},"sourceFile":{"type":"string","id":2},"begin":{"type":"int32","id":3},"end":{"type":"int32","id":4},"semantic":{"type":"Semantic","id":5}},"nested":{"Semantic":{"values":{"NONE":0,"SET":1,"ALIAS":2}}}}}},"SymbolVisibility":{"edition":"proto2","values":{"VISIBILITY_UNSET":0,"VISIBILITY_LOCAL":1,"VISIBILITY_EXPORT":2}}}}}}}}');

/***/ }),

/***/ "(ssr)/./node_modules/protobufjs/google/protobuf/source_context.json":
/*!*********************************************************************!*\
  !*** ./node_modules/protobufjs/google/protobuf/source_context.json ***!
  \*********************************************************************/
/***/ ((module) => {

module.exports = JSON.parse('{"nested":{"google":{"nested":{"protobuf":{"nested":{"SourceContext":{"fields":{"fileName":{"type":"string","id":1}}}}}}}}}');

/***/ }),

/***/ "(ssr)/./node_modules/protobufjs/google/protobuf/type.json":
/*!***********************************************************!*\
  !*** ./node_modules/protobufjs/google/protobuf/type.json ***!
  \***********************************************************/
/***/ ((module) => {

module.exports = JSON.parse('{"nested":{"google":{"nested":{"protobuf":{"nested":{"Type":{"fields":{"name":{"type":"string","id":1},"fields":{"rule":"repeated","type":"Field","id":2},"oneofs":{"rule":"repeated","type":"string","id":3},"options":{"rule":"repeated","type":"Option","id":4},"sourceContext":{"type":"SourceContext","id":5},"syntax":{"type":"Syntax","id":6}}},"Field":{"fields":{"kind":{"type":"Kind","id":1},"cardinality":{"type":"Cardinality","id":2},"number":{"type":"int32","id":3},"name":{"type":"string","id":4},"typeUrl":{"type":"string","id":6},"oneofIndex":{"type":"int32","id":7},"packed":{"type":"bool","id":8},"options":{"rule":"repeated","type":"Option","id":9},"jsonName":{"type":"string","id":10},"defaultValue":{"type":"string","id":11}},"nested":{"Kind":{"values":{"TYPE_UNKNOWN":0,"TYPE_DOUBLE":1,"TYPE_FLOAT":2,"TYPE_INT64":3,"TYPE_UINT64":4,"TYPE_INT32":5,"TYPE_FIXED64":6,"TYPE_FIXED32":7,"TYPE_BOOL":8,"TYPE_STRING":9,"TYPE_GROUP":10,"TYPE_MESSAGE":11,"TYPE_BYTES":12,"TYPE_UINT32":13,"TYPE_ENUM":14,"TYPE_SFIXED32":15,"TYPE_SFIXED64":16,"TYPE_SINT32":17,"TYPE_SINT64":18}},"Cardinality":{"values":{"CARDINALITY_UNKNOWN":0,"CARDINALITY_OPTIONAL":1,"CARDINALITY_REQUIRED":2,"CARDINALITY_REPEATED":3}}}},"Enum":{"fields":{"name":{"type":"string","id":1},"enumvalue":{"rule":"repeated","type":"EnumValue","id":2},"options":{"rule":"repeated","type":"Option","id":3},"sourceContext":{"type":"SourceContext","id":4},"syntax":{"type":"Syntax","id":5}}},"EnumValue":{"fields":{"name":{"type":"string","id":1},"number":{"type":"int32","id":2},"options":{"rule":"repeated","type":"Option","id":3}}},"Option":{"fields":{"name":{"type":"string","id":1},"value":{"type":"Any","id":2}}},"Syntax":{"values":{"SYNTAX_PROTO2":0,"SYNTAX_PROTO3":1}},"Any":{"fields":{"type_url":{"type":"string","id":1},"value":{"type":"bytes","id":2}}},"SourceContext":{"fields":{"fileName":{"type":"string","id":1}}}}}}}}}');

/***/ })

};
;